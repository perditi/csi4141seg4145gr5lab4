
Lab_4_Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007568  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  08007738  08007738  00008738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085e8  080085e8  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  080085e8  080085e8  000095e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085f0  080085f0  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085f0  080085f0  000095f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085f4  080085f4  000095f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080085f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fdc  20000070  08008668  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000504c  08008668  0000b04c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b230  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b7d  00000000  00000000  000252d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001858  00000000  00000000  00028e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001315  00000000  00000000  0002a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024659  00000000  00000000  0002b9bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d6c5  00000000  00000000  00050016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de485  00000000  00000000  0006d6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014bb60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c9c  00000000  00000000  0014bba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00152840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007720 	.word	0x08007720

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08007720 	.word	0x08007720

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
	int done=1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	607b      	str	r3, [r7, #4]
	while(done)
 80005ca:	e19b      	b.n	8000904 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005d2:	48b3      	ldr	r0, [pc, #716]	@ (80008a0 <Get_Key+0x2e0>)
 80005d4:	f001 fcc2 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80005d8:	2200      	movs	r2, #0
 80005da:	2110      	movs	r1, #16
 80005dc:	48b0      	ldr	r0, [pc, #704]	@ (80008a0 <Get_Key+0x2e0>)
 80005de:	f001 fcbd 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005e2:	2200      	movs	r2, #0
 80005e4:	2120      	movs	r1, #32
 80005e6:	48ae      	ldr	r0, [pc, #696]	@ (80008a0 <Get_Key+0x2e0>)
 80005e8:	f001 fcb8 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80005ec:	2200      	movs	r2, #0
 80005ee:	2108      	movs	r1, #8
 80005f0:	48ab      	ldr	r0, [pc, #684]	@ (80008a0 <Get_Key+0x2e0>)
 80005f2:	f001 fcb3 	bl	8001f5c <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80005f6:	2140      	movs	r1, #64	@ 0x40
 80005f8:	48a9      	ldr	r0, [pc, #676]	@ (80008a0 <Get_Key+0x2e0>)
 80005fa:	f001 fc97 	bl	8001f2c <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000604:	bf00      	nop
 8000606:	2140      	movs	r1, #64	@ 0x40
 8000608:	48a5      	ldr	r0, [pc, #660]	@ (80008a0 <Get_Key+0x2e0>)
 800060a:	f001 fc8f 	bl	8001f2c <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1f8      	bne.n	8000606 <Get_Key+0x46>
		key='1';
 8000614:	4ba3      	ldr	r3, [pc, #652]	@ (80008a4 <Get_Key+0x2e4>)
 8000616:	2231      	movs	r2, #49	@ 0x31
 8000618:	701a      	strb	r2, [r3, #0]
		break;
 800061a:	e177      	b.n	800090c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	48a2      	ldr	r0, [pc, #648]	@ (80008a8 <Get_Key+0x2e8>)
 8000620:	f001 fc84 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d00b      	beq.n	8000642 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800062a:	bf00      	nop
 800062c:	2180      	movs	r1, #128	@ 0x80
 800062e:	489e      	ldr	r0, [pc, #632]	@ (80008a8 <Get_Key+0x2e8>)
 8000630:	f001 fc7c 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1f8      	bne.n	800062c <Get_Key+0x6c>
		key='4';
 800063a:	4b9a      	ldr	r3, [pc, #616]	@ (80008a4 <Get_Key+0x2e4>)
 800063c:	2234      	movs	r2, #52	@ 0x34
 800063e:	701a      	strb	r2, [r3, #0]
		break;
 8000640:	e164      	b.n	800090c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000642:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000646:	4899      	ldr	r0, [pc, #612]	@ (80008ac <Get_Key+0x2ec>)
 8000648:	f001 fc70 	bl	8001f2c <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d00c      	beq.n	800066c <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000652:	bf00      	nop
 8000654:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000658:	4894      	ldr	r0, [pc, #592]	@ (80008ac <Get_Key+0x2ec>)
 800065a:	f001 fc67 	bl	8001f2c <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1f7      	bne.n	8000654 <Get_Key+0x94>
		key='7';
 8000664:	4b8f      	ldr	r3, [pc, #572]	@ (80008a4 <Get_Key+0x2e4>)
 8000666:	2237      	movs	r2, #55	@ 0x37
 8000668:	701a      	strb	r2, [r3, #0]
		break;
 800066a:	e14f      	b.n	800090c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800066c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000670:	488e      	ldr	r0, [pc, #568]	@ (80008ac <Get_Key+0x2ec>)
 8000672:	f001 fc5b 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d00c      	beq.n	8000696 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800067c:	bf00      	nop
 800067e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000682:	488a      	ldr	r0, [pc, #552]	@ (80008ac <Get_Key+0x2ec>)
 8000684:	f001 fc52 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1f7      	bne.n	800067e <Get_Key+0xbe>
		key='*';
 800068e:	4b85      	ldr	r3, [pc, #532]	@ (80008a4 <Get_Key+0x2e4>)
 8000690:	222a      	movs	r2, #42	@ 0x2a
 8000692:	701a      	strb	r2, [r3, #0]
		break;
 8000694:	e13a      	b.n	800090c <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800069c:	4880      	ldr	r0, [pc, #512]	@ (80008a0 <Get_Key+0x2e0>)
 800069e:	f001 fc5d 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 80006a2:	2201      	movs	r2, #1
 80006a4:	2110      	movs	r1, #16
 80006a6:	487e      	ldr	r0, [pc, #504]	@ (80008a0 <Get_Key+0x2e0>)
 80006a8:	f001 fc58 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80006ac:	2200      	movs	r2, #0
 80006ae:	2120      	movs	r1, #32
 80006b0:	487b      	ldr	r0, [pc, #492]	@ (80008a0 <Get_Key+0x2e0>)
 80006b2:	f001 fc53 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80006b6:	2200      	movs	r2, #0
 80006b8:	2108      	movs	r1, #8
 80006ba:	4879      	ldr	r0, [pc, #484]	@ (80008a0 <Get_Key+0x2e0>)
 80006bc:	f001 fc4e 	bl	8001f5c <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006c0:	2140      	movs	r1, #64	@ 0x40
 80006c2:	4877      	ldr	r0, [pc, #476]	@ (80008a0 <Get_Key+0x2e0>)
 80006c4:	f001 fc32 	bl	8001f2c <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00b      	beq.n	80006e6 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006ce:	bf00      	nop
 80006d0:	2140      	movs	r1, #64	@ 0x40
 80006d2:	4873      	ldr	r0, [pc, #460]	@ (80008a0 <Get_Key+0x2e0>)
 80006d4:	f001 fc2a 	bl	8001f2c <HAL_GPIO_ReadPin>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1f8      	bne.n	80006d0 <Get_Key+0x110>
		key='2';
 80006de:	4b71      	ldr	r3, [pc, #452]	@ (80008a4 <Get_Key+0x2e4>)
 80006e0:	2232      	movs	r2, #50	@ 0x32
 80006e2:	701a      	strb	r2, [r3, #0]
		break;
 80006e4:	e112      	b.n	800090c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006e6:	2180      	movs	r1, #128	@ 0x80
 80006e8:	486f      	ldr	r0, [pc, #444]	@ (80008a8 <Get_Key+0x2e8>)
 80006ea:	f001 fc1f 	bl	8001f2c <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d00b      	beq.n	800070c <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80006f4:	bf00      	nop
 80006f6:	2180      	movs	r1, #128	@ 0x80
 80006f8:	486b      	ldr	r0, [pc, #428]	@ (80008a8 <Get_Key+0x2e8>)
 80006fa:	f001 fc17 	bl	8001f2c <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1f8      	bne.n	80006f6 <Get_Key+0x136>
		key='5';
 8000704:	4b67      	ldr	r3, [pc, #412]	@ (80008a4 <Get_Key+0x2e4>)
 8000706:	2235      	movs	r2, #53	@ 0x35
 8000708:	701a      	strb	r2, [r3, #0]
		break;
 800070a:	e0ff      	b.n	800090c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800070c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000710:	4866      	ldr	r0, [pc, #408]	@ (80008ac <Get_Key+0x2ec>)
 8000712:	f001 fc0b 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00c      	beq.n	8000736 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800071c:	bf00      	nop
 800071e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000722:	4862      	ldr	r0, [pc, #392]	@ (80008ac <Get_Key+0x2ec>)
 8000724:	f001 fc02 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f7      	bne.n	800071e <Get_Key+0x15e>
		key='8';
 800072e:	4b5d      	ldr	r3, [pc, #372]	@ (80008a4 <Get_Key+0x2e4>)
 8000730:	2238      	movs	r2, #56	@ 0x38
 8000732:	701a      	strb	r2, [r3, #0]
		break;
 8000734:	e0ea      	b.n	800090c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000736:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800073a:	485c      	ldr	r0, [pc, #368]	@ (80008ac <Get_Key+0x2ec>)
 800073c:	f001 fbf6 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d00c      	beq.n	8000760 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000746:	bf00      	nop
 8000748:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800074c:	4857      	ldr	r0, [pc, #348]	@ (80008ac <Get_Key+0x2ec>)
 800074e:	f001 fbed 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1f7      	bne.n	8000748 <Get_Key+0x188>
		key='0';
 8000758:	4b52      	ldr	r3, [pc, #328]	@ (80008a4 <Get_Key+0x2e4>)
 800075a:	2230      	movs	r2, #48	@ 0x30
 800075c:	701a      	strb	r2, [r3, #0]
		break;
 800075e:	e0d5      	b.n	800090c <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000766:	484e      	ldr	r0, [pc, #312]	@ (80008a0 <Get_Key+0x2e0>)
 8000768:	f001 fbf8 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 800076c:	2200      	movs	r2, #0
 800076e:	2110      	movs	r1, #16
 8000770:	484b      	ldr	r0, [pc, #300]	@ (80008a0 <Get_Key+0x2e0>)
 8000772:	f001 fbf3 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000776:	2201      	movs	r2, #1
 8000778:	2120      	movs	r1, #32
 800077a:	4849      	ldr	r0, [pc, #292]	@ (80008a0 <Get_Key+0x2e0>)
 800077c:	f001 fbee 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 8000780:	2200      	movs	r2, #0
 8000782:	2108      	movs	r1, #8
 8000784:	4846      	ldr	r0, [pc, #280]	@ (80008a0 <Get_Key+0x2e0>)
 8000786:	f001 fbe9 	bl	8001f5c <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800078a:	2140      	movs	r1, #64	@ 0x40
 800078c:	4844      	ldr	r0, [pc, #272]	@ (80008a0 <Get_Key+0x2e0>)
 800078e:	f001 fbcd 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00b      	beq.n	80007b0 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000798:	bf00      	nop
 800079a:	2140      	movs	r1, #64	@ 0x40
 800079c:	4840      	ldr	r0, [pc, #256]	@ (80008a0 <Get_Key+0x2e0>)
 800079e:	f001 fbc5 	bl	8001f2c <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f8      	bne.n	800079a <Get_Key+0x1da>
		key='3';
 80007a8:	4b3e      	ldr	r3, [pc, #248]	@ (80008a4 <Get_Key+0x2e4>)
 80007aa:	2233      	movs	r2, #51	@ 0x33
 80007ac:	701a      	strb	r2, [r3, #0]
		break;
 80007ae:	e0ad      	b.n	800090c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	483d      	ldr	r0, [pc, #244]	@ (80008a8 <Get_Key+0x2e8>)
 80007b4:	f001 fbba 	bl	8001f2c <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00b      	beq.n	80007d6 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007be:	bf00      	nop
 80007c0:	2180      	movs	r1, #128	@ 0x80
 80007c2:	4839      	ldr	r0, [pc, #228]	@ (80008a8 <Get_Key+0x2e8>)
 80007c4:	f001 fbb2 	bl	8001f2c <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1f8      	bne.n	80007c0 <Get_Key+0x200>
		key='6';
 80007ce:	4b35      	ldr	r3, [pc, #212]	@ (80008a4 <Get_Key+0x2e4>)
 80007d0:	2236      	movs	r2, #54	@ 0x36
 80007d2:	701a      	strb	r2, [r3, #0]
		break;
 80007d4:	e09a      	b.n	800090c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007da:	4834      	ldr	r0, [pc, #208]	@ (80008ac <Get_Key+0x2ec>)
 80007dc:	f001 fba6 	bl	8001f2c <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d00c      	beq.n	8000800 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80007e6:	bf00      	nop
 80007e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ec:	482f      	ldr	r0, [pc, #188]	@ (80008ac <Get_Key+0x2ec>)
 80007ee:	f001 fb9d 	bl	8001f2c <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d1f7      	bne.n	80007e8 <Get_Key+0x228>
		key='9';
 80007f8:	4b2a      	ldr	r3, [pc, #168]	@ (80008a4 <Get_Key+0x2e4>)
 80007fa:	2239      	movs	r2, #57	@ 0x39
 80007fc:	701a      	strb	r2, [r3, #0]
		break;
 80007fe:	e085      	b.n	800090c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000800:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000804:	4829      	ldr	r0, [pc, #164]	@ (80008ac <Get_Key+0x2ec>)
 8000806:	f001 fb91 	bl	8001f2c <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d00c      	beq.n	800082a <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000810:	bf00      	nop
 8000812:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000816:	4825      	ldr	r0, [pc, #148]	@ (80008ac <Get_Key+0x2ec>)
 8000818:	f001 fb88 	bl	8001f2c <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d1f7      	bne.n	8000812 <Get_Key+0x252>
		key='#';
 8000822:	4b20      	ldr	r3, [pc, #128]	@ (80008a4 <Get_Key+0x2e4>)
 8000824:	2223      	movs	r2, #35	@ 0x23
 8000826:	701a      	strb	r2, [r3, #0]
		break;
 8000828:	e070      	b.n	800090c <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000830:	481b      	ldr	r0, [pc, #108]	@ (80008a0 <Get_Key+0x2e0>)
 8000832:	f001 fb93 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000836:	2200      	movs	r2, #0
 8000838:	2110      	movs	r1, #16
 800083a:	4819      	ldr	r0, [pc, #100]	@ (80008a0 <Get_Key+0x2e0>)
 800083c:	f001 fb8e 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000840:	2200      	movs	r2, #0
 8000842:	2120      	movs	r1, #32
 8000844:	4816      	ldr	r0, [pc, #88]	@ (80008a0 <Get_Key+0x2e0>)
 8000846:	f001 fb89 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 800084a:	2201      	movs	r2, #1
 800084c:	2108      	movs	r1, #8
 800084e:	4814      	ldr	r0, [pc, #80]	@ (80008a0 <Get_Key+0x2e0>)
 8000850:	f001 fb84 	bl	8001f5c <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000854:	2140      	movs	r1, #64	@ 0x40
 8000856:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <Get_Key+0x2e0>)
 8000858:	f001 fb68 	bl	8001f2c <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00b      	beq.n	800087a <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000862:	bf00      	nop
 8000864:	2140      	movs	r1, #64	@ 0x40
 8000866:	480e      	ldr	r0, [pc, #56]	@ (80008a0 <Get_Key+0x2e0>)
 8000868:	f001 fb60 	bl	8001f2c <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1f8      	bne.n	8000864 <Get_Key+0x2a4>
		key='A';
 8000872:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <Get_Key+0x2e4>)
 8000874:	2241      	movs	r2, #65	@ 0x41
 8000876:	701a      	strb	r2, [r3, #0]
		break;
 8000878:	e048      	b.n	800090c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800087a:	2180      	movs	r1, #128	@ 0x80
 800087c:	480a      	ldr	r0, [pc, #40]	@ (80008a8 <Get_Key+0x2e8>)
 800087e:	f001 fb55 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d013      	beq.n	80008b0 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000888:	bf00      	nop
 800088a:	2180      	movs	r1, #128	@ 0x80
 800088c:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <Get_Key+0x2e8>)
 800088e:	f001 fb4d 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1f8      	bne.n	800088a <Get_Key+0x2ca>
		key='B';
 8000898:	4b02      	ldr	r3, [pc, #8]	@ (80008a4 <Get_Key+0x2e4>)
 800089a:	2242      	movs	r2, #66	@ 0x42
 800089c:	701a      	strb	r2, [r3, #0]
		break;
 800089e:	e035      	b.n	800090c <Get_Key+0x34c>
 80008a0:	40020400 	.word	0x40020400
 80008a4:	2000008c 	.word	0x2000008c
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80008b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b4:	4818      	ldr	r0, [pc, #96]	@ (8000918 <Get_Key+0x358>)
 80008b6:	f001 fb39 	bl	8001f2c <HAL_GPIO_ReadPin>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d00c      	beq.n	80008da <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80008c0:	bf00      	nop
 80008c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008c6:	4814      	ldr	r0, [pc, #80]	@ (8000918 <Get_Key+0x358>)
 80008c8:	f001 fb30 	bl	8001f2c <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1f7      	bne.n	80008c2 <Get_Key+0x302>
		key='C';
 80008d2:	4b12      	ldr	r3, [pc, #72]	@ (800091c <Get_Key+0x35c>)
 80008d4:	2243      	movs	r2, #67	@ 0x43
 80008d6:	701a      	strb	r2, [r3, #0]
		break;
 80008d8:	e018      	b.n	800090c <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80008da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008de:	480e      	ldr	r0, [pc, #56]	@ (8000918 <Get_Key+0x358>)
 80008e0:	f001 fb24 	bl	8001f2c <HAL_GPIO_ReadPin>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00c      	beq.n	8000904 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80008ea:	bf00      	nop
 80008ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f0:	4809      	ldr	r0, [pc, #36]	@ (8000918 <Get_Key+0x358>)
 80008f2:	f001 fb1b 	bl	8001f2c <HAL_GPIO_ReadPin>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1f7      	bne.n	80008ec <Get_Key+0x32c>
		key='D';
 80008fc:	4b07      	ldr	r3, [pc, #28]	@ (800091c <Get_Key+0x35c>)
 80008fe:	2244      	movs	r2, #68	@ 0x44
 8000900:	701a      	strb	r2, [r3, #0]
		break;
 8000902:	e003      	b.n	800090c <Get_Key+0x34c>
	while(done)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	f47f ae60 	bne.w	80005cc <Get_Key+0xc>
	}
}
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	return(key);
 800090c:	4b03      	ldr	r3, [pc, #12]	@ (800091c <Get_Key+0x35c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40020000 	.word	0x40020000
 800091c:	2000008c 	.word	0x2000008c

08000920 <ClearBuffer>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ClearBuffer() {
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	memset(buffer, '\0', BUFFER_SIZE);
 8000924:	2206      	movs	r2, #6
 8000926:	2100      	movs	r1, #0
 8000928:	4803      	ldr	r0, [pc, #12]	@ (8000938 <ClearBuffer+0x18>)
 800092a:	f006 fa65 	bl	8006df8 <memset>
	count = 0;
 800092e:	4b03      	ldr	r3, [pc, #12]	@ (800093c <ClearBuffer+0x1c>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000013c 	.word	0x2000013c
 800093c:	20000144 	.word	0x20000144

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000944:	f001 f83a 	bl	80019bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000948:	f000 f860 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f000 f924 	bl	8000b98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000950:	f000 f8f8 	bl	8000b44 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000954:	f000 f8c8 	bl	8000ae8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	/* USER CODE BEGIN 2 */
	SSD1306_Init();
 8000958:	f000 fb9a 	bl	8001090 <SSD1306_Init>
	SSD1306_GotoXY(0, 0);
 800095c:	2100      	movs	r1, #0
 800095e:	2000      	movs	r0, #0
 8000960:	f000 fd00 	bl	8001364 <SSD1306_GotoXY>
	//SSD1306_Puts ("Voltage:", &Font_11x18, 1);
	SSD1306_Puts("Enter Code:", &Font_11x18, 1);
 8000964:	2201      	movs	r2, #1
 8000966:	491a      	ldr	r1, [pc, #104]	@ (80009d0 <main+0x90>)
 8000968:	481a      	ldr	r0, [pc, #104]	@ (80009d4 <main+0x94>)
 800096a:	f000 fd8f 	bl	800148c <SSD1306_Puts>
	SSD1306_GotoXY(0, 30);
 800096e:	211e      	movs	r1, #30
 8000970:	2000      	movs	r0, #0
 8000972:	f000 fcf7 	bl	8001364 <SSD1306_GotoXY>
	SSD1306_UpdateScreen();
 8000976:	f000 fc4f 	bl	8001218 <SSD1306_UpdateScreen>
	//SSD1306_UpdateScreen();
	//HAL_Delay(500);
	//turn green led on
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2140      	movs	r1, #64	@ 0x40
 800097e:	4816      	ldr	r0, [pc, #88]	@ (80009d8 <main+0x98>)
 8000980:	f001 faec 	bl	8001f5c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000984:	f003 fc94 	bl	80042b0 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8000988:	4a14      	ldr	r2, [pc, #80]	@ (80009dc <main+0x9c>)
 800098a:	2100      	movs	r1, #0
 800098c:	4814      	ldr	r0, [pc, #80]	@ (80009e0 <main+0xa0>)
 800098e:	f003 fcd9 	bl	8004344 <osThreadNew>
 8000992:	4603      	mov	r3, r0
 8000994:	4a13      	ldr	r2, [pc, #76]	@ (80009e4 <main+0xa4>)
 8000996:	6013      	str	r3, [r2, #0]

  /* creation of KeypadTask */
  KeypadTaskHandle = osThreadNew(StartKeypadTask, NULL, &KeypadTask_attributes);
 8000998:	4a13      	ldr	r2, [pc, #76]	@ (80009e8 <main+0xa8>)
 800099a:	2100      	movs	r1, #0
 800099c:	4813      	ldr	r0, [pc, #76]	@ (80009ec <main+0xac>)
 800099e:	f003 fcd1 	bl	8004344 <osThreadNew>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4a12      	ldr	r2, [pc, #72]	@ (80009f0 <main+0xb0>)
 80009a6:	6013      	str	r3, [r2, #0]

  /* creation of ConfigureArmTas */
  ConfigureArmTasHandle = osThreadNew(StartConfigureArmTask, NULL, &ConfigureArmTas_attributes);
 80009a8:	4a12      	ldr	r2, [pc, #72]	@ (80009f4 <main+0xb4>)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4812      	ldr	r0, [pc, #72]	@ (80009f8 <main+0xb8>)
 80009ae:	f003 fcc9 	bl	8004344 <osThreadNew>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a11      	ldr	r2, [pc, #68]	@ (80009fc <main+0xbc>)
 80009b6:	6013      	str	r3, [r2, #0]

  /* creation of MotionTask */
  MotionTaskHandle = osThreadNew(StartMotionTask, NULL, &MotionTask_attributes);
 80009b8:	4a11      	ldr	r2, [pc, #68]	@ (8000a00 <main+0xc0>)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4811      	ldr	r0, [pc, #68]	@ (8000a04 <main+0xc4>)
 80009be:	f003 fcc1 	bl	8004344 <osThreadNew>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a10      	ldr	r2, [pc, #64]	@ (8000a08 <main+0xc8>)
 80009c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009c8:	f003 fc96 	bl	80042f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <main+0x8c>
 80009d0:	20000000 	.word	0x20000000
 80009d4:	0800777c 	.word	0x0800777c
 80009d8:	40020000 	.word	0x40020000
 80009dc:	0800850c 	.word	0x0800850c
 80009e0:	08000ced 	.word	0x08000ced
 80009e4:	2000012c 	.word	0x2000012c
 80009e8:	08008530 	.word	0x08008530
 80009ec:	08000dc1 	.word	0x08000dc1
 80009f0:	20000130 	.word	0x20000130
 80009f4:	08008554 	.word	0x08008554
 80009f8:	08000e49 	.word	0x08000e49
 80009fc:	20000134 	.word	0x20000134
 8000a00:	08008578 	.word	0x08008578
 8000a04:	08000fb9 	.word	0x08000fb9
 8000a08:	20000138 	.word	0x20000138

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b094      	sub	sp, #80	@ 0x50
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	2234      	movs	r2, #52	@ 0x34
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f006 f9ec 	bl	8006df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae0 <SystemClock_Config+0xd4>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a38:	4a29      	ldr	r2, [pc, #164]	@ (8000ae0 <SystemClock_Config+0xd4>)
 8000a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a40:	4b27      	ldr	r3, [pc, #156]	@ (8000ae0 <SystemClock_Config+0xd4>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <SystemClock_Config+0xd8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a58:	4a22      	ldr	r2, [pc, #136]	@ (8000ae4 <SystemClock_Config+0xd8>)
 8000a5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	4b20      	ldr	r3, [pc, #128]	@ (8000ae4 <SystemClock_Config+0xd8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a74:	2310      	movs	r3, #16
 8000a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a80:	2310      	movs	r3, #16
 8000a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a84:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a88:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f002 fbc0 	bl	8003220 <HAL_RCC_OscConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aa6:	f000 faed 	bl	8001084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	230f      	movs	r3, #15
 8000aac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 f82e 	bl	8002b28 <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ad2:	f000 fad7 	bl	8001084 <Error_Handler>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3750      	adds	r7, #80	@ 0x50
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40007000 	.word	0x40007000

08000ae8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000aee:	4a13      	ldr	r2, [pc, #76]	@ (8000b3c <MX_I2C1_Init+0x54>)
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000af4:	4a12      	ldr	r2, [pc, #72]	@ (8000b40 <MX_I2C1_Init+0x58>)
 8000af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000b06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b12:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b18:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <MX_I2C1_Init+0x50>)
 8000b26:	f001 fa33 	bl	8001f90 <HAL_I2C_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b30:	f000 faa8 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000090 	.word	0x20000090
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	00061a80 	.word	0x00061a80

08000b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	@ (8000b94 <MX_USART2_UART_Init+0x50>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b50:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_USART2_UART_Init+0x4c>)
 8000b7c:	f003 f890 	bl	8003ca0 <HAL_UART_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b86:	f000 fa7d 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200000e4 	.word	0x200000e4
 8000b94:	40004400 	.word	0x40004400

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	@ 0x28
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8000cdc <MX_GPIO_Init+0x144>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a49      	ldr	r2, [pc, #292]	@ (8000cdc <MX_GPIO_Init+0x144>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b47      	ldr	r3, [pc, #284]	@ (8000cdc <MX_GPIO_Init+0x144>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b43      	ldr	r3, [pc, #268]	@ (8000cdc <MX_GPIO_Init+0x144>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a42      	ldr	r2, [pc, #264]	@ (8000cdc <MX_GPIO_Init+0x144>)
 8000bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b40      	ldr	r3, [pc, #256]	@ (8000cdc <MX_GPIO_Init+0x144>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b3c      	ldr	r3, [pc, #240]	@ (8000cdc <MX_GPIO_Init+0x144>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a3b      	ldr	r2, [pc, #236]	@ (8000cdc <MX_GPIO_Init+0x144>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b39      	ldr	r3, [pc, #228]	@ (8000cdc <MX_GPIO_Init+0x144>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b35      	ldr	r3, [pc, #212]	@ (8000cdc <MX_GPIO_Init+0x144>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a34      	ldr	r2, [pc, #208]	@ (8000cdc <MX_GPIO_Init+0x144>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b32      	ldr	r3, [pc, #200]	@ (8000cdc <MX_GPIO_Init+0x144>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	21e0      	movs	r1, #224	@ 0xe0
 8000c22:	482f      	ldr	r0, [pc, #188]	@ (8000ce0 <MX_GPIO_Init+0x148>)
 8000c24:	f001 f99a 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000c2e:	482d      	ldr	r0, [pc, #180]	@ (8000ce4 <MX_GPIO_Init+0x14c>)
 8000c30:	f001 f994 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c34:	23e0      	movs	r3, #224	@ 0xe0
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4825      	ldr	r0, [pc, #148]	@ (8000ce0 <MX_GPIO_Init+0x148>)
 8000c4c:	f000 ffda 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000c50:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	481e      	ldr	r0, [pc, #120]	@ (8000ce4 <MX_GPIO_Init+0x14c>)
 8000c6a:	f000 ffcb 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000c6e:	2380      	movs	r3, #128	@ 0x80
 8000c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4819      	ldr	r0, [pc, #100]	@ (8000ce8 <MX_GPIO_Init+0x150>)
 8000c82:	f000 ffbf 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000c86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4811      	ldr	r0, [pc, #68]	@ (8000ce0 <MX_GPIO_Init+0x148>)
 8000c9c:	f000 ffb2 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ca0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480a      	ldr	r0, [pc, #40]	@ (8000ce0 <MX_GPIO_Init+0x148>)
 8000cb6:	f000 ffa5 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000cba:	2340      	movs	r3, #64	@ 0x40
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <MX_GPIO_Init+0x14c>)
 8000cce:	f000 ff99 	bl	8001c04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	@ 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020000 	.word	0x40020000
 8000ce4:	40020400 	.word	0x40020400
 8000ce8:	40020800 	.word	0x40020800

08000cec <StartOLEDTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char *ARMED = "ARMED";
 8000cf4:	4b29      	ldr	r3, [pc, #164]	@ (8000d9c <StartOLEDTask+0xb0>)
 8000cf6:	613b      	str	r3, [r7, #16]
	char *UNARMED = "NOT ARMED";
 8000cf8:	4b29      	ldr	r3, [pc, #164]	@ (8000da0 <StartOLEDTask+0xb4>)
 8000cfa:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		if (updateOLED) {
 8000cfc:	4b29      	ldr	r3, [pc, #164]	@ (8000da4 <StartOLEDTask+0xb8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d046      	beq.n	8000d92 <StartOLEDTask+0xa6>
			SSD1306_Clear();
 8000d04:	f000 fbe7 	bl	80014d6 <SSD1306_Clear>
			SSD1306_UpdateScreen();
 8000d08:	f000 fa86 	bl	8001218 <SSD1306_UpdateScreen>

			SSD1306_GotoXY(0, 0);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f000 fb28 	bl	8001364 <SSD1306_GotoXY>

			if (isArmed) {
 8000d14:	4b24      	ldr	r3, [pc, #144]	@ (8000da8 <StartOLEDTask+0xbc>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d005      	beq.n	8000d28 <StartOLEDTask+0x3c>
				SSD1306_Puts(ARMED, &Font_11x18, 1);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4923      	ldr	r1, [pc, #140]	@ (8000dac <StartOLEDTask+0xc0>)
 8000d20:	6938      	ldr	r0, [r7, #16]
 8000d22:	f000 fbb3 	bl	800148c <SSD1306_Puts>
 8000d26:	e004      	b.n	8000d32 <StartOLEDTask+0x46>
			} else {
				SSD1306_Puts(UNARMED, &Font_11x18, 1);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4920      	ldr	r1, [pc, #128]	@ (8000dac <StartOLEDTask+0xc0>)
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f000 fbad 	bl	800148c <SSD1306_Puts>
			}

			//SSD1306_Puts("Enter Code:", &Font_11x18, 1);

			if (triggerCountdown) {
 8000d32:	4b1f      	ldr	r3, [pc, #124]	@ (8000db0 <StartOLEDTask+0xc4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d012      	beq.n	8000d60 <StartOLEDTask+0x74>
				SSD1306_GotoXY(70, 30);
 8000d3a:	211e      	movs	r1, #30
 8000d3c:	2046      	movs	r0, #70	@ 0x46
 8000d3e:	f000 fb11 	bl	8001364 <SSD1306_GotoXY>
				char countd[2];
				sprintf(countd, "%d", countdown);
 8000d42:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <StartOLEDTask+0xc8>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	491b      	ldr	r1, [pc, #108]	@ (8000db8 <StartOLEDTask+0xcc>)
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f006 f833 	bl	8006db8 <siprintf>
				SSD1306_Puts(countd, &Font_11x18, 1);
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	2201      	movs	r2, #1
 8000d58:	4914      	ldr	r1, [pc, #80]	@ (8000dac <StartOLEDTask+0xc0>)
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fb96 	bl	800148c <SSD1306_Puts>
			} else {

			}

			SSD1306_GotoXY(0, 30);
 8000d60:	211e      	movs	r1, #30
 8000d62:	2000      	movs	r0, #0
 8000d64:	f000 fafe 	bl	8001364 <SSD1306_GotoXY>
			for (int i = 0; i < count; i++) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e007      	b.n	8000d7e <StartOLEDTask+0x92>

				SSD1306_Putc('*', &Font_11x18, 1);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	490e      	ldr	r1, [pc, #56]	@ (8000dac <StartOLEDTask+0xc0>)
 8000d72:	202a      	movs	r0, #42	@ 0x2a
 8000d74:	f000 fb0c 	bl	8001390 <SSD1306_Putc>
			for (int i = 0; i < count; i++) {
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <StartOLEDTask+0xd0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	dbf2      	blt.n	8000d6e <StartOLEDTask+0x82>

			}

			SSD1306_UpdateScreen();
 8000d88:	f000 fa46 	bl	8001218 <SSD1306_UpdateScreen>
			updateOLED = 0;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <StartOLEDTask+0xb8>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
		}
		osDelay(100);
 8000d92:	2064      	movs	r0, #100	@ 0x64
 8000d94:	f003 fb68 	bl	8004468 <osDelay>
		if (updateOLED) {
 8000d98:	e7b0      	b.n	8000cfc <StartOLEDTask+0x10>
 8000d9a:	bf00      	nop
 8000d9c:	0800776c 	.word	0x0800776c
 8000da0:	08007788 	.word	0x08007788
 8000da4:	2000014c 	.word	0x2000014c
 8000da8:	20000148 	.word	0x20000148
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000154 	.word	0x20000154
 8000db4:	20000008 	.word	0x20000008
 8000db8:	08007794 	.word	0x08007794
 8000dbc:	20000144 	.word	0x20000144

08000dc0 <StartKeypadTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartKeypadTask */
void StartKeypadTask(void *argument)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartKeypadTask */

	/* Infinite loop */
	for (;;) {

		if (enableKeyboard) {
 8000dc8:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <StartKeypadTask+0x70>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d029      	beq.n	8000e24 <StartKeypadTask+0x64>
			key = Get_Key();
 8000dd0:	f7ff fbf6 	bl	80005c0 <Get_Key>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b16      	ldr	r3, [pc, #88]	@ (8000e34 <StartKeypadTask+0x74>)
 8000dda:	701a      	strb	r2, [r3, #0]

			if (key != '\0') {
 8000ddc:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <StartKeypadTask+0x74>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d01f      	beq.n	8000e24 <StartKeypadTask+0x64>

				if (key == '#' || key == '*') {
 8000de4:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <StartKeypadTask+0x74>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b23      	cmp	r3, #35	@ 0x23
 8000dea:	d003      	beq.n	8000df4 <StartKeypadTask+0x34>
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <StartKeypadTask+0x74>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000df2:	d104      	bne.n	8000dfe <StartKeypadTask+0x3e>

					commandCode = key;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <StartKeypadTask+0x74>)
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <StartKeypadTask+0x78>)
 8000dfa:	701a      	strb	r2, [r3, #0]
 8000dfc:	e00f      	b.n	8000e1e <StartKeypadTask+0x5e>

				} else if (count < BUFFER_SIZE) {
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <StartKeypadTask+0x7c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	dc09      	bgt.n	8000e1a <StartKeypadTask+0x5a>
					buffer[count++] = key;
 8000e06:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <StartKeypadTask+0x7c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	490b      	ldr	r1, [pc, #44]	@ (8000e3c <StartKeypadTask+0x7c>)
 8000e0e:	600a      	str	r2, [r1, #0]
 8000e10:	4a08      	ldr	r2, [pc, #32]	@ (8000e34 <StartKeypadTask+0x74>)
 8000e12:	7811      	ldrb	r1, [r2, #0]
 8000e14:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <StartKeypadTask+0x80>)
 8000e16:	54d1      	strb	r1, [r2, r3]
 8000e18:	e001      	b.n	8000e1e <StartKeypadTask+0x5e>
					//HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
				} else {
					ClearBuffer();
 8000e1a:	f7ff fd81 	bl	8000920 <ClearBuffer>
				}

				updateOLED = 1;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <StartKeypadTask+0x84>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
				//delay to prevent double input
				//HAL_Delay(100);
			}
		}

		osDelay(300);
 8000e24:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e28:	f003 fb1e 	bl	8004468 <osDelay>
		if (enableKeyboard) {
 8000e2c:	e7cc      	b.n	8000dc8 <StartKeypadTask+0x8>
 8000e2e:	bf00      	nop
 8000e30:	2000000c 	.word	0x2000000c
 8000e34:	2000008c 	.word	0x2000008c
 8000e38:	20000158 	.word	0x20000158
 8000e3c:	20000144 	.word	0x20000144
 8000e40:	2000013c 	.word	0x2000013c
 8000e44:	2000014c 	.word	0x2000014c

08000e48 <StartConfigureArmTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartConfigureArmTask */
void StartConfigureArmTask(void *argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	char passcode[6];
	/* Infinite loop */
	for (;;) {

		//reset the input number
		if (commandCode == '*') {
 8000e50:	4b4f      	ldr	r3, [pc, #316]	@ (8000f90 <StartConfigureArmTask+0x148>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e56:	d102      	bne.n	8000e5e <StartConfigureArmTask+0x16>
			ClearBuffer();
 8000e58:	f7ff fd62 	bl	8000920 <ClearBuffer>
 8000e5c:	e08f      	b.n	8000f7e <StartConfigureArmTask+0x136>
		} else if (commandCode == '#') {
 8000e5e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f90 <StartConfigureArmTask+0x148>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b23      	cmp	r3, #35	@ 0x23
 8000e64:	f040 808b 	bne.w	8000f7e <StartConfigureArmTask+0x136>

			//input code must be 4 or 6 digits
			if (count == 4 || count == 6) {
 8000e68:	4b4a      	ldr	r3, [pc, #296]	@ (8000f94 <StartConfigureArmTask+0x14c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	d003      	beq.n	8000e78 <StartConfigureArmTask+0x30>
 8000e70:	4b48      	ldr	r3, [pc, #288]	@ (8000f94 <StartConfigureArmTask+0x14c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b06      	cmp	r3, #6
 8000e76:	d17e      	bne.n	8000f76 <StartConfigureArmTask+0x12e>

				if (!isArmed) {
 8000e78:	4b47      	ldr	r3, [pc, #284]	@ (8000f98 <StartConfigureArmTask+0x150>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d157      	bne.n	8000f30 <StartConfigureArmTask+0xe8>
					//disable keyboard
					enableKeyboard = 0;
 8000e80:	4b46      	ldr	r3, [pc, #280]	@ (8000f9c <StartConfigureArmTask+0x154>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]

					//set password
					strncpy(passcode, buffer, count);
 8000e86:	4b43      	ldr	r3, [pc, #268]	@ (8000f94 <StartConfigureArmTask+0x14c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4943      	ldr	r1, [pc, #268]	@ (8000fa0 <StartConfigureArmTask+0x158>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	f005 ffb8 	bl	8006e08 <strncpy>
					passcode[count] = '\0';
 8000e98:	4b3e      	ldr	r3, [pc, #248]	@ (8000f94 <StartConfigureArmTask+0x14c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3318      	adds	r3, #24
 8000e9e:	443b      	add	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f803 2c0c 	strb.w	r2, [r3, #-12]
					ClearBuffer();
 8000ea6:	f7ff fd3b 	bl	8000920 <ClearBuffer>

					//start timer
					triggerCountdown = 1;
 8000eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa4 <StartConfigureArmTask+0x15c>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
					for (int i = 0; i < TIMER_MAX; i++) {
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	e00e      	b.n	8000ed4 <StartConfigureArmTask+0x8c>
						countdown--;
 8000eb6:	4b3c      	ldr	r3, [pc, #240]	@ (8000fa8 <StartConfigureArmTask+0x160>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	4a3a      	ldr	r2, [pc, #232]	@ (8000fa8 <StartConfigureArmTask+0x160>)
 8000ebe:	6013      	str	r3, [r2, #0]
						updateOLED = 1;
 8000ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8000fac <StartConfigureArmTask+0x164>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]
						osDelay(1000);
 8000ec6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eca:	f003 facd 	bl	8004468 <osDelay>
					for (int i = 0; i < TIMER_MAX; i++) {
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	2b13      	cmp	r3, #19
 8000ed8:	dded      	ble.n	8000eb6 <StartConfigureArmTask+0x6e>
					}

					//arm the system
					isArmed = 1;
 8000eda:	4b2f      	ldr	r3, [pc, #188]	@ (8000f98 <StartConfigureArmTask+0x150>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
					//display the armed status

					//turn red led on
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	4832      	ldr	r0, [pc, #200]	@ (8000fb0 <StartConfigureArmTask+0x168>)
 8000ee6:	f001 f839 	bl	8001f5c <HAL_GPIO_WritePin>

					//turn green led off
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2140      	movs	r1, #64	@ 0x40
 8000eee:	4830      	ldr	r0, [pc, #192]	@ (8000fb0 <StartConfigureArmTask+0x168>)
 8000ef0:	f001 f834 	bl	8001f5c <HAL_GPIO_WritePin>

					//turn buzzer on
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2180      	movs	r1, #128	@ 0x80
 8000ef8:	482d      	ldr	r0, [pc, #180]	@ (8000fb0 <StartConfigureArmTask+0x168>)
 8000efa:	f001 f82f 	bl	8001f5c <HAL_GPIO_WritePin>

					//wait
					osDelay(2000);
 8000efe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f02:	f003 fab1 	bl	8004468 <osDelay>

					//turn buzzer off
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2180      	movs	r1, #128	@ 0x80
 8000f0a:	4829      	ldr	r0, [pc, #164]	@ (8000fb0 <StartConfigureArmTask+0x168>)
 8000f0c:	f001 f826 	bl	8001f5c <HAL_GPIO_WritePin>

					//arm the motion sensor
					armMotionSensor = 1;
 8000f10:	4b28      	ldr	r3, [pc, #160]	@ (8000fb4 <StartConfigureArmTask+0x16c>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]

					//reset countdown
					countdown = TIMER_MAX;
 8000f16:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <StartConfigureArmTask+0x160>)
 8000f18:	2214      	movs	r2, #20
 8000f1a:	601a      	str	r2, [r3, #0]
					triggerCountdown = 0;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	@ (8000fa4 <StartConfigureArmTask+0x15c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]

					//enable keyboard
					enableKeyboard = 1;
 8000f22:	4b1e      	ldr	r3, [pc, #120]	@ (8000f9c <StartConfigureArmTask+0x154>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	601a      	str	r2, [r3, #0]

					updateOLED = 1;
 8000f28:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <StartConfigureArmTask+0x164>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
				if (!isArmed) {
 8000f2e:	e025      	b.n	8000f7c <StartConfigureArmTask+0x134>

				} else if (isArmed) {
 8000f30:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <StartConfigureArmTask+0x150>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d021      	beq.n	8000f7c <StartConfigureArmTask+0x134>
					//char *msg = "Passcode:";
					//HAL_UART_Transmit(&huart2, msg, strlen(msg), HAL_MAX_DELAY);
					//HAL_UART_Transmit(&huart2, passcode, strlen(passcode), HAL_MAX_DELAY);
					if (strcmp(buffer, passcode) == 0) {
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4818      	ldr	r0, [pc, #96]	@ (8000fa0 <StartConfigureArmTask+0x158>)
 8000f40:	f7ff f966 	bl	8000210 <strcmp>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d118      	bne.n	8000f7c <StartConfigureArmTask+0x134>

						countdown = TIMER_MAX;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <StartConfigureArmTask+0x160>)
 8000f4c:	2214      	movs	r2, #20
 8000f4e:	601a      	str	r2, [r3, #0]

						isArmed = 0;
 8000f50:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <StartConfigureArmTask+0x150>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]

						ClearBuffer();
 8000f56:	f7ff fce3 	bl	8000920 <ClearBuffer>

						//turn green led on
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2140      	movs	r1, #64	@ 0x40
 8000f5e:	4814      	ldr	r0, [pc, #80]	@ (8000fb0 <StartConfigureArmTask+0x168>)
 8000f60:	f000 fffc 	bl	8001f5c <HAL_GPIO_WritePin>
						//turn red led off
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2120      	movs	r1, #32
 8000f68:	4811      	ldr	r0, [pc, #68]	@ (8000fb0 <StartConfigureArmTask+0x168>)
 8000f6a:	f000 fff7 	bl	8001f5c <HAL_GPIO_WritePin>

						updateOLED = 1;
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <StartConfigureArmTask+0x164>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
				if (!isArmed) {
 8000f74:	e002      	b.n	8000f7c <StartConfigureArmTask+0x134>
					}
				}
			} else {
				//invalid length code inputted
				ClearBuffer();
 8000f76:	f7ff fcd3 	bl	8000920 <ClearBuffer>
 8000f7a:	e000      	b.n	8000f7e <StartConfigureArmTask+0x136>
				if (!isArmed) {
 8000f7c:	bf00      	nop
			}
		}

		//reset command code
		commandCode = '\0';
 8000f7e:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <StartConfigureArmTask+0x148>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]

		osDelay(500);
 8000f84:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f88:	f003 fa6e 	bl	8004468 <osDelay>
		if (commandCode == '*') {
 8000f8c:	e760      	b.n	8000e50 <StartConfigureArmTask+0x8>
 8000f8e:	bf00      	nop
 8000f90:	20000158 	.word	0x20000158
 8000f94:	20000144 	.word	0x20000144
 8000f98:	20000148 	.word	0x20000148
 8000f9c:	2000000c 	.word	0x2000000c
 8000fa0:	2000013c 	.word	0x2000013c
 8000fa4:	20000154 	.word	0x20000154
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	2000014c 	.word	0x2000014c
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	20000150 	.word	0x20000150

08000fb8 <StartMotionTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotionTask */
void StartMotionTask(void *argument)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	GPIO_PinState motionState;
	//char motionStateStr[2];
	/* Infinite loop */
	for (;;) {
		//get the state of the motion sensor
		motionState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000fc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fc4:	4820      	ldr	r0, [pc, #128]	@ (8001048 <StartMotionTask+0x90>)
 8000fc6:	f000 ffb1 	bl	8001f2c <HAL_GPIO_ReadPin>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	72fb      	strb	r3, [r7, #11]

		//debug statements

		if (armMotionSensor && isArmed) {
 8000fce:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <StartMotionTask+0x94>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d034      	beq.n	8001040 <StartMotionTask+0x88>
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001050 <StartMotionTask+0x98>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d030      	beq.n	8001040 <StartMotionTask+0x88>
			//HAL_UART_Transmit(&huart2, (uint8_t*) motionStateStr,
			//		strlen(motionStateStr), HAL_MAX_DELAY);
			if (motionState == GPIO_PIN_SET) {
 8000fde:	7afb      	ldrb	r3, [r7, #11]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d12d      	bne.n	8001040 <StartMotionTask+0x88>
				//start timer
				triggerCountdown = 1;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <StartMotionTask+0x9c>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < TIMER_MAX && isArmed; i++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	e00e      	b.n	800100e <StartMotionTask+0x56>

					countdown--;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <StartMotionTask+0xa0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	4a18      	ldr	r2, [pc, #96]	@ (8001058 <StartMotionTask+0xa0>)
 8000ff8:	6013      	str	r3, [r2, #0]
					updateOLED = 1;
 8000ffa:	4b18      	ldr	r3, [pc, #96]	@ (800105c <StartMotionTask+0xa4>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
					osDelay(1000);
 8001000:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001004:	f003 fa30 	bl	8004468 <osDelay>
				for (int i = 0; i < TIMER_MAX && isArmed; i++) {
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2b13      	cmp	r3, #19
 8001012:	dc03      	bgt.n	800101c <StartMotionTask+0x64>
 8001014:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <StartMotionTask+0x98>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1e9      	bne.n	8000ff0 <StartMotionTask+0x38>
				}

				//check if state is still armed, trigger buzzer
				if (isArmed) {
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <StartMotionTask+0x98>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <StartMotionTask+0x76>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2180      	movs	r1, #128	@ 0x80
 8001028:	4807      	ldr	r0, [pc, #28]	@ (8001048 <StartMotionTask+0x90>)
 800102a:	f000 ff97 	bl	8001f5c <HAL_GPIO_WritePin>
				}

				//disable motion sensor
				armMotionSensor = 0;
 800102e:	4b07      	ldr	r3, [pc, #28]	@ (800104c <StartMotionTask+0x94>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]

				countdown = TIMER_MAX;
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <StartMotionTask+0xa0>)
 8001036:	2214      	movs	r2, #20
 8001038:	601a      	str	r2, [r3, #0]
				triggerCountdown = 0;
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <StartMotionTask+0x9c>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
			}
		}

		// Send the motion state over UART
		//HAL_UART_Transmit(&huart2, (uint8_t*)motionStateStr, strlen(motionStateStr), HAL_MAX_DELAY);
		osDelay(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f003 fa11 	bl	8004468 <osDelay>
		motionState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8001046:	e7bb      	b.n	8000fc0 <StartMotionTask+0x8>
 8001048:	40020000 	.word	0x40020000
 800104c:	20000150 	.word	0x20000150
 8001050:	20000148 	.word	0x20000148
 8001054:	20000154 	.word	0x20000154
 8001058:	20000008 	.word	0x20000008
 800105c:	2000014c 	.word	0x2000014c

08001060 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001072:	f000 fcc5 	bl	8001a00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40001000 	.word	0x40001000

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <Error_Handler+0x8>

08001090 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001096:	f000 fa27 	bl	80014e8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800109a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800109e:	2201      	movs	r2, #1
 80010a0:	2178      	movs	r1, #120	@ 0x78
 80010a2:	485b      	ldr	r0, [pc, #364]	@ (8001210 <SSD1306_Init+0x180>)
 80010a4:	f001 f9b6 	bl	8002414 <HAL_I2C_IsDeviceReady>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e0a9      	b.n	8001206 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80010b2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80010b6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010b8:	e002      	b.n	80010c0 <SSD1306_Init+0x30>
		p--;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3b01      	subs	r3, #1
 80010be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f9      	bne.n	80010ba <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80010c6:	22ae      	movs	r2, #174	@ 0xae
 80010c8:	2100      	movs	r1, #0
 80010ca:	2078      	movs	r0, #120	@ 0x78
 80010cc:	f000 fa88 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80010d0:	2220      	movs	r2, #32
 80010d2:	2100      	movs	r1, #0
 80010d4:	2078      	movs	r0, #120	@ 0x78
 80010d6:	f000 fa83 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010da:	2210      	movs	r2, #16
 80010dc:	2100      	movs	r1, #0
 80010de:	2078      	movs	r0, #120	@ 0x78
 80010e0:	f000 fa7e 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010e4:	22b0      	movs	r2, #176	@ 0xb0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2078      	movs	r0, #120	@ 0x78
 80010ea:	f000 fa79 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010ee:	22c8      	movs	r2, #200	@ 0xc8
 80010f0:	2100      	movs	r1, #0
 80010f2:	2078      	movs	r0, #120	@ 0x78
 80010f4:	f000 fa74 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2078      	movs	r0, #120	@ 0x78
 80010fe:	f000 fa6f 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001102:	2210      	movs	r2, #16
 8001104:	2100      	movs	r1, #0
 8001106:	2078      	movs	r0, #120	@ 0x78
 8001108:	f000 fa6a 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800110c:	2240      	movs	r2, #64	@ 0x40
 800110e:	2100      	movs	r1, #0
 8001110:	2078      	movs	r0, #120	@ 0x78
 8001112:	f000 fa65 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001116:	2281      	movs	r2, #129	@ 0x81
 8001118:	2100      	movs	r1, #0
 800111a:	2078      	movs	r0, #120	@ 0x78
 800111c:	f000 fa60 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001120:	22ff      	movs	r2, #255	@ 0xff
 8001122:	2100      	movs	r1, #0
 8001124:	2078      	movs	r0, #120	@ 0x78
 8001126:	f000 fa5b 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800112a:	22a1      	movs	r2, #161	@ 0xa1
 800112c:	2100      	movs	r1, #0
 800112e:	2078      	movs	r0, #120	@ 0x78
 8001130:	f000 fa56 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001134:	22a6      	movs	r2, #166	@ 0xa6
 8001136:	2100      	movs	r1, #0
 8001138:	2078      	movs	r0, #120	@ 0x78
 800113a:	f000 fa51 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800113e:	22a8      	movs	r2, #168	@ 0xa8
 8001140:	2100      	movs	r1, #0
 8001142:	2078      	movs	r0, #120	@ 0x78
 8001144:	f000 fa4c 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001148:	223f      	movs	r2, #63	@ 0x3f
 800114a:	2100      	movs	r1, #0
 800114c:	2078      	movs	r0, #120	@ 0x78
 800114e:	f000 fa47 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001152:	22a4      	movs	r2, #164	@ 0xa4
 8001154:	2100      	movs	r1, #0
 8001156:	2078      	movs	r0, #120	@ 0x78
 8001158:	f000 fa42 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800115c:	22d3      	movs	r2, #211	@ 0xd3
 800115e:	2100      	movs	r1, #0
 8001160:	2078      	movs	r0, #120	@ 0x78
 8001162:	f000 fa3d 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2078      	movs	r0, #120	@ 0x78
 800116c:	f000 fa38 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001170:	22d5      	movs	r2, #213	@ 0xd5
 8001172:	2100      	movs	r1, #0
 8001174:	2078      	movs	r0, #120	@ 0x78
 8001176:	f000 fa33 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800117a:	22f0      	movs	r2, #240	@ 0xf0
 800117c:	2100      	movs	r1, #0
 800117e:	2078      	movs	r0, #120	@ 0x78
 8001180:	f000 fa2e 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001184:	22d9      	movs	r2, #217	@ 0xd9
 8001186:	2100      	movs	r1, #0
 8001188:	2078      	movs	r0, #120	@ 0x78
 800118a:	f000 fa29 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800118e:	2222      	movs	r2, #34	@ 0x22
 8001190:	2100      	movs	r1, #0
 8001192:	2078      	movs	r0, #120	@ 0x78
 8001194:	f000 fa24 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001198:	22da      	movs	r2, #218	@ 0xda
 800119a:	2100      	movs	r1, #0
 800119c:	2078      	movs	r0, #120	@ 0x78
 800119e:	f000 fa1f 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80011a2:	2212      	movs	r2, #18
 80011a4:	2100      	movs	r1, #0
 80011a6:	2078      	movs	r0, #120	@ 0x78
 80011a8:	f000 fa1a 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80011ac:	22db      	movs	r2, #219	@ 0xdb
 80011ae:	2100      	movs	r1, #0
 80011b0:	2078      	movs	r0, #120	@ 0x78
 80011b2:	f000 fa15 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80011b6:	2220      	movs	r2, #32
 80011b8:	2100      	movs	r1, #0
 80011ba:	2078      	movs	r0, #120	@ 0x78
 80011bc:	f000 fa10 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80011c0:	228d      	movs	r2, #141	@ 0x8d
 80011c2:	2100      	movs	r1, #0
 80011c4:	2078      	movs	r0, #120	@ 0x78
 80011c6:	f000 fa0b 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80011ca:	2214      	movs	r2, #20
 80011cc:	2100      	movs	r1, #0
 80011ce:	2078      	movs	r0, #120	@ 0x78
 80011d0:	f000 fa06 	bl	80015e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011d4:	22af      	movs	r2, #175	@ 0xaf
 80011d6:	2100      	movs	r1, #0
 80011d8:	2078      	movs	r0, #120	@ 0x78
 80011da:	f000 fa01 	bl	80015e0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011de:	222e      	movs	r2, #46	@ 0x2e
 80011e0:	2100      	movs	r1, #0
 80011e2:	2078      	movs	r0, #120	@ 0x78
 80011e4:	f000 f9fc 	bl	80015e0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011e8:	2000      	movs	r0, #0
 80011ea:	f000 f843 	bl	8001274 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80011ee:	f000 f813 	bl	8001218 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <SSD1306_Init+0x184>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <SSD1306_Init+0x184>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011fe:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <SSD1306_Init+0x184>)
 8001200:	2201      	movs	r2, #1
 8001202:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001204:	2301      	movs	r3, #1
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000090 	.word	0x20000090
 8001214:	2000055c 	.word	0x2000055c

08001218 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800121e:	2300      	movs	r3, #0
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	e01d      	b.n	8001260 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	3b50      	subs	r3, #80	@ 0x50
 8001228:	b2db      	uxtb	r3, r3
 800122a:	461a      	mov	r2, r3
 800122c:	2100      	movs	r1, #0
 800122e:	2078      	movs	r0, #120	@ 0x78
 8001230:	f000 f9d6 	bl	80015e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	2078      	movs	r0, #120	@ 0x78
 800123a:	f000 f9d1 	bl	80015e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800123e:	2210      	movs	r2, #16
 8001240:	2100      	movs	r1, #0
 8001242:	2078      	movs	r0, #120	@ 0x78
 8001244:	f000 f9cc 	bl	80015e0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	01db      	lsls	r3, r3, #7
 800124c:	4a08      	ldr	r2, [pc, #32]	@ (8001270 <SSD1306_UpdateScreen+0x58>)
 800124e:	441a      	add	r2, r3
 8001250:	2380      	movs	r3, #128	@ 0x80
 8001252:	2140      	movs	r1, #64	@ 0x40
 8001254:	2078      	movs	r0, #120	@ 0x78
 8001256:	f000 f95d 	bl	8001514 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	3301      	adds	r3, #1
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b07      	cmp	r3, #7
 8001264:	d9de      	bls.n	8001224 <SSD1306_UpdateScreen+0xc>
	}
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2000015c 	.word	0x2000015c

08001274 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <SSD1306_Fill+0x14>
 8001284:	2300      	movs	r3, #0
 8001286:	e000      	b.n	800128a <SSD1306_Fill+0x16>
 8001288:	23ff      	movs	r3, #255	@ 0xff
 800128a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800128e:	4619      	mov	r1, r3
 8001290:	4803      	ldr	r0, [pc, #12]	@ (80012a0 <SSD1306_Fill+0x2c>)
 8001292:	f005 fdb1 	bl	8006df8 <memset>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000015c 	.word	0x2000015c

080012a4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	80fb      	strh	r3, [r7, #6]
 80012ae:	460b      	mov	r3, r1
 80012b0:	80bb      	strh	r3, [r7, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	70fb      	strb	r3, [r7, #3]
	if (
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80012ba:	d848      	bhi.n	800134e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	2b3f      	cmp	r3, #63	@ 0x3f
 80012c0:	d845      	bhi.n	800134e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80012c2:	4b26      	ldr	r3, [pc, #152]	@ (800135c <SSD1306_DrawPixel+0xb8>)
 80012c4:	791b      	ldrb	r3, [r3, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d11a      	bne.n	8001314 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012de:	88fa      	ldrh	r2, [r7, #6]
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	08db      	lsrs	r3, r3, #3
 80012e4:	b298      	uxth	r0, r3
 80012e6:	4603      	mov	r3, r0
 80012e8:	01db      	lsls	r3, r3, #7
 80012ea:	4413      	add	r3, r2
 80012ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001360 <SSD1306_DrawPixel+0xbc>)
 80012ee:	5cd3      	ldrb	r3, [r2, r3]
 80012f0:	b25a      	sxtb	r2, r3
 80012f2:	88bb      	ldrh	r3, [r7, #4]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	2101      	movs	r1, #1
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	b259      	sxtb	r1, r3
 8001304:	88fa      	ldrh	r2, [r7, #6]
 8001306:	4603      	mov	r3, r0
 8001308:	01db      	lsls	r3, r3, #7
 800130a:	4413      	add	r3, r2
 800130c:	b2c9      	uxtb	r1, r1
 800130e:	4a14      	ldr	r2, [pc, #80]	@ (8001360 <SSD1306_DrawPixel+0xbc>)
 8001310:	54d1      	strb	r1, [r2, r3]
 8001312:	e01d      	b.n	8001350 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001314:	88fa      	ldrh	r2, [r7, #6]
 8001316:	88bb      	ldrh	r3, [r7, #4]
 8001318:	08db      	lsrs	r3, r3, #3
 800131a:	b298      	uxth	r0, r3
 800131c:	4603      	mov	r3, r0
 800131e:	01db      	lsls	r3, r3, #7
 8001320:	4413      	add	r3, r2
 8001322:	4a0f      	ldr	r2, [pc, #60]	@ (8001360 <SSD1306_DrawPixel+0xbc>)
 8001324:	5cd3      	ldrb	r3, [r2, r3]
 8001326:	b25a      	sxtb	r2, r3
 8001328:	88bb      	ldrh	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	2101      	movs	r1, #1
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	b25b      	sxtb	r3, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	b25b      	sxtb	r3, r3
 800133a:	4013      	ands	r3, r2
 800133c:	b259      	sxtb	r1, r3
 800133e:	88fa      	ldrh	r2, [r7, #6]
 8001340:	4603      	mov	r3, r0
 8001342:	01db      	lsls	r3, r3, #7
 8001344:	4413      	add	r3, r2
 8001346:	b2c9      	uxtb	r1, r1
 8001348:	4a05      	ldr	r2, [pc, #20]	@ (8001360 <SSD1306_DrawPixel+0xbc>)
 800134a:	54d1      	strb	r1, [r2, r3]
 800134c:	e000      	b.n	8001350 <SSD1306_DrawPixel+0xac>
		return;
 800134e:	bf00      	nop
	}
}
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000055c 	.word	0x2000055c
 8001360:	2000015c 	.word	0x2000015c

08001364 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	460a      	mov	r2, r1
 800136e:	80fb      	strh	r3, [r7, #6]
 8001370:	4613      	mov	r3, r2
 8001372:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001374:	4a05      	ldr	r2, [pc, #20]	@ (800138c <SSD1306_GotoXY+0x28>)
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800137a:	4a04      	ldr	r2, [pc, #16]	@ (800138c <SSD1306_GotoXY+0x28>)
 800137c:	88bb      	ldrh	r3, [r7, #4]
 800137e:	8053      	strh	r3, [r2, #2]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	2000055c 	.word	0x2000055c

08001390 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	4613      	mov	r3, r2
 800139e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013a0:	4b39      	ldr	r3, [pc, #228]	@ (8001488 <SSD1306_Putc+0xf8>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
	if (
 80013ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80013ae:	dc07      	bgt.n	80013c0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80013b0:	4b35      	ldr	r3, [pc, #212]	@ (8001488 <SSD1306_Putc+0xf8>)
 80013b2:	885b      	ldrh	r3, [r3, #2]
 80013b4:	461a      	mov	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	785b      	ldrb	r3, [r3, #1]
 80013ba:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80013be:	dd01      	ble.n	80013c4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e05d      	b.n	8001480 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e04b      	b.n	8001462 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	3b20      	subs	r3, #32
 80013d2:	6839      	ldr	r1, [r7, #0]
 80013d4:	7849      	ldrb	r1, [r1, #1]
 80013d6:	fb01 f303 	mul.w	r3, r1, r3
 80013da:	4619      	mov	r1, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	440b      	add	r3, r1
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	e030      	b.n	8001450 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d010      	beq.n	8001420 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013fe:	4b22      	ldr	r3, [pc, #136]	@ (8001488 <SSD1306_Putc+0xf8>)
 8001400:	881a      	ldrh	r2, [r3, #0]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	b29b      	uxth	r3, r3
 8001406:	4413      	add	r3, r2
 8001408:	b298      	uxth	r0, r3
 800140a:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <SSD1306_Putc+0xf8>)
 800140c:	885a      	ldrh	r2, [r3, #2]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4413      	add	r3, r2
 8001414:	b29b      	uxth	r3, r3
 8001416:	79ba      	ldrb	r2, [r7, #6]
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff ff43 	bl	80012a4 <SSD1306_DrawPixel>
 800141e:	e014      	b.n	800144a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <SSD1306_Putc+0xf8>)
 8001422:	881a      	ldrh	r2, [r3, #0]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	b29b      	uxth	r3, r3
 8001428:	4413      	add	r3, r2
 800142a:	b298      	uxth	r0, r3
 800142c:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <SSD1306_Putc+0xf8>)
 800142e:	885a      	ldrh	r2, [r3, #2]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	b29b      	uxth	r3, r3
 8001434:	4413      	add	r3, r2
 8001436:	b299      	uxth	r1, r3
 8001438:	79bb      	ldrb	r3, [r7, #6]
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf0c      	ite	eq
 800143e:	2301      	moveq	r3, #1
 8001440:	2300      	movne	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	f7ff ff2d 	bl	80012a4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	3301      	adds	r3, #1
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4293      	cmp	r3, r2
 800145a:	d3c8      	bcc.n	80013ee <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	3301      	adds	r3, #1
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	785b      	ldrb	r3, [r3, #1]
 8001466:	461a      	mov	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	4293      	cmp	r3, r2
 800146c:	d3ad      	bcc.n	80013ca <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <SSD1306_Putc+0xf8>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	4413      	add	r3, r2
 8001478:	b29a      	uxth	r2, r3
 800147a:	4b03      	ldr	r3, [pc, #12]	@ (8001488 <SSD1306_Putc+0xf8>)
 800147c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800147e:	79fb      	ldrb	r3, [r7, #7]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2000055c 	.word	0x2000055c

0800148c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	4613      	mov	r3, r2
 8001498:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800149a:	e012      	b.n	80014c2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	79fa      	ldrb	r2, [r7, #7]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff73 	bl	8001390 <SSD1306_Putc>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d002      	beq.n	80014bc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	e008      	b.n	80014ce <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3301      	adds	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1e8      	bne.n	800149c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	781b      	ldrb	r3, [r3, #0]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff feca 	bl	8001274 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80014e0:	f7ff fe9a 	bl	8001218 <SSD1306_UpdateScreen>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80014ee:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <ssd1306_I2C_Init+0x28>)
 80014f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014f2:	e002      	b.n	80014fa <ssd1306_I2C_Init+0x12>
		p--;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f9      	bne.n	80014f4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	0003d090 	.word	0x0003d090

08001514 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b0c7      	sub	sp, #284	@ 0x11c
 8001518:	af02      	add	r7, sp, #8
 800151a:	4604      	mov	r4, r0
 800151c:	4608      	mov	r0, r1
 800151e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001522:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001526:	600a      	str	r2, [r1, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800152e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001532:	4622      	mov	r2, r4
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800153a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800153e:	4602      	mov	r2, r0
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001546:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800154a:	460a      	mov	r2, r1
 800154c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800154e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001552:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001556:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800155a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800155e:	7812      	ldrb	r2, [r2, #0]
 8001560:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001562:	2300      	movs	r3, #0
 8001564:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001568:	e015      	b.n	8001596 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800156a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800156e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001572:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	441a      	add	r2, r3
 800157a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800157e:	3301      	adds	r3, #1
 8001580:	7811      	ldrb	r1, [r2, #0]
 8001582:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001586:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800158a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800158c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001590:	3301      	adds	r3, #1
 8001592:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001596:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800159a:	b29b      	uxth	r3, r3
 800159c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015a0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80015a4:	8812      	ldrh	r2, [r2, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d8df      	bhi.n	800156a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80015aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015ae:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b299      	uxth	r1, r3
 80015b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	3301      	adds	r3, #1
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	f107 020c 	add.w	r2, r7, #12
 80015c8:	200a      	movs	r0, #10
 80015ca:	9000      	str	r0, [sp, #0]
 80015cc:	4803      	ldr	r0, [pc, #12]	@ (80015dc <ssd1306_I2C_WriteMulti+0xc8>)
 80015ce:	f000 fe23 	bl	8002218 <HAL_I2C_Master_Transmit>
}
 80015d2:	bf00      	nop
 80015d4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	20000090 	.word	0x20000090

080015e0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
 80015ea:	460b      	mov	r3, r1
 80015ec:	71bb      	strb	r3, [r7, #6]
 80015ee:	4613      	mov	r3, r2
 80015f0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80015f2:	79bb      	ldrb	r3, [r7, #6]
 80015f4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80015f6:	797b      	ldrb	r3, [r7, #5]
 80015f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	b299      	uxth	r1, r3
 80015fe:	f107 020c 	add.w	r2, r7, #12
 8001602:	230a      	movs	r3, #10
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2302      	movs	r3, #2
 8001608:	4803      	ldr	r0, [pc, #12]	@ (8001618 <ssd1306_I2C_Write+0x38>)
 800160a:	f000 fe05 	bl	8002218 <HAL_I2C_Master_Transmit>
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000090 	.word	0x20000090

0800161c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <HAL_MspInit+0x54>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	4a11      	ldr	r2, [pc, #68]	@ (8001670 <HAL_MspInit+0x54>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001630:	6453      	str	r3, [r2, #68]	@ 0x44
 8001632:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <HAL_MspInit+0x54>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <HAL_MspInit+0x54>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <HAL_MspInit+0x54>)
 8001648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800164c:	6413      	str	r3, [r2, #64]	@ 0x40
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <HAL_MspInit+0x54>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	210f      	movs	r1, #15
 800165e:	f06f 0001 	mvn.w	r0, #1
 8001662:	f000 faa5 	bl	8001bb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800

08001674 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a19      	ldr	r2, [pc, #100]	@ (80016f8 <HAL_I2C_MspInit+0x84>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d12c      	bne.n	80016f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <HAL_I2C_MspInit+0x88>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4a17      	ldr	r2, [pc, #92]	@ (80016fc <HAL_I2C_MspInit+0x88>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_I2C_MspInit+0x88>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80016b2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b8:	2312      	movs	r3, #18
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016c4:	2304      	movs	r3, #4
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	480c      	ldr	r0, [pc, #48]	@ (8001700 <HAL_I2C_MspInit+0x8c>)
 80016d0:	f000 fa98 	bl	8001c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <HAL_I2C_MspInit+0x88>)
 80016da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016dc:	4a07      	ldr	r2, [pc, #28]	@ (80016fc <HAL_I2C_MspInit+0x88>)
 80016de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e4:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <HAL_I2C_MspInit+0x88>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	@ 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40005400 	.word	0x40005400
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020400 	.word	0x40020400

08001704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a19      	ldr	r2, [pc, #100]	@ (8001788 <HAL_UART_MspInit+0x84>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12b      	bne.n	800177e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_UART_MspInit+0x88>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	4a17      	ldr	r2, [pc, #92]	@ (800178c <HAL_UART_MspInit+0x88>)
 8001730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001734:	6413      	str	r3, [r2, #64]	@ 0x40
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_UART_MspInit+0x88>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b11      	ldr	r3, [pc, #68]	@ (800178c <HAL_UART_MspInit+0x88>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a10      	ldr	r2, [pc, #64]	@ (800178c <HAL_UART_MspInit+0x88>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_UART_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800175e:	230c      	movs	r3, #12
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800176e:	2307      	movs	r3, #7
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	@ (8001790 <HAL_UART_MspInit+0x8c>)
 800177a:	f000 fa43 	bl	8001c04 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40004400 	.word	0x40004400
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000

08001794 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08e      	sub	sp, #56	@ 0x38
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4b33      	ldr	r3, [pc, #204]	@ (8001878 <HAL_InitTick+0xe4>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	4a32      	ldr	r2, [pc, #200]	@ (8001878 <HAL_InitTick+0xe4>)
 80017ae:	f043 0310 	orr.w	r3, r3, #16
 80017b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b4:	4b30      	ldr	r3, [pc, #192]	@ (8001878 <HAL_InitTick+0xe4>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017c0:	f107 0210 	add.w	r2, r7, #16
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4611      	mov	r1, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f001 fac6 	bl	8002d5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017da:	f001 fa97 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 80017de:	6378      	str	r0, [r7, #52]	@ 0x34
 80017e0:	e004      	b.n	80017ec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017e2:	f001 fa93 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 80017e6:	4603      	mov	r3, r0
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ee:	4a23      	ldr	r2, [pc, #140]	@ (800187c <HAL_InitTick+0xe8>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	0c9b      	lsrs	r3, r3, #18
 80017f6:	3b01      	subs	r3, #1
 80017f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017fa:	4b21      	ldr	r3, [pc, #132]	@ (8001880 <HAL_InitTick+0xec>)
 80017fc:	4a21      	ldr	r2, [pc, #132]	@ (8001884 <HAL_InitTick+0xf0>)
 80017fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001800:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <HAL_InitTick+0xec>)
 8001802:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001806:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001808:	4a1d      	ldr	r2, [pc, #116]	@ (8001880 <HAL_InitTick+0xec>)
 800180a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800180e:	4b1c      	ldr	r3, [pc, #112]	@ (8001880 <HAL_InitTick+0xec>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b1a      	ldr	r3, [pc, #104]	@ (8001880 <HAL_InitTick+0xec>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181a:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <HAL_InitTick+0xec>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001820:	4817      	ldr	r0, [pc, #92]	@ (8001880 <HAL_InitTick+0xec>)
 8001822:	f001 ff9b 	bl	800375c <HAL_TIM_Base_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800182c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001830:	2b00      	cmp	r3, #0
 8001832:	d11b      	bne.n	800186c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001834:	4812      	ldr	r0, [pc, #72]	@ (8001880 <HAL_InitTick+0xec>)
 8001836:	f001 ffeb 	bl	8003810 <HAL_TIM_Base_Start_IT>
 800183a:	4603      	mov	r3, r0
 800183c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001840:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001844:	2b00      	cmp	r3, #0
 8001846:	d111      	bne.n	800186c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001848:	2036      	movs	r0, #54	@ 0x36
 800184a:	f000 f9cd 	bl	8001be8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b0f      	cmp	r3, #15
 8001852:	d808      	bhi.n	8001866 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001854:	2200      	movs	r2, #0
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	2036      	movs	r0, #54	@ 0x36
 800185a:	f000 f9a9 	bl	8001bb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <HAL_InitTick+0xf4>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e002      	b.n	800186c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800186c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001870:	4618      	mov	r0, r3
 8001872:	3738      	adds	r7, #56	@ 0x38
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800
 800187c:	431bde83 	.word	0x431bde83
 8001880:	20000564 	.word	0x20000564
 8001884:	40001000 	.word	0x40001000
 8001888:	20000014 	.word	0x20000014

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <NMI_Handler+0x4>

08001894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <HardFault_Handler+0x4>

0800189c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <MemManage_Handler+0x4>

080018a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <BusFault_Handler+0x4>

080018ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <UsageFault_Handler+0x4>

080018b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018c8:	4802      	ldr	r0, [pc, #8]	@ (80018d4 <TIM6_DAC_IRQHandler+0x10>)
 80018ca:	f002 f811 	bl	80038f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000564 	.word	0x20000564

080018d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e0:	4a14      	ldr	r2, [pc, #80]	@ (8001934 <_sbrk+0x5c>)
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <_sbrk+0x60>)
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ec:	4b13      	ldr	r3, [pc, #76]	@ (800193c <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <_sbrk+0x64>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <_sbrk+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	429a      	cmp	r2, r3
 8001906:	d207      	bcs.n	8001918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001908:	f005 fa92 	bl	8006e30 <__errno>
 800190c:	4603      	mov	r3, r0
 800190e:	220c      	movs	r2, #12
 8001910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	e009      	b.n	800192c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001918:	4b08      	ldr	r3, [pc, #32]	@ (800193c <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191e:	4b07      	ldr	r3, [pc, #28]	@ (800193c <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <_sbrk+0x64>)
 8001928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20020000 	.word	0x20020000
 8001938:	00000400 	.word	0x00000400
 800193c:	200005ac 	.word	0x200005ac
 8001940:	20005050 	.word	0x20005050

08001944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <SystemInit+0x20>)
 800194a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194e:	4a05      	ldr	r2, [pc, #20]	@ (8001964 <SystemInit+0x20>)
 8001950:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001954:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800196c:	f7ff ffea 	bl	8001944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001970:	480c      	ldr	r0, [pc, #48]	@ (80019a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001972:	490d      	ldr	r1, [pc, #52]	@ (80019a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001974:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001988:	4c0a      	ldr	r4, [pc, #40]	@ (80019b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001996:	f005 fa51 	bl	8006e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199a:	f7fe ffd1 	bl	8000940 <main>
  bx  lr    
 800199e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019ac:	080085f8 	.word	0x080085f8
  ldr r2, =_sbss
 80019b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019b4:	2000504c 	.word	0x2000504c

080019b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC_IRQHandler>
	...

080019bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019c0:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <HAL_Init+0x40>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0d      	ldr	r2, [pc, #52]	@ (80019fc <HAL_Init+0x40>)
 80019c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <HAL_Init+0x40>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <HAL_Init+0x40>)
 80019d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a07      	ldr	r2, [pc, #28]	@ (80019fc <HAL_Init+0x40>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f000 f8d8 	bl	8001b9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fed2 	bl	8001794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f0:	f7ff fe14 	bl	800161c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023c00 	.word	0x40023c00

08001a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_IncTick+0x20>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_IncTick+0x24>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <HAL_IncTick+0x24>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000018 	.word	0x20000018
 8001a24:	200005b0 	.word	0x200005b0

08001a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <HAL_GetTick+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	200005b0 	.word	0x200005b0

08001a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a72:	4a04      	ldr	r2, [pc, #16]	@ (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60d3      	str	r3, [r2, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0307 	and.w	r3, r3, #7
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	db0b      	blt.n	8001ace <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	f003 021f 	and.w	r2, r3, #31
 8001abc:	4907      	ldr	r1, [pc, #28]	@ (8001adc <__NVIC_EnableIRQ+0x38>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000e100 	.word	0xe000e100

08001ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db0a      	blt.n	8001b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	490c      	ldr	r1, [pc, #48]	@ (8001b2c <__NVIC_SetPriority+0x4c>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	440b      	add	r3, r1
 8001b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b08:	e00a      	b.n	8001b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4908      	ldr	r1, [pc, #32]	@ (8001b30 <__NVIC_SetPriority+0x50>)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	3b04      	subs	r3, #4
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	761a      	strb	r2, [r3, #24]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f1c3 0307 	rsb	r3, r3, #7
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	bf28      	it	cs
 8001b52:	2304      	movcs	r3, #4
 8001b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d902      	bls.n	8001b64 <NVIC_EncodePriority+0x30>
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3b03      	subs	r3, #3
 8001b62:	e000      	b.n	8001b66 <NVIC_EncodePriority+0x32>
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	401a      	ands	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43d9      	mvns	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	4313      	orrs	r3, r2
         );
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3724      	adds	r7, #36	@ 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ff4c 	bl	8001a40 <__NVIC_SetPriorityGrouping>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc2:	f7ff ff61 	bl	8001a88 <__NVIC_GetPriorityGrouping>
 8001bc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	68b9      	ldr	r1, [r7, #8]
 8001bcc:	6978      	ldr	r0, [r7, #20]
 8001bce:	f7ff ffb1 	bl	8001b34 <NVIC_EncodePriority>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd8:	4611      	mov	r1, r2
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff80 	bl	8001ae0 <__NVIC_SetPriority>
}
 8001be0:	bf00      	nop
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff54 	bl	8001aa4 <__NVIC_EnableIRQ>
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	@ 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	e165      	b.n	8001eec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c20:	2201      	movs	r2, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	f040 8154 	bne.w	8001ee6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d005      	beq.n	8001c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d130      	bne.n	8001cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	2203      	movs	r2, #3
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 0201 	and.w	r2, r3, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d017      	beq.n	8001cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d123      	bne.n	8001d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	08da      	lsrs	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3208      	adds	r2, #8
 8001d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	220f      	movs	r2, #15
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	08da      	lsrs	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3208      	adds	r2, #8
 8001d42:	69b9      	ldr	r1, [r7, #24]
 8001d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0203 	and.w	r2, r3, #3
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80ae 	beq.w	8001ee6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f04 <HAL_GPIO_Init+0x300>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	4a5c      	ldr	r2, [pc, #368]	@ (8001f04 <HAL_GPIO_Init+0x300>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001f04 <HAL_GPIO_Init+0x300>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da6:	4a58      	ldr	r2, [pc, #352]	@ (8001f08 <HAL_GPIO_Init+0x304>)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4f      	ldr	r2, [pc, #316]	@ (8001f0c <HAL_GPIO_Init+0x308>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d025      	beq.n	8001e1e <HAL_GPIO_Init+0x21a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f10 <HAL_GPIO_Init+0x30c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d01f      	beq.n	8001e1a <HAL_GPIO_Init+0x216>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4d      	ldr	r2, [pc, #308]	@ (8001f14 <HAL_GPIO_Init+0x310>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d019      	beq.n	8001e16 <HAL_GPIO_Init+0x212>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4c      	ldr	r2, [pc, #304]	@ (8001f18 <HAL_GPIO_Init+0x314>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0x20e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4b      	ldr	r2, [pc, #300]	@ (8001f1c <HAL_GPIO_Init+0x318>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00d      	beq.n	8001e0e <HAL_GPIO_Init+0x20a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4a      	ldr	r2, [pc, #296]	@ (8001f20 <HAL_GPIO_Init+0x31c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <HAL_GPIO_Init+0x206>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a49      	ldr	r2, [pc, #292]	@ (8001f24 <HAL_GPIO_Init+0x320>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_GPIO_Init+0x202>
 8001e02:	2306      	movs	r3, #6
 8001e04:	e00c      	b.n	8001e20 <HAL_GPIO_Init+0x21c>
 8001e06:	2307      	movs	r3, #7
 8001e08:	e00a      	b.n	8001e20 <HAL_GPIO_Init+0x21c>
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	e008      	b.n	8001e20 <HAL_GPIO_Init+0x21c>
 8001e0e:	2304      	movs	r3, #4
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x21c>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e004      	b.n	8001e20 <HAL_GPIO_Init+0x21c>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_Init+0x21c>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x21c>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f002 0203 	and.w	r2, r2, #3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e30:	4935      	ldr	r1, [pc, #212]	@ (8001f08 <HAL_GPIO_Init+0x304>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f28 <HAL_GPIO_Init+0x324>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e62:	4a31      	ldr	r2, [pc, #196]	@ (8001f28 <HAL_GPIO_Init+0x324>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e68:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <HAL_GPIO_Init+0x324>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e8c:	4a26      	ldr	r2, [pc, #152]	@ (8001f28 <HAL_GPIO_Init+0x324>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e92:	4b25      	ldr	r3, [pc, #148]	@ (8001f28 <HAL_GPIO_Init+0x324>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f28 <HAL_GPIO_Init+0x324>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <HAL_GPIO_Init+0x324>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee0:	4a11      	ldr	r2, [pc, #68]	@ (8001f28 <HAL_GPIO_Init+0x324>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f ae96 	bls.w	8001c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3724      	adds	r7, #36	@ 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40021400 	.word	0x40021400
 8001f24:	40021800 	.word	0x40021800
 8001f28:	40013c00 	.word	0x40013c00

08001f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e001      	b.n	8001f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f78:	e003      	b.n	8001f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	041a      	lsls	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	619a      	str	r2, [r3, #24]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e12b      	b.n	80021fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff fb5c 	bl	8001674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2224      	movs	r2, #36	@ 0x24
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ff4:	f000 fe8a 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8001ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a81      	ldr	r2, [pc, #516]	@ (8002204 <HAL_I2C_Init+0x274>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d807      	bhi.n	8002014 <HAL_I2C_Init+0x84>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4a80      	ldr	r2, [pc, #512]	@ (8002208 <HAL_I2C_Init+0x278>)
 8002008:	4293      	cmp	r3, r2
 800200a:	bf94      	ite	ls
 800200c:	2301      	movls	r3, #1
 800200e:	2300      	movhi	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	e006      	b.n	8002022 <HAL_I2C_Init+0x92>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4a7d      	ldr	r2, [pc, #500]	@ (800220c <HAL_I2C_Init+0x27c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	bf94      	ite	ls
 800201c:	2301      	movls	r3, #1
 800201e:	2300      	movhi	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0e7      	b.n	80021fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4a78      	ldr	r2, [pc, #480]	@ (8002210 <HAL_I2C_Init+0x280>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0c9b      	lsrs	r3, r3, #18
 8002034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	430a      	orrs	r2, r1
 8002048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a6a      	ldr	r2, [pc, #424]	@ (8002204 <HAL_I2C_Init+0x274>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d802      	bhi.n	8002064 <HAL_I2C_Init+0xd4>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	3301      	adds	r3, #1
 8002062:	e009      	b.n	8002078 <HAL_I2C_Init+0xe8>
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	4a69      	ldr	r2, [pc, #420]	@ (8002214 <HAL_I2C_Init+0x284>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	099b      	lsrs	r3, r3, #6
 8002076:	3301      	adds	r3, #1
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	430b      	orrs	r3, r1
 800207e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800208a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	495c      	ldr	r1, [pc, #368]	@ (8002204 <HAL_I2C_Init+0x274>)
 8002094:	428b      	cmp	r3, r1
 8002096:	d819      	bhi.n	80020cc <HAL_I2C_Init+0x13c>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1e59      	subs	r1, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a6:	1c59      	adds	r1, r3, #1
 80020a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020ac:	400b      	ands	r3, r1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_I2C_Init+0x138>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1e59      	subs	r1, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c6:	e051      	b.n	800216c <HAL_I2C_Init+0x1dc>
 80020c8:	2304      	movs	r3, #4
 80020ca:	e04f      	b.n	800216c <HAL_I2C_Init+0x1dc>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d111      	bne.n	80020f8 <HAL_I2C_Init+0x168>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1e58      	subs	r0, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6859      	ldr	r1, [r3, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	440b      	add	r3, r1
 80020e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	e012      	b.n	800211e <HAL_I2C_Init+0x18e>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1e58      	subs	r0, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	0099      	lsls	r1, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	fbb0 f3f3 	udiv	r3, r0, r3
 800210e:	3301      	adds	r3, #1
 8002110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Init+0x196>
 8002122:	2301      	movs	r3, #1
 8002124:	e022      	b.n	800216c <HAL_I2C_Init+0x1dc>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10e      	bne.n	800214c <HAL_I2C_Init+0x1bc>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1e58      	subs	r0, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	440b      	add	r3, r1
 800213c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002140:	3301      	adds	r3, #1
 8002142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800214a:	e00f      	b.n	800216c <HAL_I2C_Init+0x1dc>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1e58      	subs	r0, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	0099      	lsls	r1, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002162:	3301      	adds	r3, #1
 8002164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002168:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	6809      	ldr	r1, [r1, #0]
 8002170:	4313      	orrs	r3, r2
 8002172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800219a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6911      	ldr	r1, [r2, #16]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68d2      	ldr	r2, [r2, #12]
 80021a6:	4311      	orrs	r1, r2
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	430b      	orrs	r3, r1
 80021ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	000186a0 	.word	0x000186a0
 8002208:	001e847f 	.word	0x001e847f
 800220c:	003d08ff 	.word	0x003d08ff
 8002210:	431bde83 	.word	0x431bde83
 8002214:	10624dd3 	.word	0x10624dd3

08002218 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af02      	add	r7, sp, #8
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	607a      	str	r2, [r7, #4]
 8002222:	461a      	mov	r2, r3
 8002224:	460b      	mov	r3, r1
 8002226:	817b      	strh	r3, [r7, #10]
 8002228:	4613      	mov	r3, r2
 800222a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff fbfc 	bl	8001a28 <HAL_GetTick>
 8002230:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b20      	cmp	r3, #32
 800223c:	f040 80e0 	bne.w	8002400 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2319      	movs	r3, #25
 8002246:	2201      	movs	r2, #1
 8002248:	4970      	ldr	r1, [pc, #448]	@ (800240c <HAL_I2C_Master_Transmit+0x1f4>)
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fa92 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002256:	2302      	movs	r3, #2
 8002258:	e0d3      	b.n	8002402 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_I2C_Master_Transmit+0x50>
 8002264:	2302      	movs	r3, #2
 8002266:	e0cc      	b.n	8002402 <HAL_I2C_Master_Transmit+0x1ea>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d007      	beq.n	800228e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0201 	orr.w	r2, r2, #1
 800228c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800229c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2221      	movs	r2, #33	@ 0x21
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2210      	movs	r2, #16
 80022aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	893a      	ldrh	r2, [r7, #8]
 80022be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4a50      	ldr	r2, [pc, #320]	@ (8002410 <HAL_I2C_Master_Transmit+0x1f8>)
 80022ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022d0:	8979      	ldrh	r1, [r7, #10]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	6a3a      	ldr	r2, [r7, #32]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f9ca 	bl	8002670 <I2C_MasterRequestWrite>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e08d      	b.n	8002402 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022fc:	e066      	b.n	80023cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	6a39      	ldr	r1, [r7, #32]
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fb50 	bl	80029a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00d      	beq.n	800232a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	2b04      	cmp	r3, #4
 8002314:	d107      	bne.n	8002326 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002324:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e06b      	b.n	8002402 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b04      	cmp	r3, #4
 8002366:	d11b      	bne.n	80023a0 <HAL_I2C_Master_Transmit+0x188>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236c:	2b00      	cmp	r3, #0
 800236e:	d017      	beq.n	80023a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238a:	b29b      	uxth	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	6a39      	ldr	r1, [r7, #32]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fb47 	bl	8002a38 <I2C_WaitOnBTFFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00d      	beq.n	80023cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d107      	bne.n	80023c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e01a      	b.n	8002402 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d194      	bne.n	80022fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e000      	b.n	8002402 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002400:	2302      	movs	r3, #2
  }
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	00100002 	.word	0x00100002
 8002410:	ffff0000 	.word	0xffff0000

08002414 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	@ 0x28
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	460b      	mov	r3, r1
 8002422:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7ff fb00 	bl	8001a28 <HAL_GetTick>
 8002428:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b20      	cmp	r3, #32
 8002438:	f040 8111 	bne.w	800265e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2319      	movs	r3, #25
 8002442:	2201      	movs	r2, #1
 8002444:	4988      	ldr	r1, [pc, #544]	@ (8002668 <HAL_I2C_IsDeviceReady+0x254>)
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f994 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002452:	2302      	movs	r3, #2
 8002454:	e104      	b.n	8002660 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_I2C_IsDeviceReady+0x50>
 8002460:	2302      	movs	r3, #2
 8002462:	e0fd      	b.n	8002660 <HAL_I2C_IsDeviceReady+0x24c>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d007      	beq.n	800248a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002498:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2224      	movs	r2, #36	@ 0x24
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4a70      	ldr	r2, [pc, #448]	@ (800266c <HAL_I2C_IsDeviceReady+0x258>)
 80024ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f952 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00d      	beq.n	80024f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024e4:	d103      	bne.n	80024ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024ec:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0b6      	b.n	8002660 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024f2:	897b      	ldrh	r3, [r7, #10]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002500:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002502:	f7ff fa91 	bl	8001a28 <HAL_GetTick>
 8002506:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b02      	cmp	r3, #2
 8002514:	bf0c      	ite	eq
 8002516:	2301      	moveq	r3, #1
 8002518:	2300      	movne	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800252c:	bf0c      	ite	eq
 800252e:	2301      	moveq	r3, #1
 8002530:	2300      	movne	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002536:	e025      	b.n	8002584 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002538:	f7ff fa76 	bl	8001a28 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d302      	bcc.n	800254e <HAL_I2C_IsDeviceReady+0x13a>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d103      	bne.n	8002556 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	22a0      	movs	r2, #160	@ 0xa0
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b02      	cmp	r3, #2
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2ba0      	cmp	r3, #160	@ 0xa0
 800258e:	d005      	beq.n	800259c <HAL_I2C_IsDeviceReady+0x188>
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d102      	bne.n	800259c <HAL_I2C_IsDeviceReady+0x188>
 8002596:	7dbb      	ldrb	r3, [r7, #22]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0cd      	beq.n	8002538 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d129      	bne.n	8002606 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2319      	movs	r3, #25
 80025de:	2201      	movs	r2, #1
 80025e0:	4921      	ldr	r1, [pc, #132]	@ (8002668 <HAL_I2C_IsDeviceReady+0x254>)
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f8c6 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e036      	b.n	8002660 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e02c      	b.n	8002660 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002614:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800261e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	2319      	movs	r3, #25
 8002626:	2201      	movs	r2, #1
 8002628:	490f      	ldr	r1, [pc, #60]	@ (8002668 <HAL_I2C_IsDeviceReady+0x254>)
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f8a2 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e012      	b.n	8002660 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	3301      	adds	r3, #1
 800263e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	f4ff af32 	bcc.w	80024ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800265e:	2302      	movs	r3, #2
  }
}
 8002660:	4618      	mov	r0, r3
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	00100002 	.word	0x00100002
 800266c:	ffff0000 	.word	0xffff0000

08002670 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	460b      	mov	r3, r1
 800267e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002684:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d006      	beq.n	800269a <I2C_MasterRequestWrite+0x2a>
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d003      	beq.n	800269a <I2C_MasterRequestWrite+0x2a>
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002698:	d108      	bne.n	80026ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e00b      	b.n	80026c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b0:	2b12      	cmp	r3, #18
 80026b2:	d107      	bne.n	80026c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f84f 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00d      	beq.n	80026f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ea:	d103      	bne.n	80026f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e035      	b.n	8002764 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002700:	d108      	bne.n	8002714 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002702:	897b      	ldrh	r3, [r7, #10]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002710:	611a      	str	r2, [r3, #16]
 8002712:	e01b      	b.n	800274c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002714:	897b      	ldrh	r3, [r7, #10]
 8002716:	11db      	asrs	r3, r3, #7
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f003 0306 	and.w	r3, r3, #6
 800271e:	b2db      	uxtb	r3, r3
 8002720:	f063 030f 	orn	r3, r3, #15
 8002724:	b2da      	uxtb	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	490e      	ldr	r1, [pc, #56]	@ (800276c <I2C_MasterRequestWrite+0xfc>)
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f898 	bl	8002868 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e010      	b.n	8002764 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002742:	897b      	ldrh	r3, [r7, #10]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	4907      	ldr	r1, [pc, #28]	@ (8002770 <I2C_MasterRequestWrite+0x100>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f888 	bl	8002868 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	00010008 	.word	0x00010008
 8002770:	00010002 	.word	0x00010002

08002774 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002784:	e048      	b.n	8002818 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d044      	beq.n	8002818 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278e:	f7ff f94b 	bl	8001a28 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d302      	bcc.n	80027a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d139      	bne.n	8002818 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	0c1b      	lsrs	r3, r3, #16
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d10d      	bne.n	80027ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	43da      	mvns	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4013      	ands	r3, r2
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	e00c      	b.n	80027e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	43da      	mvns	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	4013      	ands	r3, r2
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bf0c      	ite	eq
 80027dc:	2301      	moveq	r3, #1
 80027de:	2300      	movne	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	461a      	mov	r2, r3
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d116      	bne.n	8002818 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	f043 0220 	orr.w	r2, r3, #32
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e023      	b.n	8002860 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	0c1b      	lsrs	r3, r3, #16
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d10d      	bne.n	800283e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	43da      	mvns	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4013      	ands	r3, r2
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	e00c      	b.n	8002858 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	43da      	mvns	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	4013      	ands	r3, r2
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	429a      	cmp	r2, r3
 800285c:	d093      	beq.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002876:	e071      	b.n	800295c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002886:	d123      	bne.n	80028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002896:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028bc:	f043 0204 	orr.w	r2, r3, #4
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e067      	b.n	80029a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d6:	d041      	beq.n	800295c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d8:	f7ff f8a6 	bl	8001a28 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d302      	bcc.n	80028ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d136      	bne.n	800295c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	0c1b      	lsrs	r3, r3, #16
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d10c      	bne.n	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	43da      	mvns	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4013      	ands	r3, r2
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	bf14      	ite	ne
 800290a:	2301      	movne	r3, #1
 800290c:	2300      	moveq	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	e00b      	b.n	800292a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	43da      	mvns	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4013      	ands	r3, r2
 800291e:	b29b      	uxth	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf14      	ite	ne
 8002924:	2301      	movne	r3, #1
 8002926:	2300      	moveq	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d016      	beq.n	800295c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	f043 0220 	orr.w	r2, r3, #32
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e021      	b.n	80029a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	0c1b      	lsrs	r3, r3, #16
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d10c      	bne.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	43da      	mvns	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	4013      	ands	r3, r2
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	e00b      	b.n	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	43da      	mvns	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4013      	ands	r3, r2
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	bf14      	ite	ne
 8002992:	2301      	movne	r3, #1
 8002994:	2300      	moveq	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	f47f af6d 	bne.w	8002878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029b4:	e034      	b.n	8002a20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f886 	bl	8002ac8 <I2C_IsAcknowledgeFailed>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e034      	b.n	8002a30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029cc:	d028      	beq.n	8002a20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ce:	f7ff f82b 	bl	8001a28 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d302      	bcc.n	80029e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d11d      	bne.n	8002a20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ee:	2b80      	cmp	r3, #128	@ 0x80
 80029f0:	d016      	beq.n	8002a20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	f043 0220 	orr.w	r2, r3, #32
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e007      	b.n	8002a30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2a:	2b80      	cmp	r3, #128	@ 0x80
 8002a2c:	d1c3      	bne.n	80029b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a44:	e034      	b.n	8002ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f83e 	bl	8002ac8 <I2C_IsAcknowledgeFailed>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e034      	b.n	8002ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5c:	d028      	beq.n	8002ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5e:	f7fe ffe3 	bl	8001a28 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d302      	bcc.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d11d      	bne.n	8002ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d016      	beq.n	8002ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e007      	b.n	8002ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d1c3      	bne.n	8002a46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ade:	d11b      	bne.n	8002b18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ae8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b04:	f043 0204 	orr.w	r2, r3, #4
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0cc      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b68      	ldr	r3, [pc, #416]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d90c      	bls.n	8002b64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b65      	ldr	r3, [pc, #404]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	4b63      	ldr	r3, [pc, #396]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0b8      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d020      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b7c:	4b59      	ldr	r3, [pc, #356]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4a58      	ldr	r2, [pc, #352]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b94:	4b53      	ldr	r3, [pc, #332]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4a52      	ldr	r2, [pc, #328]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba0:	4b50      	ldr	r3, [pc, #320]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	494d      	ldr	r1, [pc, #308]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d044      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc6:	4b47      	ldr	r3, [pc, #284]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d119      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e07f      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d003      	beq.n	8002be6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e06f      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e067      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c06:	4b37      	ldr	r3, [pc, #220]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f023 0203 	bic.w	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4934      	ldr	r1, [pc, #208]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c18:	f7fe ff06 	bl	8001a28 <HAL_GetTick>
 8002c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c20:	f7fe ff02 	bl	8001a28 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e04f      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 020c 	and.w	r2, r3, #12
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d1eb      	bne.n	8002c20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c48:	4b25      	ldr	r3, [pc, #148]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d20c      	bcs.n	8002c70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b22      	ldr	r3, [pc, #136]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5e:	4b20      	ldr	r3, [pc, #128]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d001      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e032      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c7c:	4b19      	ldr	r3, [pc, #100]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	4916      	ldr	r1, [pc, #88]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d009      	beq.n	8002cae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c9a:	4b12      	ldr	r3, [pc, #72]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	490e      	ldr	r1, [pc, #56]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cae:	f000 f887 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	490a      	ldr	r1, [pc, #40]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc0:	5ccb      	ldrb	r3, [r1, r3]
 8002cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc6:	4a09      	ldr	r2, [pc, #36]	@ (8002cec <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cca:	4b09      	ldr	r3, [pc, #36]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fe fd60 	bl	8001794 <HAL_InitTick>

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40023c00 	.word	0x40023c00
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	0800859c 	.word	0x0800859c
 8002cec:	20000010 	.word	0x20000010
 8002cf0:	20000014 	.word	0x20000014

08002cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf8:	4b03      	ldr	r3, [pc, #12]	@ (8002d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	20000010 	.word	0x20000010

08002d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d10:	f7ff fff0 	bl	8002cf4 <HAL_RCC_GetHCLKFreq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4b05      	ldr	r3, [pc, #20]	@ (8002d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	0a9b      	lsrs	r3, r3, #10
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4903      	ldr	r1, [pc, #12]	@ (8002d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	080085ac 	.word	0x080085ac

08002d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d38:	f7ff ffdc 	bl	8002cf4 <HAL_RCC_GetHCLKFreq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	0b5b      	lsrs	r3, r3, #13
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	4903      	ldr	r1, [pc, #12]	@ (8002d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d4a:	5ccb      	ldrb	r3, [r1, r3]
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40023800 	.word	0x40023800
 8002d58:	080085ac 	.word	0x080085ac

08002d5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	220f      	movs	r2, #15
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d6c:	4b12      	ldr	r3, [pc, #72]	@ (8002db8 <HAL_RCC_GetClockConfig+0x5c>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0203 	and.w	r2, r3, #3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d78:	4b0f      	ldr	r3, [pc, #60]	@ (8002db8 <HAL_RCC_GetClockConfig+0x5c>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d84:	4b0c      	ldr	r3, [pc, #48]	@ (8002db8 <HAL_RCC_GetClockConfig+0x5c>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d90:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <HAL_RCC_GetClockConfig+0x5c>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	08db      	lsrs	r3, r3, #3
 8002d96:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d9e:	4b07      	ldr	r3, [pc, #28]	@ (8002dbc <HAL_RCC_GetClockConfig+0x60>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 020f 	and.w	r2, r3, #15
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	601a      	str	r2, [r3, #0]
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40023c00 	.word	0x40023c00

08002dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc4:	b0ae      	sub	sp, #184	@ 0xb8
 8002dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de6:	4bcb      	ldr	r3, [pc, #812]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x354>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b0c      	cmp	r3, #12
 8002df0:	f200 8206 	bhi.w	8003200 <HAL_RCC_GetSysClockFreq+0x440>
 8002df4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dfc <HAL_RCC_GetSysClockFreq+0x3c>)
 8002df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfa:	bf00      	nop
 8002dfc:	08002e31 	.word	0x08002e31
 8002e00:	08003201 	.word	0x08003201
 8002e04:	08003201 	.word	0x08003201
 8002e08:	08003201 	.word	0x08003201
 8002e0c:	08002e39 	.word	0x08002e39
 8002e10:	08003201 	.word	0x08003201
 8002e14:	08003201 	.word	0x08003201
 8002e18:	08003201 	.word	0x08003201
 8002e1c:	08002e41 	.word	0x08002e41
 8002e20:	08003201 	.word	0x08003201
 8002e24:	08003201 	.word	0x08003201
 8002e28:	08003201 	.word	0x08003201
 8002e2c:	08003031 	.word	0x08003031
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4bb9      	ldr	r3, [pc, #740]	@ (8003118 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e36:	e1e7      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e38:	4bb8      	ldr	r3, [pc, #736]	@ (800311c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e3e:	e1e3      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e40:	4bb4      	ldr	r3, [pc, #720]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e4c:	4bb1      	ldr	r3, [pc, #708]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d071      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e58:	4bae      	ldr	r3, [pc, #696]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e64:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002e7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e7e:	4622      	mov	r2, r4
 8002e80:	462b      	mov	r3, r5
 8002e82:	f04f 0000 	mov.w	r0, #0
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	0159      	lsls	r1, r3, #5
 8002e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e90:	0150      	lsls	r0, r2, #5
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4621      	mov	r1, r4
 8002e98:	1a51      	subs	r1, r2, r1
 8002e9a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ea2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002eb0:	4649      	mov	r1, r9
 8002eb2:	018b      	lsls	r3, r1, #6
 8002eb4:	4641      	mov	r1, r8
 8002eb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eba:	4641      	mov	r1, r8
 8002ebc:	018a      	lsls	r2, r1, #6
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	1a51      	subs	r1, r2, r1
 8002ec2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ed8:	4649      	mov	r1, r9
 8002eda:	00cb      	lsls	r3, r1, #3
 8002edc:	4641      	mov	r1, r8
 8002ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ee2:	4641      	mov	r1, r8
 8002ee4:	00ca      	lsls	r2, r1, #3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	4622      	mov	r2, r4
 8002eee:	189b      	adds	r3, r3, r2
 8002ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ef2:	462b      	mov	r3, r5
 8002ef4:	460a      	mov	r2, r1
 8002ef6:	eb42 0303 	adc.w	r3, r2, r3
 8002efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f08:	4629      	mov	r1, r5
 8002f0a:	024b      	lsls	r3, r1, #9
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f12:	4621      	mov	r1, r4
 8002f14:	024a      	lsls	r2, r1, #9
 8002f16:	4610      	mov	r0, r2
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f28:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002f2c:	f7fd f9d0 	bl	80002d0 <__aeabi_uldivmod>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4613      	mov	r3, r2
 8002f36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f3a:	e067      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3c:	4b75      	ldr	r3, [pc, #468]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	099b      	lsrs	r3, r3, #6
 8002f42:	2200      	movs	r2, #0
 8002f44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f48:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f56:	2300      	movs	r3, #0
 8002f58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f5a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002f5e:	4622      	mov	r2, r4
 8002f60:	462b      	mov	r3, r5
 8002f62:	f04f 0000 	mov.w	r0, #0
 8002f66:	f04f 0100 	mov.w	r1, #0
 8002f6a:	0159      	lsls	r1, r3, #5
 8002f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f70:	0150      	lsls	r0, r2, #5
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4621      	mov	r1, r4
 8002f78:	1a51      	subs	r1, r2, r1
 8002f7a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002f90:	4649      	mov	r1, r9
 8002f92:	018b      	lsls	r3, r1, #6
 8002f94:	4641      	mov	r1, r8
 8002f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f9a:	4641      	mov	r1, r8
 8002f9c:	018a      	lsls	r2, r1, #6
 8002f9e:	4641      	mov	r1, r8
 8002fa0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fb6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fbe:	4692      	mov	sl, r2
 8002fc0:	469b      	mov	fp, r3
 8002fc2:	4623      	mov	r3, r4
 8002fc4:	eb1a 0303 	adds.w	r3, sl, r3
 8002fc8:	623b      	str	r3, [r7, #32]
 8002fca:	462b      	mov	r3, r5
 8002fcc:	eb4b 0303 	adc.w	r3, fp, r3
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002fde:	4629      	mov	r1, r5
 8002fe0:	028b      	lsls	r3, r1, #10
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fe8:	4621      	mov	r1, r4
 8002fea:	028a      	lsls	r2, r1, #10
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ff8:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ffa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002ffe:	f7fd f967 	bl	80002d0 <__aeabi_uldivmod>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4613      	mov	r3, r2
 8003008:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800300c:	4b41      	ldr	r3, [pc, #260]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x354>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	0c1b      	lsrs	r3, r3, #16
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	3301      	adds	r3, #1
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800301e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003026:	fbb2 f3f3 	udiv	r3, r2, r3
 800302a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800302e:	e0eb      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003030:	4b38      	ldr	r3, [pc, #224]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x354>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003038:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800303c:	4b35      	ldr	r3, [pc, #212]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x354>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d06b      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003048:	4b32      	ldr	r3, [pc, #200]	@ (8003114 <HAL_RCC_GetSysClockFreq+0x354>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	099b      	lsrs	r3, r3, #6
 800304e:	2200      	movs	r2, #0
 8003050:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003052:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003054:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305a:	663b      	str	r3, [r7, #96]	@ 0x60
 800305c:	2300      	movs	r3, #0
 800305e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003060:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003064:	4622      	mov	r2, r4
 8003066:	462b      	mov	r3, r5
 8003068:	f04f 0000 	mov.w	r0, #0
 800306c:	f04f 0100 	mov.w	r1, #0
 8003070:	0159      	lsls	r1, r3, #5
 8003072:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003076:	0150      	lsls	r0, r2, #5
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4621      	mov	r1, r4
 800307e:	1a51      	subs	r1, r2, r1
 8003080:	61b9      	str	r1, [r7, #24]
 8003082:	4629      	mov	r1, r5
 8003084:	eb63 0301 	sbc.w	r3, r3, r1
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003096:	4659      	mov	r1, fp
 8003098:	018b      	lsls	r3, r1, #6
 800309a:	4651      	mov	r1, sl
 800309c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030a0:	4651      	mov	r1, sl
 80030a2:	018a      	lsls	r2, r1, #6
 80030a4:	4651      	mov	r1, sl
 80030a6:	ebb2 0801 	subs.w	r8, r2, r1
 80030aa:	4659      	mov	r1, fp
 80030ac:	eb63 0901 	sbc.w	r9, r3, r1
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030c4:	4690      	mov	r8, r2
 80030c6:	4699      	mov	r9, r3
 80030c8:	4623      	mov	r3, r4
 80030ca:	eb18 0303 	adds.w	r3, r8, r3
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	462b      	mov	r3, r5
 80030d2:	eb49 0303 	adc.w	r3, r9, r3
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80030e4:	4629      	mov	r1, r5
 80030e6:	024b      	lsls	r3, r1, #9
 80030e8:	4621      	mov	r1, r4
 80030ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030ee:	4621      	mov	r1, r4
 80030f0:	024a      	lsls	r2, r1, #9
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030fa:	2200      	movs	r2, #0
 80030fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003100:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003104:	f7fd f8e4 	bl	80002d0 <__aeabi_uldivmod>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4613      	mov	r3, r2
 800310e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003112:	e065      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x420>
 8003114:	40023800 	.word	0x40023800
 8003118:	00f42400 	.word	0x00f42400
 800311c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003120:	4b3d      	ldr	r3, [pc, #244]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x458>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	2200      	movs	r2, #0
 8003128:	4618      	mov	r0, r3
 800312a:	4611      	mov	r1, r2
 800312c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003130:	653b      	str	r3, [r7, #80]	@ 0x50
 8003132:	2300      	movs	r3, #0
 8003134:	657b      	str	r3, [r7, #84]	@ 0x54
 8003136:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800313a:	4642      	mov	r2, r8
 800313c:	464b      	mov	r3, r9
 800313e:	f04f 0000 	mov.w	r0, #0
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	0159      	lsls	r1, r3, #5
 8003148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800314c:	0150      	lsls	r0, r2, #5
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4641      	mov	r1, r8
 8003154:	1a51      	subs	r1, r2, r1
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	4649      	mov	r1, r9
 800315a:	eb63 0301 	sbc.w	r3, r3, r1
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800316c:	4659      	mov	r1, fp
 800316e:	018b      	lsls	r3, r1, #6
 8003170:	4651      	mov	r1, sl
 8003172:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003176:	4651      	mov	r1, sl
 8003178:	018a      	lsls	r2, r1, #6
 800317a:	4651      	mov	r1, sl
 800317c:	1a54      	subs	r4, r2, r1
 800317e:	4659      	mov	r1, fp
 8003180:	eb63 0501 	sbc.w	r5, r3, r1
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	00eb      	lsls	r3, r5, #3
 800318e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003192:	00e2      	lsls	r2, r4, #3
 8003194:	4614      	mov	r4, r2
 8003196:	461d      	mov	r5, r3
 8003198:	4643      	mov	r3, r8
 800319a:	18e3      	adds	r3, r4, r3
 800319c:	603b      	str	r3, [r7, #0]
 800319e:	464b      	mov	r3, r9
 80031a0:	eb45 0303 	adc.w	r3, r5, r3
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031b2:	4629      	mov	r1, r5
 80031b4:	028b      	lsls	r3, r1, #10
 80031b6:	4621      	mov	r1, r4
 80031b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031bc:	4621      	mov	r1, r4
 80031be:	028a      	lsls	r2, r1, #10
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031c8:	2200      	movs	r2, #0
 80031ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031cc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80031ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031d2:	f7fd f87d 	bl	80002d0 <__aeabi_uldivmod>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4613      	mov	r3, r2
 80031dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x458>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	0f1b      	lsrs	r3, r3, #28
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80031ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031fe:	e003      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003200:	4b06      	ldr	r3, [pc, #24]	@ (800321c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003202:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003206:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003208:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800320c:	4618      	mov	r0, r3
 800320e:	37b8      	adds	r7, #184	@ 0xb8
 8003210:	46bd      	mov	sp, r7
 8003212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800
 800321c:	00f42400 	.word	0x00f42400

08003220 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e28d      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8083 	beq.w	8003346 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003240:	4b94      	ldr	r3, [pc, #592]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b04      	cmp	r3, #4
 800324a:	d019      	beq.n	8003280 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800324c:	4b91      	ldr	r3, [pc, #580]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 030c 	and.w	r3, r3, #12
        || \
 8003254:	2b08      	cmp	r3, #8
 8003256:	d106      	bne.n	8003266 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003258:	4b8e      	ldr	r3, [pc, #568]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003264:	d00c      	beq.n	8003280 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003266:	4b8b      	ldr	r3, [pc, #556]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d112      	bne.n	8003298 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003272:	4b88      	ldr	r3, [pc, #544]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800327a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800327e:	d10b      	bne.n	8003298 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003280:	4b84      	ldr	r3, [pc, #528]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d05b      	beq.n	8003344 <HAL_RCC_OscConfig+0x124>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d157      	bne.n	8003344 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e25a      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a0:	d106      	bne.n	80032b0 <HAL_RCC_OscConfig+0x90>
 80032a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a7b      	ldr	r2, [pc, #492]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e01d      	b.n	80032ec <HAL_RCC_OscConfig+0xcc>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0xb4>
 80032ba:	4b76      	ldr	r3, [pc, #472]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a75      	ldr	r2, [pc, #468]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 80032c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	4b73      	ldr	r3, [pc, #460]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a72      	ldr	r2, [pc, #456]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e00b      	b.n	80032ec <HAL_RCC_OscConfig+0xcc>
 80032d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 80032da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a6b      	ldr	r2, [pc, #428]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 80032e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d013      	beq.n	800331c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fe fb98 	bl	8001a28 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fc:	f7fe fb94 	bl	8001a28 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	@ 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e21f      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	4b61      	ldr	r3, [pc, #388]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0xdc>
 800331a:	e014      	b.n	8003346 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe fb84 	bl	8001a28 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003324:	f7fe fb80 	bl	8001a28 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	@ 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e20b      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003336:	4b57      	ldr	r3, [pc, #348]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x104>
 8003342:	e000      	b.n	8003346 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d06f      	beq.n	8003432 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003352:	4b50      	ldr	r3, [pc, #320]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b00      	cmp	r3, #0
 800335c:	d017      	beq.n	800338e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800335e:	4b4d      	ldr	r3, [pc, #308]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
        || \
 8003366:	2b08      	cmp	r3, #8
 8003368:	d105      	bne.n	8003376 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800336a:	4b4a      	ldr	r3, [pc, #296]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00b      	beq.n	800338e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003376:	4b47      	ldr	r3, [pc, #284]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800337e:	2b0c      	cmp	r3, #12
 8003380:	d11c      	bne.n	80033bc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003382:	4b44      	ldr	r3, [pc, #272]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d116      	bne.n	80033bc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338e:	4b41      	ldr	r3, [pc, #260]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d005      	beq.n	80033a6 <HAL_RCC_OscConfig+0x186>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d001      	beq.n	80033a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e1d3      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4937      	ldr	r1, [pc, #220]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ba:	e03a      	b.n	8003432 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d020      	beq.n	8003406 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c4:	4b34      	ldr	r3, [pc, #208]	@ (8003498 <HAL_RCC_OscConfig+0x278>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ca:	f7fe fb2d 	bl	8001a28 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d2:	f7fe fb29 	bl	8001a28 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e1b4      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f0:	4b28      	ldr	r3, [pc, #160]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4925      	ldr	r1, [pc, #148]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 8003400:	4313      	orrs	r3, r2
 8003402:	600b      	str	r3, [r1, #0]
 8003404:	e015      	b.n	8003432 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003406:	4b24      	ldr	r3, [pc, #144]	@ (8003498 <HAL_RCC_OscConfig+0x278>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fe fb0c 	bl	8001a28 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003414:	f7fe fb08 	bl	8001a28 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e193      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003426:	4b1b      	ldr	r3, [pc, #108]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d036      	beq.n	80034ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d016      	beq.n	8003474 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003446:	4b15      	ldr	r3, [pc, #84]	@ (800349c <HAL_RCC_OscConfig+0x27c>)
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7fe faec 	bl	8001a28 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003454:	f7fe fae8 	bl	8001a28 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e173      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003466:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <HAL_RCC_OscConfig+0x274>)
 8003468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x234>
 8003472:	e01b      	b.n	80034ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003474:	4b09      	ldr	r3, [pc, #36]	@ (800349c <HAL_RCC_OscConfig+0x27c>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347a:	f7fe fad5 	bl	8001a28 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003480:	e00e      	b.n	80034a0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003482:	f7fe fad1 	bl	8001a28 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d907      	bls.n	80034a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e15c      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
 8003494:	40023800 	.word	0x40023800
 8003498:	42470000 	.word	0x42470000
 800349c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a0:	4b8a      	ldr	r3, [pc, #552]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 80034a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1ea      	bne.n	8003482 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8097 	beq.w	80035e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ba:	2300      	movs	r3, #0
 80034bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034be:	4b83      	ldr	r3, [pc, #524]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10f      	bne.n	80034ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	4b7f      	ldr	r3, [pc, #508]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d2:	4a7e      	ldr	r2, [pc, #504]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 80034d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034da:	4b7c      	ldr	r3, [pc, #496]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e6:	2301      	movs	r3, #1
 80034e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ea:	4b79      	ldr	r3, [pc, #484]	@ (80036d0 <HAL_RCC_OscConfig+0x4b0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d118      	bne.n	8003528 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f6:	4b76      	ldr	r3, [pc, #472]	@ (80036d0 <HAL_RCC_OscConfig+0x4b0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a75      	ldr	r2, [pc, #468]	@ (80036d0 <HAL_RCC_OscConfig+0x4b0>)
 80034fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003502:	f7fe fa91 	bl	8001a28 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350a:	f7fe fa8d 	bl	8001a28 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e118      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351c:	4b6c      	ldr	r3, [pc, #432]	@ (80036d0 <HAL_RCC_OscConfig+0x4b0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d106      	bne.n	800353e <HAL_RCC_OscConfig+0x31e>
 8003530:	4b66      	ldr	r3, [pc, #408]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003534:	4a65      	ldr	r2, [pc, #404]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	6713      	str	r3, [r2, #112]	@ 0x70
 800353c:	e01c      	b.n	8003578 <HAL_RCC_OscConfig+0x358>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b05      	cmp	r3, #5
 8003544:	d10c      	bne.n	8003560 <HAL_RCC_OscConfig+0x340>
 8003546:	4b61      	ldr	r3, [pc, #388]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354a:	4a60      	ldr	r2, [pc, #384]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 800354c:	f043 0304 	orr.w	r3, r3, #4
 8003550:	6713      	str	r3, [r2, #112]	@ 0x70
 8003552:	4b5e      	ldr	r3, [pc, #376]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003556:	4a5d      	ldr	r2, [pc, #372]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	6713      	str	r3, [r2, #112]	@ 0x70
 800355e:	e00b      	b.n	8003578 <HAL_RCC_OscConfig+0x358>
 8003560:	4b5a      	ldr	r3, [pc, #360]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003564:	4a59      	ldr	r2, [pc, #356]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 8003566:	f023 0301 	bic.w	r3, r3, #1
 800356a:	6713      	str	r3, [r2, #112]	@ 0x70
 800356c:	4b57      	ldr	r3, [pc, #348]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003570:	4a56      	ldr	r2, [pc, #344]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 8003572:	f023 0304 	bic.w	r3, r3, #4
 8003576:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d015      	beq.n	80035ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003580:	f7fe fa52 	bl	8001a28 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003586:	e00a      	b.n	800359e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003588:	f7fe fa4e 	bl	8001a28 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003596:	4293      	cmp	r3, r2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e0d7      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359e:	4b4b      	ldr	r3, [pc, #300]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0ee      	beq.n	8003588 <HAL_RCC_OscConfig+0x368>
 80035aa:	e014      	b.n	80035d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7fe fa3c 	bl	8001a28 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b4:	f7fe fa38 	bl	8001a28 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e0c1      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ca:	4b40      	ldr	r3, [pc, #256]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1ee      	bne.n	80035b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d105      	bne.n	80035e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035dc:	4b3b      	ldr	r3, [pc, #236]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	4a3a      	ldr	r2, [pc, #232]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 80035e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80ad 	beq.w	800374c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035f2:	4b36      	ldr	r3, [pc, #216]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d060      	beq.n	80036c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d145      	bne.n	8003692 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003606:	4b33      	ldr	r3, [pc, #204]	@ (80036d4 <HAL_RCC_OscConfig+0x4b4>)
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fe fa0c 	bl	8001a28 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003614:	f7fe fa08 	bl	8001a28 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e093      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003626:	4b29      	ldr	r3, [pc, #164]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	019b      	lsls	r3, r3, #6
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	3b01      	subs	r3, #1
 800364c:	041b      	lsls	r3, r3, #16
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365c:	071b      	lsls	r3, r3, #28
 800365e:	491b      	ldr	r1, [pc, #108]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003664:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <HAL_RCC_OscConfig+0x4b4>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7fe f9dd 	bl	8001a28 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003672:	f7fe f9d9 	bl	8001a28 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e064      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003684:	4b11      	ldr	r3, [pc, #68]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x452>
 8003690:	e05c      	b.n	800374c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003692:	4b10      	ldr	r3, [pc, #64]	@ (80036d4 <HAL_RCC_OscConfig+0x4b4>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe f9c6 	bl	8001a28 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe f9c2 	bl	8001a28 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e04d      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	4b06      	ldr	r3, [pc, #24]	@ (80036cc <HAL_RCC_OscConfig+0x4ac>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x480>
 80036be:	e045      	b.n	800374c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d107      	bne.n	80036d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e040      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40007000 	.word	0x40007000
 80036d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003758 <HAL_RCC_OscConfig+0x538>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d030      	beq.n	8003748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d129      	bne.n	8003748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d122      	bne.n	8003748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003708:	4013      	ands	r3, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800370e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003710:	4293      	cmp	r3, r2
 8003712:	d119      	bne.n	8003748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	3b01      	subs	r3, #1
 8003722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d10f      	bne.n	8003748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d107      	bne.n	8003748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800

0800375c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e041      	b.n	80037f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f839 	bl	80037fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3304      	adds	r3, #4
 8003798:	4619      	mov	r1, r3
 800379a:	4610      	mov	r0, r2
 800379c:	f000 f9c0 	bl	8003b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	d001      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e04e      	b.n	80038c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a23      	ldr	r2, [pc, #140]	@ (80038d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d022      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x80>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003852:	d01d      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x80>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1f      	ldr	r2, [pc, #124]	@ (80038d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d018      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x80>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a1e      	ldr	r2, [pc, #120]	@ (80038dc <HAL_TIM_Base_Start_IT+0xcc>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d013      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x80>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1c      	ldr	r2, [pc, #112]	@ (80038e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00e      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x80>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1b      	ldr	r2, [pc, #108]	@ (80038e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d009      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x80>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a19      	ldr	r2, [pc, #100]	@ (80038e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d004      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x80>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a18      	ldr	r2, [pc, #96]	@ (80038ec <HAL_TIM_Base_Start_IT+0xdc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d111      	bne.n	80038b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d010      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b2:	e007      	b.n	80038c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40010000 	.word	0x40010000
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40000800 	.word	0x40000800
 80038e0:	40000c00 	.word	0x40000c00
 80038e4:	40010400 	.word	0x40010400
 80038e8:	40014000 	.word	0x40014000
 80038ec:	40001800 	.word	0x40001800

080038f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d020      	beq.n	8003954 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01b      	beq.n	8003954 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0202 	mvn.w	r2, #2
 8003924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f8d2 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 8003940:	e005      	b.n	800394e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f8c4 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f8d5 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d020      	beq.n	80039a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01b      	beq.n	80039a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0204 	mvn.w	r2, #4
 8003970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2202      	movs	r2, #2
 8003976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f8ac 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 800398c:	e005      	b.n	800399a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f89e 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f8af 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d020      	beq.n	80039ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01b      	beq.n	80039ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0208 	mvn.w	r2, #8
 80039bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2204      	movs	r2, #4
 80039c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f886 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 80039d8:	e005      	b.n	80039e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f878 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f889 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d020      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0210 	mvn.w	r2, #16
 8003a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f860 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f852 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f863 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00c      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0201 	mvn.w	r2, #1
 8003a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd fb02 	bl	8001060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00c      	beq.n	8003a80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f906 	bl	8003c8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00c      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d007      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f834 	bl	8003b0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0220 	mvn.w	r2, #32
 8003ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f8d8 	bl	8003c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a46      	ldr	r2, [pc, #280]	@ (8003c4c <TIM_Base_SetConfig+0x12c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d013      	beq.n	8003b60 <TIM_Base_SetConfig+0x40>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b3e:	d00f      	beq.n	8003b60 <TIM_Base_SetConfig+0x40>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a43      	ldr	r2, [pc, #268]	@ (8003c50 <TIM_Base_SetConfig+0x130>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00b      	beq.n	8003b60 <TIM_Base_SetConfig+0x40>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a42      	ldr	r2, [pc, #264]	@ (8003c54 <TIM_Base_SetConfig+0x134>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d007      	beq.n	8003b60 <TIM_Base_SetConfig+0x40>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a41      	ldr	r2, [pc, #260]	@ (8003c58 <TIM_Base_SetConfig+0x138>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d003      	beq.n	8003b60 <TIM_Base_SetConfig+0x40>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a40      	ldr	r2, [pc, #256]	@ (8003c5c <TIM_Base_SetConfig+0x13c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d108      	bne.n	8003b72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a35      	ldr	r2, [pc, #212]	@ (8003c4c <TIM_Base_SetConfig+0x12c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d02b      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b80:	d027      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a32      	ldr	r2, [pc, #200]	@ (8003c50 <TIM_Base_SetConfig+0x130>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d023      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a31      	ldr	r2, [pc, #196]	@ (8003c54 <TIM_Base_SetConfig+0x134>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d01f      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a30      	ldr	r2, [pc, #192]	@ (8003c58 <TIM_Base_SetConfig+0x138>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d01b      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a2f      	ldr	r2, [pc, #188]	@ (8003c5c <TIM_Base_SetConfig+0x13c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d017      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a2e      	ldr	r2, [pc, #184]	@ (8003c60 <TIM_Base_SetConfig+0x140>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a2d      	ldr	r2, [pc, #180]	@ (8003c64 <TIM_Base_SetConfig+0x144>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00f      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a2c      	ldr	r2, [pc, #176]	@ (8003c68 <TIM_Base_SetConfig+0x148>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00b      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a2b      	ldr	r2, [pc, #172]	@ (8003c6c <TIM_Base_SetConfig+0x14c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d007      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a2a      	ldr	r2, [pc, #168]	@ (8003c70 <TIM_Base_SetConfig+0x150>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d003      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a29      	ldr	r2, [pc, #164]	@ (8003c74 <TIM_Base_SetConfig+0x154>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d108      	bne.n	8003be4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a10      	ldr	r2, [pc, #64]	@ (8003c4c <TIM_Base_SetConfig+0x12c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d003      	beq.n	8003c18 <TIM_Base_SetConfig+0xf8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a12      	ldr	r2, [pc, #72]	@ (8003c5c <TIM_Base_SetConfig+0x13c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d103      	bne.n	8003c20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d105      	bne.n	8003c3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f023 0201 	bic.w	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	611a      	str	r2, [r3, #16]
  }
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40000400 	.word	0x40000400
 8003c54:	40000800 	.word	0x40000800
 8003c58:	40000c00 	.word	0x40000c00
 8003c5c:	40010400 	.word	0x40010400
 8003c60:	40014000 	.word	0x40014000
 8003c64:	40014400 	.word	0x40014400
 8003c68:	40014800 	.word	0x40014800
 8003c6c:	40001800 	.word	0x40001800
 8003c70:	40001c00 	.word	0x40001c00
 8003c74:	40002000 	.word	0x40002000

08003c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e042      	b.n	8003d38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fd fd1c 	bl	8001704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2224      	movs	r2, #36	@ 0x24
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f82b 	bl	8003d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d44:	b0c0      	sub	sp, #256	@ 0x100
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5c:	68d9      	ldr	r1, [r3, #12]
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	ea40 0301 	orr.w	r3, r0, r1
 8003d68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d98:	f021 010c 	bic.w	r1, r1, #12
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003da6:	430b      	orrs	r3, r1
 8003da8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dba:	6999      	ldr	r1, [r3, #24]
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	ea40 0301 	orr.w	r3, r0, r1
 8003dc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	4b8f      	ldr	r3, [pc, #572]	@ (800400c <UART_SetConfig+0x2cc>)
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d005      	beq.n	8003de0 <UART_SetConfig+0xa0>
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	4b8d      	ldr	r3, [pc, #564]	@ (8004010 <UART_SetConfig+0x2d0>)
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d104      	bne.n	8003dea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003de0:	f7fe ffa8 	bl	8002d34 <HAL_RCC_GetPCLK2Freq>
 8003de4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003de8:	e003      	b.n	8003df2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dea:	f7fe ff8f 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8003dee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dfc:	f040 810c 	bne.w	8004018 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e04:	2200      	movs	r2, #0
 8003e06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e12:	4622      	mov	r2, r4
 8003e14:	462b      	mov	r3, r5
 8003e16:	1891      	adds	r1, r2, r2
 8003e18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e1a:	415b      	adcs	r3, r3
 8003e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e22:	4621      	mov	r1, r4
 8003e24:	eb12 0801 	adds.w	r8, r2, r1
 8003e28:	4629      	mov	r1, r5
 8003e2a:	eb43 0901 	adc.w	r9, r3, r1
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e42:	4690      	mov	r8, r2
 8003e44:	4699      	mov	r9, r3
 8003e46:	4623      	mov	r3, r4
 8003e48:	eb18 0303 	adds.w	r3, r8, r3
 8003e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e50:	462b      	mov	r3, r5
 8003e52:	eb49 0303 	adc.w	r3, r9, r3
 8003e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e6e:	460b      	mov	r3, r1
 8003e70:	18db      	adds	r3, r3, r3
 8003e72:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e74:	4613      	mov	r3, r2
 8003e76:	eb42 0303 	adc.w	r3, r2, r3
 8003e7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e84:	f7fc fa24 	bl	80002d0 <__aeabi_uldivmod>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4b61      	ldr	r3, [pc, #388]	@ (8004014 <UART_SetConfig+0x2d4>)
 8003e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	011c      	lsls	r4, r3, #4
 8003e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ea0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ea4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ea8:	4642      	mov	r2, r8
 8003eaa:	464b      	mov	r3, r9
 8003eac:	1891      	adds	r1, r2, r2
 8003eae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003eb0:	415b      	adcs	r3, r3
 8003eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003eb8:	4641      	mov	r1, r8
 8003eba:	eb12 0a01 	adds.w	sl, r2, r1
 8003ebe:	4649      	mov	r1, r9
 8003ec0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ed0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ed4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ed8:	4692      	mov	sl, r2
 8003eda:	469b      	mov	fp, r3
 8003edc:	4643      	mov	r3, r8
 8003ede:	eb1a 0303 	adds.w	r3, sl, r3
 8003ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	eb4b 0303 	adc.w	r3, fp, r3
 8003eec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003efc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f04:	460b      	mov	r3, r1
 8003f06:	18db      	adds	r3, r3, r3
 8003f08:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	eb42 0303 	adc.w	r3, r2, r3
 8003f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f1a:	f7fc f9d9 	bl	80002d0 <__aeabi_uldivmod>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4611      	mov	r1, r2
 8003f24:	4b3b      	ldr	r3, [pc, #236]	@ (8004014 <UART_SetConfig+0x2d4>)
 8003f26:	fba3 2301 	umull	r2, r3, r3, r1
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	2264      	movs	r2, #100	@ 0x64
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	1acb      	subs	r3, r1, r3
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f3a:	4b36      	ldr	r3, [pc, #216]	@ (8004014 <UART_SetConfig+0x2d4>)
 8003f3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f48:	441c      	add	r4, r3
 8003f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f5c:	4642      	mov	r2, r8
 8003f5e:	464b      	mov	r3, r9
 8003f60:	1891      	adds	r1, r2, r2
 8003f62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f64:	415b      	adcs	r3, r3
 8003f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f6c:	4641      	mov	r1, r8
 8003f6e:	1851      	adds	r1, r2, r1
 8003f70:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f72:	4649      	mov	r1, r9
 8003f74:	414b      	adcs	r3, r1
 8003f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f84:	4659      	mov	r1, fp
 8003f86:	00cb      	lsls	r3, r1, #3
 8003f88:	4651      	mov	r1, sl
 8003f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f8e:	4651      	mov	r1, sl
 8003f90:	00ca      	lsls	r2, r1, #3
 8003f92:	4610      	mov	r0, r2
 8003f94:	4619      	mov	r1, r3
 8003f96:	4603      	mov	r3, r0
 8003f98:	4642      	mov	r2, r8
 8003f9a:	189b      	adds	r3, r3, r2
 8003f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fa0:	464b      	mov	r3, r9
 8003fa2:	460a      	mov	r2, r1
 8003fa4:	eb42 0303 	adc.w	r3, r2, r3
 8003fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	18db      	adds	r3, r3, r3
 8003fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	eb42 0303 	adc.w	r3, r2, r3
 8003fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fd6:	f7fc f97b 	bl	80002d0 <__aeabi_uldivmod>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4b0d      	ldr	r3, [pc, #52]	@ (8004014 <UART_SetConfig+0x2d4>)
 8003fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	2164      	movs	r1, #100	@ 0x64
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	3332      	adds	r3, #50	@ 0x32
 8003ff2:	4a08      	ldr	r2, [pc, #32]	@ (8004014 <UART_SetConfig+0x2d4>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	f003 0207 	and.w	r2, r3, #7
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4422      	add	r2, r4
 8004006:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004008:	e106      	b.n	8004218 <UART_SetConfig+0x4d8>
 800400a:	bf00      	nop
 800400c:	40011000 	.word	0x40011000
 8004010:	40011400 	.word	0x40011400
 8004014:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800401c:	2200      	movs	r2, #0
 800401e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004022:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004026:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800402a:	4642      	mov	r2, r8
 800402c:	464b      	mov	r3, r9
 800402e:	1891      	adds	r1, r2, r2
 8004030:	6239      	str	r1, [r7, #32]
 8004032:	415b      	adcs	r3, r3
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24
 8004036:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800403a:	4641      	mov	r1, r8
 800403c:	1854      	adds	r4, r2, r1
 800403e:	4649      	mov	r1, r9
 8004040:	eb43 0501 	adc.w	r5, r3, r1
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	00eb      	lsls	r3, r5, #3
 800404e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004052:	00e2      	lsls	r2, r4, #3
 8004054:	4614      	mov	r4, r2
 8004056:	461d      	mov	r5, r3
 8004058:	4643      	mov	r3, r8
 800405a:	18e3      	adds	r3, r4, r3
 800405c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004060:	464b      	mov	r3, r9
 8004062:	eb45 0303 	adc.w	r3, r5, r3
 8004066:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800406a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004076:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004086:	4629      	mov	r1, r5
 8004088:	008b      	lsls	r3, r1, #2
 800408a:	4621      	mov	r1, r4
 800408c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004090:	4621      	mov	r1, r4
 8004092:	008a      	lsls	r2, r1, #2
 8004094:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004098:	f7fc f91a 	bl	80002d0 <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4b60      	ldr	r3, [pc, #384]	@ (8004224 <UART_SetConfig+0x4e4>)
 80040a2:	fba3 2302 	umull	r2, r3, r3, r2
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	011c      	lsls	r4, r3, #4
 80040aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040bc:	4642      	mov	r2, r8
 80040be:	464b      	mov	r3, r9
 80040c0:	1891      	adds	r1, r2, r2
 80040c2:	61b9      	str	r1, [r7, #24]
 80040c4:	415b      	adcs	r3, r3
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040cc:	4641      	mov	r1, r8
 80040ce:	1851      	adds	r1, r2, r1
 80040d0:	6139      	str	r1, [r7, #16]
 80040d2:	4649      	mov	r1, r9
 80040d4:	414b      	adcs	r3, r1
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040e4:	4659      	mov	r1, fp
 80040e6:	00cb      	lsls	r3, r1, #3
 80040e8:	4651      	mov	r1, sl
 80040ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ee:	4651      	mov	r1, sl
 80040f0:	00ca      	lsls	r2, r1, #3
 80040f2:	4610      	mov	r0, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	4603      	mov	r3, r0
 80040f8:	4642      	mov	r2, r8
 80040fa:	189b      	adds	r3, r3, r2
 80040fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004100:	464b      	mov	r3, r9
 8004102:	460a      	mov	r2, r1
 8004104:	eb42 0303 	adc.w	r3, r2, r3
 8004108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004116:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004124:	4649      	mov	r1, r9
 8004126:	008b      	lsls	r3, r1, #2
 8004128:	4641      	mov	r1, r8
 800412a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800412e:	4641      	mov	r1, r8
 8004130:	008a      	lsls	r2, r1, #2
 8004132:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004136:	f7fc f8cb 	bl	80002d0 <__aeabi_uldivmod>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4611      	mov	r1, r2
 8004140:	4b38      	ldr	r3, [pc, #224]	@ (8004224 <UART_SetConfig+0x4e4>)
 8004142:	fba3 2301 	umull	r2, r3, r3, r1
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2264      	movs	r2, #100	@ 0x64
 800414a:	fb02 f303 	mul.w	r3, r2, r3
 800414e:	1acb      	subs	r3, r1, r3
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	3332      	adds	r3, #50	@ 0x32
 8004154:	4a33      	ldr	r2, [pc, #204]	@ (8004224 <UART_SetConfig+0x4e4>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004160:	441c      	add	r4, r3
 8004162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004166:	2200      	movs	r2, #0
 8004168:	673b      	str	r3, [r7, #112]	@ 0x70
 800416a:	677a      	str	r2, [r7, #116]	@ 0x74
 800416c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004170:	4642      	mov	r2, r8
 8004172:	464b      	mov	r3, r9
 8004174:	1891      	adds	r1, r2, r2
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	415b      	adcs	r3, r3
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004180:	4641      	mov	r1, r8
 8004182:	1851      	adds	r1, r2, r1
 8004184:	6039      	str	r1, [r7, #0]
 8004186:	4649      	mov	r1, r9
 8004188:	414b      	adcs	r3, r1
 800418a:	607b      	str	r3, [r7, #4]
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004198:	4659      	mov	r1, fp
 800419a:	00cb      	lsls	r3, r1, #3
 800419c:	4651      	mov	r1, sl
 800419e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a2:	4651      	mov	r1, sl
 80041a4:	00ca      	lsls	r2, r1, #3
 80041a6:	4610      	mov	r0, r2
 80041a8:	4619      	mov	r1, r3
 80041aa:	4603      	mov	r3, r0
 80041ac:	4642      	mov	r2, r8
 80041ae:	189b      	adds	r3, r3, r2
 80041b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041b2:	464b      	mov	r3, r9
 80041b4:	460a      	mov	r2, r1
 80041b6:	eb42 0303 	adc.w	r3, r2, r3
 80041ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80041c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041d4:	4649      	mov	r1, r9
 80041d6:	008b      	lsls	r3, r1, #2
 80041d8:	4641      	mov	r1, r8
 80041da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041de:	4641      	mov	r1, r8
 80041e0:	008a      	lsls	r2, r1, #2
 80041e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041e6:	f7fc f873 	bl	80002d0 <__aeabi_uldivmod>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004224 <UART_SetConfig+0x4e4>)
 80041f0:	fba3 1302 	umull	r1, r3, r3, r2
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	2164      	movs	r1, #100	@ 0x64
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	3332      	adds	r3, #50	@ 0x32
 8004202:	4a08      	ldr	r2, [pc, #32]	@ (8004224 <UART_SetConfig+0x4e4>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	f003 020f 	and.w	r2, r3, #15
 800420e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4422      	add	r2, r4
 8004216:	609a      	str	r2, [r3, #8]
}
 8004218:	bf00      	nop
 800421a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800421e:	46bd      	mov	sp, r7
 8004220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004224:	51eb851f 	.word	0x51eb851f

08004228 <__NVIC_SetPriority>:
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	6039      	str	r1, [r7, #0]
 8004232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004238:	2b00      	cmp	r3, #0
 800423a:	db0a      	blt.n	8004252 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	490c      	ldr	r1, [pc, #48]	@ (8004274 <__NVIC_SetPriority+0x4c>)
 8004242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004246:	0112      	lsls	r2, r2, #4
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	440b      	add	r3, r1
 800424c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004250:	e00a      	b.n	8004268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	4908      	ldr	r1, [pc, #32]	@ (8004278 <__NVIC_SetPriority+0x50>)
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	3b04      	subs	r3, #4
 8004260:	0112      	lsls	r2, r2, #4
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	440b      	add	r3, r1
 8004266:	761a      	strb	r2, [r3, #24]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000e100 	.word	0xe000e100
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004280:	4b05      	ldr	r3, [pc, #20]	@ (8004298 <SysTick_Handler+0x1c>)
 8004282:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004284:	f001 fd18 	bl	8005cb8 <xTaskGetSchedulerState>
 8004288:	4603      	mov	r3, r0
 800428a:	2b01      	cmp	r3, #1
 800428c:	d001      	beq.n	8004292 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800428e:	f002 fb13 	bl	80068b8 <xPortSysTickHandler>
  }
}
 8004292:	bf00      	nop
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	e000e010 	.word	0xe000e010

0800429c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80042a0:	2100      	movs	r1, #0
 80042a2:	f06f 0004 	mvn.w	r0, #4
 80042a6:	f7ff ffbf 	bl	8004228 <__NVIC_SetPriority>
#endif
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042b6:	f3ef 8305 	mrs	r3, IPSR
 80042ba:	603b      	str	r3, [r7, #0]
  return(result);
 80042bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80042c2:	f06f 0305 	mvn.w	r3, #5
 80042c6:	607b      	str	r3, [r7, #4]
 80042c8:	e00c      	b.n	80042e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80042ca:	4b0a      	ldr	r3, [pc, #40]	@ (80042f4 <osKernelInitialize+0x44>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d105      	bne.n	80042de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80042d2:	4b08      	ldr	r3, [pc, #32]	@ (80042f4 <osKernelInitialize+0x44>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80042d8:	2300      	movs	r3, #0
 80042da:	607b      	str	r3, [r7, #4]
 80042dc:	e002      	b.n	80042e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80042de:	f04f 33ff 	mov.w	r3, #4294967295
 80042e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042e4:	687b      	ldr	r3, [r7, #4]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	200005b4 	.word	0x200005b4

080042f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042fe:	f3ef 8305 	mrs	r3, IPSR
 8004302:	603b      	str	r3, [r7, #0]
  return(result);
 8004304:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <osKernelStart+0x1a>
    stat = osErrorISR;
 800430a:	f06f 0305 	mvn.w	r3, #5
 800430e:	607b      	str	r3, [r7, #4]
 8004310:	e010      	b.n	8004334 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004312:	4b0b      	ldr	r3, [pc, #44]	@ (8004340 <osKernelStart+0x48>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d109      	bne.n	800432e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800431a:	f7ff ffbf 	bl	800429c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800431e:	4b08      	ldr	r3, [pc, #32]	@ (8004340 <osKernelStart+0x48>)
 8004320:	2202      	movs	r2, #2
 8004322:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004324:	f001 f87a 	bl	800541c <vTaskStartScheduler>
      stat = osOK;
 8004328:	2300      	movs	r3, #0
 800432a:	607b      	str	r3, [r7, #4]
 800432c:	e002      	b.n	8004334 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800432e:	f04f 33ff 	mov.w	r3, #4294967295
 8004332:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004334:	687b      	ldr	r3, [r7, #4]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	200005b4 	.word	0x200005b4

08004344 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004344:	b580      	push	{r7, lr}
 8004346:	b08e      	sub	sp, #56	@ 0x38
 8004348:	af04      	add	r7, sp, #16
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004350:	2300      	movs	r3, #0
 8004352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004354:	f3ef 8305 	mrs	r3, IPSR
 8004358:	617b      	str	r3, [r7, #20]
  return(result);
 800435a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800435c:	2b00      	cmp	r3, #0
 800435e:	d17e      	bne.n	800445e <osThreadNew+0x11a>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d07b      	beq.n	800445e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004366:	2380      	movs	r3, #128	@ 0x80
 8004368:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800436a:	2318      	movs	r3, #24
 800436c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800436e:	2300      	movs	r3, #0
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004372:	f04f 33ff 	mov.w	r3, #4294967295
 8004376:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d045      	beq.n	800440a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <osThreadNew+0x48>
        name = attr->name;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <osThreadNew+0x6e>
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2b38      	cmp	r3, #56	@ 0x38
 80043a4:	d805      	bhi.n	80043b2 <osThreadNew+0x6e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <osThreadNew+0x72>
        return (NULL);
 80043b2:	2300      	movs	r3, #0
 80043b4:	e054      	b.n	8004460 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	089b      	lsrs	r3, r3, #2
 80043c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00e      	beq.n	80043ec <osThreadNew+0xa8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b5b      	cmp	r3, #91	@ 0x5b
 80043d4:	d90a      	bls.n	80043ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d006      	beq.n	80043ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <osThreadNew+0xa8>
        mem = 1;
 80043e6:	2301      	movs	r3, #1
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	e010      	b.n	800440e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10c      	bne.n	800440e <osThreadNew+0xca>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d108      	bne.n	800440e <osThreadNew+0xca>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d104      	bne.n	800440e <osThreadNew+0xca>
          mem = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	e001      	b.n	800440e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d110      	bne.n	8004436 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800441c:	9202      	str	r2, [sp, #8]
 800441e:	9301      	str	r3, [sp, #4]
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	6a3a      	ldr	r2, [r7, #32]
 8004428:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fe1a 	bl	8005064 <xTaskCreateStatic>
 8004430:	4603      	mov	r3, r0
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	e013      	b.n	800445e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d110      	bne.n	800445e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	b29a      	uxth	r2, r3
 8004440:	f107 0310 	add.w	r3, r7, #16
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fe68 	bl	8005124 <xTaskCreate>
 8004454:	4603      	mov	r3, r0
 8004456:	2b01      	cmp	r3, #1
 8004458:	d001      	beq.n	800445e <osThreadNew+0x11a>
            hTask = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800445e:	693b      	ldr	r3, [r7, #16]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3728      	adds	r7, #40	@ 0x28
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004470:	f3ef 8305 	mrs	r3, IPSR
 8004474:	60bb      	str	r3, [r7, #8]
  return(result);
 8004476:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <osDelay+0x1c>
    stat = osErrorISR;
 800447c:	f06f 0305 	mvn.w	r3, #5
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	e007      	b.n	8004494 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <osDelay+0x2c>
      vTaskDelay(ticks);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 ff8e 	bl	80053b0 <vTaskDelay>
    }
  }

  return (stat);
 8004494:	68fb      	ldr	r3, [r7, #12]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4a07      	ldr	r2, [pc, #28]	@ (80044cc <vApplicationGetIdleTaskMemory+0x2c>)
 80044b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4a06      	ldr	r2, [pc, #24]	@ (80044d0 <vApplicationGetIdleTaskMemory+0x30>)
 80044b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2280      	movs	r2, #128	@ 0x80
 80044bc:	601a      	str	r2, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	200005b8 	.word	0x200005b8
 80044d0:	20000614 	.word	0x20000614

080044d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a07      	ldr	r2, [pc, #28]	@ (8004500 <vApplicationGetTimerTaskMemory+0x2c>)
 80044e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4a06      	ldr	r2, [pc, #24]	@ (8004504 <vApplicationGetTimerTaskMemory+0x30>)
 80044ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	20000814 	.word	0x20000814
 8004504:	20000870 	.word	0x20000870

08004508 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f103 0208 	add.w	r2, r3, #8
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f04f 32ff 	mov.w	r2, #4294967295
 8004520:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f103 0208 	add.w	r2, r3, #8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f103 0208 	add.w	r2, r3, #8
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	601a      	str	r2, [r3, #0]
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045aa:	b480      	push	{r7}
 80045ac:	b085      	sub	sp, #20
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d103      	bne.n	80045ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	e00c      	b.n	80045e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3308      	adds	r3, #8
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e002      	b.n	80045d8 <vListInsert+0x2e>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d2f6      	bcs.n	80045d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	601a      	str	r2, [r3, #0]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6892      	ldr	r2, [r2, #8]
 8004632:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6852      	ldr	r2, [r2, #4]
 800463c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d103      	bne.n	8004650 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	1e5a      	subs	r2, r3, #1
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10b      	bne.n	800469c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004696:	bf00      	nop
 8004698:	bf00      	nop
 800469a:	e7fd      	b.n	8004698 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800469c:	f002 f87c 	bl	8006798 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a8:	68f9      	ldr	r1, [r7, #12]
 80046aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	441a      	add	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046cc:	3b01      	subs	r3, #1
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	441a      	add	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	22ff      	movs	r2, #255	@ 0xff
 80046e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	22ff      	movs	r2, #255	@ 0xff
 80046e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d114      	bne.n	800471c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01a      	beq.n	8004730 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3310      	adds	r3, #16
 80046fe:	4618      	mov	r0, r3
 8004700:	f001 f91a 	bl	8005938 <xTaskRemoveFromEventList>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d012      	beq.n	8004730 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800470a:	4b0d      	ldr	r3, [pc, #52]	@ (8004740 <xQueueGenericReset+0xd0>)
 800470c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	e009      	b.n	8004730 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3310      	adds	r3, #16
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fef1 	bl	8004508 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3324      	adds	r3, #36	@ 0x24
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff feec 	bl	8004508 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004730:	f002 f864 	bl	80067fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004734:	2301      	movs	r3, #1
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	e000ed04 	.word	0xe000ed04

08004744 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08e      	sub	sp, #56	@ 0x38
 8004748:	af02      	add	r7, sp, #8
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10b      	bne.n	8004770 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800476a:	bf00      	nop
 800476c:	bf00      	nop
 800476e:	e7fd      	b.n	800476c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10b      	bne.n	800478e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004788:	bf00      	nop
 800478a:	bf00      	nop
 800478c:	e7fd      	b.n	800478a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <xQueueGenericCreateStatic+0x56>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <xQueueGenericCreateStatic+0x5a>
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <xQueueGenericCreateStatic+0x5c>
 800479e:	2300      	movs	r3, #0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10b      	bne.n	80047bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	623b      	str	r3, [r7, #32]
}
 80047b6:	bf00      	nop
 80047b8:	bf00      	nop
 80047ba:	e7fd      	b.n	80047b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d102      	bne.n	80047c8 <xQueueGenericCreateStatic+0x84>
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <xQueueGenericCreateStatic+0x88>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <xQueueGenericCreateStatic+0x8a>
 80047cc:	2300      	movs	r3, #0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10b      	bne.n	80047ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	61fb      	str	r3, [r7, #28]
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	e7fd      	b.n	80047e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80047ea:	2350      	movs	r3, #80	@ 0x50
 80047ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b50      	cmp	r3, #80	@ 0x50
 80047f2:	d00b      	beq.n	800480c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	61bb      	str	r3, [r7, #24]
}
 8004806:	bf00      	nop
 8004808:	bf00      	nop
 800480a:	e7fd      	b.n	8004808 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800480c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00d      	beq.n	8004834 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004820:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f805 	bl	800483e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004836:	4618      	mov	r0, r3
 8004838:	3730      	adds	r7, #48	@ 0x30
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
 800484a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d103      	bne.n	800485a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e002      	b.n	8004860 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800486c:	2101      	movs	r1, #1
 800486e:	69b8      	ldr	r0, [r7, #24]
 8004870:	f7ff fefe 	bl	8004670 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	78fa      	ldrb	r2, [r7, #3]
 8004878:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08e      	sub	sp, #56	@ 0x38
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004892:	2300      	movs	r3, #0
 8004894:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800489a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10b      	bne.n	80048b8 <xQueueGenericSend+0x34>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048b2:	bf00      	nop
 80048b4:	bf00      	nop
 80048b6:	e7fd      	b.n	80048b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <xQueueGenericSend+0x42>
 80048be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <xQueueGenericSend+0x46>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <xQueueGenericSend+0x48>
 80048ca:	2300      	movs	r3, #0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10b      	bne.n	80048e8 <xQueueGenericSend+0x64>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048e2:	bf00      	nop
 80048e4:	bf00      	nop
 80048e6:	e7fd      	b.n	80048e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d103      	bne.n	80048f6 <xQueueGenericSend+0x72>
 80048ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <xQueueGenericSend+0x76>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <xQueueGenericSend+0x78>
 80048fa:	2300      	movs	r3, #0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10b      	bne.n	8004918 <xQueueGenericSend+0x94>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	623b      	str	r3, [r7, #32]
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004918:	f001 f9ce 	bl	8005cb8 <xTaskGetSchedulerState>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d102      	bne.n	8004928 <xQueueGenericSend+0xa4>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <xQueueGenericSend+0xa8>
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <xQueueGenericSend+0xaa>
 800492c:	2300      	movs	r3, #0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10b      	bne.n	800494a <xQueueGenericSend+0xc6>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	61fb      	str	r3, [r7, #28]
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	e7fd      	b.n	8004946 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800494a:	f001 ff25 	bl	8006798 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800494e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004956:	429a      	cmp	r2, r3
 8004958:	d302      	bcc.n	8004960 <xQueueGenericSend+0xdc>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d129      	bne.n	80049b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004966:	f000 fa0f 	bl	8004d88 <prvCopyDataToQueue>
 800496a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800496c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	2b00      	cmp	r3, #0
 8004972:	d010      	beq.n	8004996 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004976:	3324      	adds	r3, #36	@ 0x24
 8004978:	4618      	mov	r0, r3
 800497a:	f000 ffdd 	bl	8005938 <xTaskRemoveFromEventList>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d013      	beq.n	80049ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004984:	4b3f      	ldr	r3, [pc, #252]	@ (8004a84 <xQueueGenericSend+0x200>)
 8004986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	e00a      	b.n	80049ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800499c:	4b39      	ldr	r3, [pc, #228]	@ (8004a84 <xQueueGenericSend+0x200>)
 800499e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049ac:	f001 ff26 	bl	80067fc <vPortExitCritical>
				return pdPASS;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e063      	b.n	8004a7c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d103      	bne.n	80049c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049ba:	f001 ff1f 	bl	80067fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	e05c      	b.n	8004a7c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d106      	bne.n	80049d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049c8:	f107 0314 	add.w	r3, r7, #20
 80049cc:	4618      	mov	r0, r3
 80049ce:	f001 f817 	bl	8005a00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049d2:	2301      	movs	r3, #1
 80049d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049d6:	f001 ff11 	bl	80067fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049da:	f000 fd87 	bl	80054ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049de:	f001 fedb 	bl	8006798 <vPortEnterCritical>
 80049e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049e8:	b25b      	sxtb	r3, r3
 80049ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ee:	d103      	bne.n	80049f8 <xQueueGenericSend+0x174>
 80049f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049fe:	b25b      	sxtb	r3, r3
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d103      	bne.n	8004a0e <xQueueGenericSend+0x18a>
 8004a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a0e:	f001 fef5 	bl	80067fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a12:	1d3a      	adds	r2, r7, #4
 8004a14:	f107 0314 	add.w	r3, r7, #20
 8004a18:	4611      	mov	r1, r2
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f001 f806 	bl	8005a2c <xTaskCheckForTimeOut>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d124      	bne.n	8004a70 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a28:	f000 faa6 	bl	8004f78 <prvIsQueueFull>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d018      	beq.n	8004a64 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a34:	3310      	adds	r3, #16
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	4611      	mov	r1, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 ff2a 	bl	8005894 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a42:	f000 fa31 	bl	8004ea8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a46:	f000 fd5f 	bl	8005508 <xTaskResumeAll>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f47f af7c 	bne.w	800494a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004a52:	4b0c      	ldr	r3, [pc, #48]	@ (8004a84 <xQueueGenericSend+0x200>)
 8004a54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	e772      	b.n	800494a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a66:	f000 fa1f 	bl	8004ea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a6a:	f000 fd4d 	bl	8005508 <xTaskResumeAll>
 8004a6e:	e76c      	b.n	800494a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a72:	f000 fa19 	bl	8004ea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a76:	f000 fd47 	bl	8005508 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3738      	adds	r7, #56	@ 0x38
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b090      	sub	sp, #64	@ 0x40
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
 8004ab6:	e7fd      	b.n	8004ab4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d103      	bne.n	8004ac6 <xQueueGenericSendFromISR+0x3e>
 8004abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <xQueueGenericSendFromISR+0x42>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <xQueueGenericSendFromISR+0x44>
 8004aca:	2300      	movs	r3, #0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	e7fd      	b.n	8004ae4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d103      	bne.n	8004af6 <xQueueGenericSendFromISR+0x6e>
 8004aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <xQueueGenericSendFromISR+0x72>
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <xQueueGenericSendFromISR+0x74>
 8004afa:	2300      	movs	r3, #0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10b      	bne.n	8004b18 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	623b      	str	r3, [r7, #32]
}
 8004b12:	bf00      	nop
 8004b14:	bf00      	nop
 8004b16:	e7fd      	b.n	8004b14 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b18:	f001 ff1e 	bl	8006958 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b1c:	f3ef 8211 	mrs	r2, BASEPRI
 8004b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	61fa      	str	r2, [r7, #28]
 8004b32:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b34:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b36:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d302      	bcc.n	8004b4a <xQueueGenericSendFromISR+0xc2>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d12f      	bne.n	8004baa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004b60:	f000 f912 	bl	8004d88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b64:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d112      	bne.n	8004b94 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d016      	beq.n	8004ba4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b78:	3324      	adds	r3, #36	@ 0x24
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fedc 	bl	8005938 <xTaskRemoveFromEventList>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00e      	beq.n	8004ba4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00b      	beq.n	8004ba4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	e007      	b.n	8004ba4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004b98:	3301      	adds	r3, #1
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	b25a      	sxtb	r2, r3
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004ba8:	e001      	b.n	8004bae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3740      	adds	r7, #64	@ 0x40
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08c      	sub	sp, #48	@ 0x30
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10b      	bne.n	8004bf6 <xQueueReceive+0x32>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	623b      	str	r3, [r7, #32]
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	e7fd      	b.n	8004bf2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d103      	bne.n	8004c04 <xQueueReceive+0x40>
 8004bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <xQueueReceive+0x44>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <xQueueReceive+0x46>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10b      	bne.n	8004c26 <xQueueReceive+0x62>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	61fb      	str	r3, [r7, #28]
}
 8004c20:	bf00      	nop
 8004c22:	bf00      	nop
 8004c24:	e7fd      	b.n	8004c22 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c26:	f001 f847 	bl	8005cb8 <xTaskGetSchedulerState>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d102      	bne.n	8004c36 <xQueueReceive+0x72>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <xQueueReceive+0x76>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <xQueueReceive+0x78>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10b      	bne.n	8004c58 <xQueueReceive+0x94>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	61bb      	str	r3, [r7, #24]
}
 8004c52:	bf00      	nop
 8004c54:	bf00      	nop
 8004c56:	e7fd      	b.n	8004c54 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c58:	f001 fd9e 	bl	8006798 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c60:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01f      	beq.n	8004ca8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c6c:	f000 f8f6 	bl	8004e5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	1e5a      	subs	r2, r3, #1
 8004c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c76:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00f      	beq.n	8004ca0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c82:	3310      	adds	r3, #16
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fe57 	bl	8005938 <xTaskRemoveFromEventList>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c90:	4b3c      	ldr	r3, [pc, #240]	@ (8004d84 <xQueueReceive+0x1c0>)
 8004c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ca0:	f001 fdac 	bl	80067fc <vPortExitCritical>
				return pdPASS;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e069      	b.n	8004d7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d103      	bne.n	8004cb6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cae:	f001 fda5 	bl	80067fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e062      	b.n	8004d7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d106      	bne.n	8004cca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cbc:	f107 0310 	add.w	r3, r7, #16
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fe9d 	bl	8005a00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cca:	f001 fd97 	bl	80067fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cce:	f000 fc0d 	bl	80054ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cd2:	f001 fd61 	bl	8006798 <vPortEnterCritical>
 8004cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cdc:	b25b      	sxtb	r3, r3
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce2:	d103      	bne.n	8004cec <xQueueReceive+0x128>
 8004ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cf2:	b25b      	sxtb	r3, r3
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d103      	bne.n	8004d02 <xQueueReceive+0x13e>
 8004cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d02:	f001 fd7b 	bl	80067fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d06:	1d3a      	adds	r2, r7, #4
 8004d08:	f107 0310 	add.w	r3, r7, #16
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fe8c 	bl	8005a2c <xTaskCheckForTimeOut>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d123      	bne.n	8004d62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d1c:	f000 f916 	bl	8004f4c <prvIsQueueEmpty>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d017      	beq.n	8004d56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d28:	3324      	adds	r3, #36	@ 0x24
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fdb0 	bl	8005894 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d36:	f000 f8b7 	bl	8004ea8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d3a:	f000 fbe5 	bl	8005508 <xTaskResumeAll>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d189      	bne.n	8004c58 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004d44:	4b0f      	ldr	r3, [pc, #60]	@ (8004d84 <xQueueReceive+0x1c0>)
 8004d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	e780      	b.n	8004c58 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d58:	f000 f8a6 	bl	8004ea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d5c:	f000 fbd4 	bl	8005508 <xTaskResumeAll>
 8004d60:	e77a      	b.n	8004c58 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d64:	f000 f8a0 	bl	8004ea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d68:	f000 fbce 	bl	8005508 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d6e:	f000 f8ed 	bl	8004f4c <prvIsQueueEmpty>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f43f af6f 	beq.w	8004c58 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3730      	adds	r7, #48	@ 0x30
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	e000ed04 	.word	0xe000ed04

08004d88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10d      	bne.n	8004dc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d14d      	bne.n	8004e4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 ff9e 	bl	8005cf4 <xTaskPriorityDisinherit>
 8004db8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	609a      	str	r2, [r3, #8]
 8004dc0:	e043      	b.n	8004e4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d119      	bne.n	8004dfc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6858      	ldr	r0, [r3, #4]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	f002 f858 	bl	8006e88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de0:	441a      	add	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d32b      	bcc.n	8004e4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	e026      	b.n	8004e4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68d8      	ldr	r0, [r3, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e04:	461a      	mov	r2, r3
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	f002 f83e 	bl	8006e88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e14:	425b      	negs	r3, r3
 8004e16:	441a      	add	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d207      	bcs.n	8004e38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e30:	425b      	negs	r3, r3
 8004e32:	441a      	add	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d105      	bne.n	8004e4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004e52:	697b      	ldr	r3, [r7, #20]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d018      	beq.n	8004ea0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	441a      	add	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d303      	bcc.n	8004e90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68d9      	ldr	r1, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6838      	ldr	r0, [r7, #0]
 8004e9c:	f001 fff4 	bl	8006e88 <memcpy>
	}
}
 8004ea0:	bf00      	nop
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004eb0:	f001 fc72 	bl	8006798 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004eba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ebc:	e011      	b.n	8004ee2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d012      	beq.n	8004eec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3324      	adds	r3, #36	@ 0x24
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fd34 	bl	8005938 <xTaskRemoveFromEventList>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ed6:	f000 fe0d 	bl	8005af4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	dce9      	bgt.n	8004ebe <prvUnlockQueue+0x16>
 8004eea:	e000      	b.n	8004eee <prvUnlockQueue+0x46>
					break;
 8004eec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	22ff      	movs	r2, #255	@ 0xff
 8004ef2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004ef6:	f001 fc81 	bl	80067fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004efa:	f001 fc4d 	bl	8006798 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f06:	e011      	b.n	8004f2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d012      	beq.n	8004f36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3310      	adds	r3, #16
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fd0f 	bl	8005938 <xTaskRemoveFromEventList>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f20:	f000 fde8 	bl	8005af4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f24:	7bbb      	ldrb	r3, [r7, #14]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	dce9      	bgt.n	8004f08 <prvUnlockQueue+0x60>
 8004f34:	e000      	b.n	8004f38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	22ff      	movs	r2, #255	@ 0xff
 8004f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f40:	f001 fc5c 	bl	80067fc <vPortExitCritical>
}
 8004f44:	bf00      	nop
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f54:	f001 fc20 	bl	8006798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d102      	bne.n	8004f66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f60:	2301      	movs	r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	e001      	b.n	8004f6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f6a:	f001 fc47 	bl	80067fc <vPortExitCritical>

	return xReturn;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f80:	f001 fc0a 	bl	8006798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d102      	bne.n	8004f96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f90:	2301      	movs	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e001      	b.n	8004f9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f9a:	f001 fc2f 	bl	80067fc <vPortExitCritical>

	return xReturn;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e014      	b.n	8004fe2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8004ff8 <vQueueAddToRegistry+0x50>)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10b      	bne.n	8004fdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fc4:	490c      	ldr	r1, [pc, #48]	@ (8004ff8 <vQueueAddToRegistry+0x50>)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fce:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff8 <vQueueAddToRegistry+0x50>)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	4413      	add	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fda:	e006      	b.n	8004fea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b07      	cmp	r3, #7
 8004fe6:	d9e7      	bls.n	8004fb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fe8:	bf00      	nop
 8004fea:	bf00      	nop
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20000c70 	.word	0x20000c70

08004ffc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800500c:	f001 fbc4 	bl	8006798 <vPortEnterCritical>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005016:	b25b      	sxtb	r3, r3
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501c:	d103      	bne.n	8005026 <vQueueWaitForMessageRestricted+0x2a>
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800502c:	b25b      	sxtb	r3, r3
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005032:	d103      	bne.n	800503c <vQueueWaitForMessageRestricted+0x40>
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800503c:	f001 fbde 	bl	80067fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005044:	2b00      	cmp	r3, #0
 8005046:	d106      	bne.n	8005056 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	3324      	adds	r3, #36	@ 0x24
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fc45 	bl	80058e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005056:	6978      	ldr	r0, [r7, #20]
 8005058:	f7ff ff26 	bl	8004ea8 <prvUnlockQueue>
	}
 800505c:	bf00      	nop
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08e      	sub	sp, #56	@ 0x38
 8005068:	af04      	add	r7, sp, #16
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10b      	bne.n	8005090 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	623b      	str	r3, [r7, #32]
}
 800508a:	bf00      	nop
 800508c:	bf00      	nop
 800508e:	e7fd      	b.n	800508c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10b      	bne.n	80050ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	61fb      	str	r3, [r7, #28]
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	e7fd      	b.n	80050aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050ae:	235c      	movs	r3, #92	@ 0x5c
 80050b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80050b6:	d00b      	beq.n	80050d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	61bb      	str	r3, [r7, #24]
}
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	e7fd      	b.n	80050cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01e      	beq.n	8005116 <xTaskCreateStatic+0xb2>
 80050d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01b      	beq.n	8005116 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050f0:	2300      	movs	r3, #0
 80050f2:	9303      	str	r3, [sp, #12]
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	9302      	str	r3, [sp, #8]
 80050f8:	f107 0314 	add.w	r3, r7, #20
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f850 	bl	80051ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800510e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005110:	f000 f8de 	bl	80052d0 <prvAddNewTaskToReadyList>
 8005114:	e001      	b.n	800511a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800511a:	697b      	ldr	r3, [r7, #20]
	}
 800511c:	4618      	mov	r0, r3
 800511e:	3728      	adds	r7, #40	@ 0x28
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08c      	sub	sp, #48	@ 0x30
 8005128:	af04      	add	r7, sp, #16
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	4613      	mov	r3, r2
 8005132:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005134:	88fb      	ldrh	r3, [r7, #6]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4618      	mov	r0, r3
 800513a:	f001 fc4f 	bl	80069dc <pvPortMalloc>
 800513e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00e      	beq.n	8005164 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005146:	205c      	movs	r0, #92	@ 0x5c
 8005148:	f001 fc48 	bl	80069dc <pvPortMalloc>
 800514c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	631a      	str	r2, [r3, #48]	@ 0x30
 800515a:	e005      	b.n	8005168 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800515c:	6978      	ldr	r0, [r7, #20]
 800515e:	f001 fd0b 	bl	8006b78 <vPortFree>
 8005162:	e001      	b.n	8005168 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d017      	beq.n	800519e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005176:	88fa      	ldrh	r2, [r7, #6]
 8005178:	2300      	movs	r3, #0
 800517a:	9303      	str	r3, [sp, #12]
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	9302      	str	r3, [sp, #8]
 8005180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005182:	9301      	str	r3, [sp, #4]
 8005184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f80e 	bl	80051ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005192:	69f8      	ldr	r0, [r7, #28]
 8005194:	f000 f89c 	bl	80052d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005198:	2301      	movs	r3, #1
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	e002      	b.n	80051a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800519e:	f04f 33ff 	mov.w	r3, #4294967295
 80051a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051a4:	69bb      	ldr	r3, [r7, #24]
	}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3720      	adds	r7, #32
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b088      	sub	sp, #32
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
 80051ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	461a      	mov	r2, r3
 80051c6:	21a5      	movs	r1, #165	@ 0xa5
 80051c8:	f001 fe16 	bl	8006df8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051d6:	3b01      	subs	r3, #1
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	f023 0307 	bic.w	r3, r3, #7
 80051e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00b      	beq.n	8005208 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	617b      	str	r3, [r7, #20]
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	e7fd      	b.n	8005204 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d01f      	beq.n	800524e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	e012      	b.n	800523a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	7819      	ldrb	r1, [r3, #0]
 800521c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	4413      	add	r3, r2
 8005222:	3334      	adds	r3, #52	@ 0x34
 8005224:	460a      	mov	r2, r1
 8005226:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d006      	beq.n	8005242 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	3301      	adds	r3, #1
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	2b0f      	cmp	r3, #15
 800523e:	d9e9      	bls.n	8005214 <prvInitialiseNewTask+0x66>
 8005240:	e000      	b.n	8005244 <prvInitialiseNewTask+0x96>
			{
				break;
 8005242:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800524c:	e003      	b.n	8005256 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800524e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005258:	2b37      	cmp	r3, #55	@ 0x37
 800525a:	d901      	bls.n	8005260 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800525c:	2337      	movs	r3, #55	@ 0x37
 800525e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005262:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005264:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800526a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	2200      	movs	r2, #0
 8005270:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	3304      	adds	r3, #4
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff f966 	bl	8004548 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800527c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527e:	3318      	adds	r3, #24
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff f961 	bl	8004548 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800528a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800528c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005294:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800529a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529e:	2200      	movs	r2, #0
 80052a0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	68f9      	ldr	r1, [r7, #12]
 80052ae:	69b8      	ldr	r0, [r7, #24]
 80052b0:	f001 f93e 	bl	8006530 <pxPortInitialiseStack>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052c6:	bf00      	nop
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052d8:	f001 fa5e 	bl	8006798 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005394 <prvAddNewTaskToReadyList+0xc4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3301      	adds	r3, #1
 80052e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005394 <prvAddNewTaskToReadyList+0xc4>)
 80052e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052e6:	4b2c      	ldr	r3, [pc, #176]	@ (8005398 <prvAddNewTaskToReadyList+0xc8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d109      	bne.n	8005302 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005398 <prvAddNewTaskToReadyList+0xc8>)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052f4:	4b27      	ldr	r3, [pc, #156]	@ (8005394 <prvAddNewTaskToReadyList+0xc4>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d110      	bne.n	800531e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052fc:	f000 fc1e 	bl	8005b3c <prvInitialiseTaskLists>
 8005300:	e00d      	b.n	800531e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005302:	4b26      	ldr	r3, [pc, #152]	@ (800539c <prvAddNewTaskToReadyList+0xcc>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800530a:	4b23      	ldr	r3, [pc, #140]	@ (8005398 <prvAddNewTaskToReadyList+0xc8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005314:	429a      	cmp	r2, r3
 8005316:	d802      	bhi.n	800531e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005318:	4a1f      	ldr	r2, [pc, #124]	@ (8005398 <prvAddNewTaskToReadyList+0xc8>)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800531e:	4b20      	ldr	r3, [pc, #128]	@ (80053a0 <prvAddNewTaskToReadyList+0xd0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3301      	adds	r3, #1
 8005324:	4a1e      	ldr	r2, [pc, #120]	@ (80053a0 <prvAddNewTaskToReadyList+0xd0>)
 8005326:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005328:	4b1d      	ldr	r3, [pc, #116]	@ (80053a0 <prvAddNewTaskToReadyList+0xd0>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005334:	4b1b      	ldr	r3, [pc, #108]	@ (80053a4 <prvAddNewTaskToReadyList+0xd4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d903      	bls.n	8005344 <prvAddNewTaskToReadyList+0x74>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005340:	4a18      	ldr	r2, [pc, #96]	@ (80053a4 <prvAddNewTaskToReadyList+0xd4>)
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4a15      	ldr	r2, [pc, #84]	@ (80053a8 <prvAddNewTaskToReadyList+0xd8>)
 8005352:	441a      	add	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3304      	adds	r3, #4
 8005358:	4619      	mov	r1, r3
 800535a:	4610      	mov	r0, r2
 800535c:	f7ff f901 	bl	8004562 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005360:	f001 fa4c 	bl	80067fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005364:	4b0d      	ldr	r3, [pc, #52]	@ (800539c <prvAddNewTaskToReadyList+0xcc>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00e      	beq.n	800538a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800536c:	4b0a      	ldr	r3, [pc, #40]	@ (8005398 <prvAddNewTaskToReadyList+0xc8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005376:	429a      	cmp	r2, r3
 8005378:	d207      	bcs.n	800538a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800537a:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <prvAddNewTaskToReadyList+0xdc>)
 800537c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20001184 	.word	0x20001184
 8005398:	20000cb0 	.word	0x20000cb0
 800539c:	20001190 	.word	0x20001190
 80053a0:	200011a0 	.word	0x200011a0
 80053a4:	2000118c 	.word	0x2000118c
 80053a8:	20000cb4 	.word	0x20000cb4
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d018      	beq.n	80053f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053c2:	4b14      	ldr	r3, [pc, #80]	@ (8005414 <vTaskDelay+0x64>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00b      	beq.n	80053e2 <vTaskDelay+0x32>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	60bb      	str	r3, [r7, #8]
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	e7fd      	b.n	80053de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053e2:	f000 f883 	bl	80054ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053e6:	2100      	movs	r1, #0
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fcf3 	bl	8005dd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053ee:	f000 f88b 	bl	8005508 <xTaskResumeAll>
 80053f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d107      	bne.n	800540a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80053fa:	4b07      	ldr	r3, [pc, #28]	@ (8005418 <vTaskDelay+0x68>)
 80053fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	200011ac 	.word	0x200011ac
 8005418:	e000ed04 	.word	0xe000ed04

0800541c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	@ 0x28
 8005420:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005426:	2300      	movs	r3, #0
 8005428:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800542a:	463a      	mov	r2, r7
 800542c:	1d39      	adds	r1, r7, #4
 800542e:	f107 0308 	add.w	r3, r7, #8
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff f834 	bl	80044a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005438:	6839      	ldr	r1, [r7, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	9202      	str	r2, [sp, #8]
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	2300      	movs	r3, #0
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	2300      	movs	r3, #0
 8005448:	460a      	mov	r2, r1
 800544a:	4922      	ldr	r1, [pc, #136]	@ (80054d4 <vTaskStartScheduler+0xb8>)
 800544c:	4822      	ldr	r0, [pc, #136]	@ (80054d8 <vTaskStartScheduler+0xbc>)
 800544e:	f7ff fe09 	bl	8005064 <xTaskCreateStatic>
 8005452:	4603      	mov	r3, r0
 8005454:	4a21      	ldr	r2, [pc, #132]	@ (80054dc <vTaskStartScheduler+0xc0>)
 8005456:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005458:	4b20      	ldr	r3, [pc, #128]	@ (80054dc <vTaskStartScheduler+0xc0>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005460:	2301      	movs	r3, #1
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e001      	b.n	800546a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d102      	bne.n	8005476 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005470:	f000 fd04 	bl	8005e7c <xTimerCreateTimerTask>
 8005474:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d116      	bne.n	80054aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	613b      	str	r3, [r7, #16]
}
 800548e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005490:	4b13      	ldr	r3, [pc, #76]	@ (80054e0 <vTaskStartScheduler+0xc4>)
 8005492:	f04f 32ff 	mov.w	r2, #4294967295
 8005496:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005498:	4b12      	ldr	r3, [pc, #72]	@ (80054e4 <vTaskStartScheduler+0xc8>)
 800549a:	2201      	movs	r2, #1
 800549c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800549e:	4b12      	ldr	r3, [pc, #72]	@ (80054e8 <vTaskStartScheduler+0xcc>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054a4:	f001 f8d4 	bl	8006650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054a8:	e00f      	b.n	80054ca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b0:	d10b      	bne.n	80054ca <vTaskStartScheduler+0xae>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	60fb      	str	r3, [r7, #12]
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	e7fd      	b.n	80054c6 <vTaskStartScheduler+0xaa>
}
 80054ca:	bf00      	nop
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	08007798 	.word	0x08007798
 80054d8:	08005b0d 	.word	0x08005b0d
 80054dc:	200011a8 	.word	0x200011a8
 80054e0:	200011a4 	.word	0x200011a4
 80054e4:	20001190 	.word	0x20001190
 80054e8:	20001188 	.word	0x20001188

080054ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054f0:	4b04      	ldr	r3, [pc, #16]	@ (8005504 <vTaskSuspendAll+0x18>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3301      	adds	r3, #1
 80054f6:	4a03      	ldr	r2, [pc, #12]	@ (8005504 <vTaskSuspendAll+0x18>)
 80054f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054fa:	bf00      	nop
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	200011ac 	.word	0x200011ac

08005508 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005512:	2300      	movs	r3, #0
 8005514:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005516:	4b42      	ldr	r3, [pc, #264]	@ (8005620 <xTaskResumeAll+0x118>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10b      	bne.n	8005536 <xTaskResumeAll+0x2e>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	603b      	str	r3, [r7, #0]
}
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	e7fd      	b.n	8005532 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005536:	f001 f92f 	bl	8006798 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800553a:	4b39      	ldr	r3, [pc, #228]	@ (8005620 <xTaskResumeAll+0x118>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3b01      	subs	r3, #1
 8005540:	4a37      	ldr	r2, [pc, #220]	@ (8005620 <xTaskResumeAll+0x118>)
 8005542:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005544:	4b36      	ldr	r3, [pc, #216]	@ (8005620 <xTaskResumeAll+0x118>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d162      	bne.n	8005612 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800554c:	4b35      	ldr	r3, [pc, #212]	@ (8005624 <xTaskResumeAll+0x11c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d05e      	beq.n	8005612 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005554:	e02f      	b.n	80055b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005556:	4b34      	ldr	r3, [pc, #208]	@ (8005628 <xTaskResumeAll+0x120>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3318      	adds	r3, #24
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff f85a 	bl	800461c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3304      	adds	r3, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff f855 	bl	800461c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005576:	4b2d      	ldr	r3, [pc, #180]	@ (800562c <xTaskResumeAll+0x124>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d903      	bls.n	8005586 <xTaskResumeAll+0x7e>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005582:	4a2a      	ldr	r2, [pc, #168]	@ (800562c <xTaskResumeAll+0x124>)
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558a:	4613      	mov	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4a27      	ldr	r2, [pc, #156]	@ (8005630 <xTaskResumeAll+0x128>)
 8005594:	441a      	add	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3304      	adds	r3, #4
 800559a:	4619      	mov	r1, r3
 800559c:	4610      	mov	r0, r2
 800559e:	f7fe ffe0 	bl	8004562 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a6:	4b23      	ldr	r3, [pc, #140]	@ (8005634 <xTaskResumeAll+0x12c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d302      	bcc.n	80055b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80055b0:	4b21      	ldr	r3, [pc, #132]	@ (8005638 <xTaskResumeAll+0x130>)
 80055b2:	2201      	movs	r2, #1
 80055b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005628 <xTaskResumeAll+0x120>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1cb      	bne.n	8005556 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055c4:	f000 fb58 	bl	8005c78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055c8:	4b1c      	ldr	r3, [pc, #112]	@ (800563c <xTaskResumeAll+0x134>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d010      	beq.n	80055f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055d4:	f000 f846 	bl	8005664 <xTaskIncrementTick>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80055de:	4b16      	ldr	r3, [pc, #88]	@ (8005638 <xTaskResumeAll+0x130>)
 80055e0:	2201      	movs	r2, #1
 80055e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1f1      	bne.n	80055d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80055f0:	4b12      	ldr	r3, [pc, #72]	@ (800563c <xTaskResumeAll+0x134>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055f6:	4b10      	ldr	r3, [pc, #64]	@ (8005638 <xTaskResumeAll+0x130>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055fe:	2301      	movs	r3, #1
 8005600:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005602:	4b0f      	ldr	r3, [pc, #60]	@ (8005640 <xTaskResumeAll+0x138>)
 8005604:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005612:	f001 f8f3 	bl	80067fc <vPortExitCritical>

	return xAlreadyYielded;
 8005616:	68bb      	ldr	r3, [r7, #8]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	200011ac 	.word	0x200011ac
 8005624:	20001184 	.word	0x20001184
 8005628:	20001144 	.word	0x20001144
 800562c:	2000118c 	.word	0x2000118c
 8005630:	20000cb4 	.word	0x20000cb4
 8005634:	20000cb0 	.word	0x20000cb0
 8005638:	20001198 	.word	0x20001198
 800563c:	20001194 	.word	0x20001194
 8005640:	e000ed04 	.word	0xe000ed04

08005644 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800564a:	4b05      	ldr	r3, [pc, #20]	@ (8005660 <xTaskGetTickCount+0x1c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005650:	687b      	ldr	r3, [r7, #4]
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	20001188 	.word	0x20001188

08005664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800566e:	4b4f      	ldr	r3, [pc, #316]	@ (80057ac <xTaskIncrementTick+0x148>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f040 8090 	bne.w	8005798 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005678:	4b4d      	ldr	r3, [pc, #308]	@ (80057b0 <xTaskIncrementTick+0x14c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3301      	adds	r3, #1
 800567e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005680:	4a4b      	ldr	r2, [pc, #300]	@ (80057b0 <xTaskIncrementTick+0x14c>)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d121      	bne.n	80056d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800568c:	4b49      	ldr	r3, [pc, #292]	@ (80057b4 <xTaskIncrementTick+0x150>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	603b      	str	r3, [r7, #0]
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	e7fd      	b.n	80056aa <xTaskIncrementTick+0x46>
 80056ae:	4b41      	ldr	r3, [pc, #260]	@ (80057b4 <xTaskIncrementTick+0x150>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	4b40      	ldr	r3, [pc, #256]	@ (80057b8 <xTaskIncrementTick+0x154>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a3e      	ldr	r2, [pc, #248]	@ (80057b4 <xTaskIncrementTick+0x150>)
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	4a3e      	ldr	r2, [pc, #248]	@ (80057b8 <xTaskIncrementTick+0x154>)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	4b3e      	ldr	r3, [pc, #248]	@ (80057bc <xTaskIncrementTick+0x158>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3301      	adds	r3, #1
 80056c8:	4a3c      	ldr	r2, [pc, #240]	@ (80057bc <xTaskIncrementTick+0x158>)
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	f000 fad4 	bl	8005c78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056d0:	4b3b      	ldr	r3, [pc, #236]	@ (80057c0 <xTaskIncrementTick+0x15c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d349      	bcc.n	800576e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056da:	4b36      	ldr	r3, [pc, #216]	@ (80057b4 <xTaskIncrementTick+0x150>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056e4:	4b36      	ldr	r3, [pc, #216]	@ (80057c0 <xTaskIncrementTick+0x15c>)
 80056e6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ea:	601a      	str	r2, [r3, #0]
					break;
 80056ec:	e03f      	b.n	800576e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ee:	4b31      	ldr	r3, [pc, #196]	@ (80057b4 <xTaskIncrementTick+0x150>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	429a      	cmp	r2, r3
 8005704:	d203      	bcs.n	800570e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005706:	4a2e      	ldr	r2, [pc, #184]	@ (80057c0 <xTaskIncrementTick+0x15c>)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800570c:	e02f      	b.n	800576e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	3304      	adds	r3, #4
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe ff82 	bl	800461c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	3318      	adds	r3, #24
 8005724:	4618      	mov	r0, r3
 8005726:	f7fe ff79 	bl	800461c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800572e:	4b25      	ldr	r3, [pc, #148]	@ (80057c4 <xTaskIncrementTick+0x160>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d903      	bls.n	800573e <xTaskIncrementTick+0xda>
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573a:	4a22      	ldr	r2, [pc, #136]	@ (80057c4 <xTaskIncrementTick+0x160>)
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005742:	4613      	mov	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4a1f      	ldr	r2, [pc, #124]	@ (80057c8 <xTaskIncrementTick+0x164>)
 800574c:	441a      	add	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	3304      	adds	r3, #4
 8005752:	4619      	mov	r1, r3
 8005754:	4610      	mov	r0, r2
 8005756:	f7fe ff04 	bl	8004562 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575e:	4b1b      	ldr	r3, [pc, #108]	@ (80057cc <xTaskIncrementTick+0x168>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005764:	429a      	cmp	r2, r3
 8005766:	d3b8      	bcc.n	80056da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005768:	2301      	movs	r3, #1
 800576a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800576c:	e7b5      	b.n	80056da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800576e:	4b17      	ldr	r3, [pc, #92]	@ (80057cc <xTaskIncrementTick+0x168>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005774:	4914      	ldr	r1, [pc, #80]	@ (80057c8 <xTaskIncrementTick+0x164>)
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d901      	bls.n	800578a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005786:	2301      	movs	r3, #1
 8005788:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800578a:	4b11      	ldr	r3, [pc, #68]	@ (80057d0 <xTaskIncrementTick+0x16c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d007      	beq.n	80057a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005792:	2301      	movs	r3, #1
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e004      	b.n	80057a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005798:	4b0e      	ldr	r3, [pc, #56]	@ (80057d4 <xTaskIncrementTick+0x170>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3301      	adds	r3, #1
 800579e:	4a0d      	ldr	r2, [pc, #52]	@ (80057d4 <xTaskIncrementTick+0x170>)
 80057a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057a2:	697b      	ldr	r3, [r7, #20]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	200011ac 	.word	0x200011ac
 80057b0:	20001188 	.word	0x20001188
 80057b4:	2000113c 	.word	0x2000113c
 80057b8:	20001140 	.word	0x20001140
 80057bc:	2000119c 	.word	0x2000119c
 80057c0:	200011a4 	.word	0x200011a4
 80057c4:	2000118c 	.word	0x2000118c
 80057c8:	20000cb4 	.word	0x20000cb4
 80057cc:	20000cb0 	.word	0x20000cb0
 80057d0:	20001198 	.word	0x20001198
 80057d4:	20001194 	.word	0x20001194

080057d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057de:	4b28      	ldr	r3, [pc, #160]	@ (8005880 <vTaskSwitchContext+0xa8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057e6:	4b27      	ldr	r3, [pc, #156]	@ (8005884 <vTaskSwitchContext+0xac>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057ec:	e042      	b.n	8005874 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80057ee:	4b25      	ldr	r3, [pc, #148]	@ (8005884 <vTaskSwitchContext+0xac>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f4:	4b24      	ldr	r3, [pc, #144]	@ (8005888 <vTaskSwitchContext+0xb0>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	e011      	b.n	8005820 <vTaskSwitchContext+0x48>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10b      	bne.n	800581a <vTaskSwitchContext+0x42>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	607b      	str	r3, [r7, #4]
}
 8005814:	bf00      	nop
 8005816:	bf00      	nop
 8005818:	e7fd      	b.n	8005816 <vTaskSwitchContext+0x3e>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3b01      	subs	r3, #1
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	491a      	ldr	r1, [pc, #104]	@ (800588c <vTaskSwitchContext+0xb4>)
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0e3      	beq.n	80057fc <vTaskSwitchContext+0x24>
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4613      	mov	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4a13      	ldr	r2, [pc, #76]	@ (800588c <vTaskSwitchContext+0xb4>)
 8005840:	4413      	add	r3, r2
 8005842:	60bb      	str	r3, [r7, #8]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	605a      	str	r2, [r3, #4]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	3308      	adds	r3, #8
 8005856:	429a      	cmp	r2, r3
 8005858:	d104      	bne.n	8005864 <vTaskSwitchContext+0x8c>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	605a      	str	r2, [r3, #4]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	4a09      	ldr	r2, [pc, #36]	@ (8005890 <vTaskSwitchContext+0xb8>)
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	4a06      	ldr	r2, [pc, #24]	@ (8005888 <vTaskSwitchContext+0xb0>)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6013      	str	r3, [r2, #0]
}
 8005874:	bf00      	nop
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	200011ac 	.word	0x200011ac
 8005884:	20001198 	.word	0x20001198
 8005888:	2000118c 	.word	0x2000118c
 800588c:	20000cb4 	.word	0x20000cb4
 8005890:	20000cb0 	.word	0x20000cb0

08005894 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10b      	bne.n	80058bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	60fb      	str	r3, [r7, #12]
}
 80058b6:	bf00      	nop
 80058b8:	bf00      	nop
 80058ba:	e7fd      	b.n	80058b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058bc:	4b07      	ldr	r3, [pc, #28]	@ (80058dc <vTaskPlaceOnEventList+0x48>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3318      	adds	r3, #24
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7fe fe70 	bl	80045aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058ca:	2101      	movs	r1, #1
 80058cc:	6838      	ldr	r0, [r7, #0]
 80058ce:	f000 fa81 	bl	8005dd4 <prvAddCurrentTaskToDelayedList>
}
 80058d2:	bf00      	nop
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000cb0 	.word	0x20000cb0

080058e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10b      	bne.n	800590a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	617b      	str	r3, [r7, #20]
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	e7fd      	b.n	8005906 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800590a:	4b0a      	ldr	r3, [pc, #40]	@ (8005934 <vTaskPlaceOnEventListRestricted+0x54>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3318      	adds	r3, #24
 8005910:	4619      	mov	r1, r3
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f7fe fe25 	bl	8004562 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	68b8      	ldr	r0, [r7, #8]
 8005928:	f000 fa54 	bl	8005dd4 <prvAddCurrentTaskToDelayedList>
	}
 800592c:	bf00      	nop
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20000cb0 	.word	0x20000cb0

08005938 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10b      	bne.n	8005966 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	60fb      	str	r3, [r7, #12]
}
 8005960:	bf00      	nop
 8005962:	bf00      	nop
 8005964:	e7fd      	b.n	8005962 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	3318      	adds	r3, #24
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe fe56 	bl	800461c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005970:	4b1d      	ldr	r3, [pc, #116]	@ (80059e8 <xTaskRemoveFromEventList+0xb0>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d11d      	bne.n	80059b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	3304      	adds	r3, #4
 800597c:	4618      	mov	r0, r3
 800597e:	f7fe fe4d 	bl	800461c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005986:	4b19      	ldr	r3, [pc, #100]	@ (80059ec <xTaskRemoveFromEventList+0xb4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d903      	bls.n	8005996 <xTaskRemoveFromEventList+0x5e>
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005992:	4a16      	ldr	r2, [pc, #88]	@ (80059ec <xTaskRemoveFromEventList+0xb4>)
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4a13      	ldr	r2, [pc, #76]	@ (80059f0 <xTaskRemoveFromEventList+0xb8>)
 80059a4:	441a      	add	r2, r3
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	3304      	adds	r3, #4
 80059aa:	4619      	mov	r1, r3
 80059ac:	4610      	mov	r0, r2
 80059ae:	f7fe fdd8 	bl	8004562 <vListInsertEnd>
 80059b2:	e005      	b.n	80059c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	3318      	adds	r3, #24
 80059b8:	4619      	mov	r1, r3
 80059ba:	480e      	ldr	r0, [pc, #56]	@ (80059f4 <xTaskRemoveFromEventList+0xbc>)
 80059bc:	f7fe fdd1 	bl	8004562 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c4:	4b0c      	ldr	r3, [pc, #48]	@ (80059f8 <xTaskRemoveFromEventList+0xc0>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d905      	bls.n	80059da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059ce:	2301      	movs	r3, #1
 80059d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059d2:	4b0a      	ldr	r3, [pc, #40]	@ (80059fc <xTaskRemoveFromEventList+0xc4>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	e001      	b.n	80059de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059de:	697b      	ldr	r3, [r7, #20]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	200011ac 	.word	0x200011ac
 80059ec:	2000118c 	.word	0x2000118c
 80059f0:	20000cb4 	.word	0x20000cb4
 80059f4:	20001144 	.word	0x20001144
 80059f8:	20000cb0 	.word	0x20000cb0
 80059fc:	20001198 	.word	0x20001198

08005a00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a08:	4b06      	ldr	r3, [pc, #24]	@ (8005a24 <vTaskInternalSetTimeOutState+0x24>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a10:	4b05      	ldr	r3, [pc, #20]	@ (8005a28 <vTaskInternalSetTimeOutState+0x28>)
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	605a      	str	r2, [r3, #4]
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	2000119c 	.word	0x2000119c
 8005a28:	20001188 	.word	0x20001188

08005a2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10b      	bne.n	8005a54 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	613b      	str	r3, [r7, #16]
}
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
 8005a52:	e7fd      	b.n	8005a50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10b      	bne.n	8005a72 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	60fb      	str	r3, [r7, #12]
}
 8005a6c:	bf00      	nop
 8005a6e:	bf00      	nop
 8005a70:	e7fd      	b.n	8005a6e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005a72:	f000 fe91 	bl	8006798 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a76:	4b1d      	ldr	r3, [pc, #116]	@ (8005aec <xTaskCheckForTimeOut+0xc0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8e:	d102      	bne.n	8005a96 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61fb      	str	r3, [r7, #28]
 8005a94:	e023      	b.n	8005ade <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	4b15      	ldr	r3, [pc, #84]	@ (8005af0 <xTaskCheckForTimeOut+0xc4>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d007      	beq.n	8005ab2 <xTaskCheckForTimeOut+0x86>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d302      	bcc.n	8005ab2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005aac:	2301      	movs	r3, #1
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	e015      	b.n	8005ade <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d20b      	bcs.n	8005ad4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	1ad2      	subs	r2, r2, r3
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff ff99 	bl	8005a00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	e004      	b.n	8005ade <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ada:	2301      	movs	r3, #1
 8005adc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ade:	f000 fe8d 	bl	80067fc <vPortExitCritical>

	return xReturn;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	20001188 	.word	0x20001188
 8005af0:	2000119c 	.word	0x2000119c

08005af4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005af8:	4b03      	ldr	r3, [pc, #12]	@ (8005b08 <vTaskMissedYield+0x14>)
 8005afa:	2201      	movs	r2, #1
 8005afc:	601a      	str	r2, [r3, #0]
}
 8005afe:	bf00      	nop
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	20001198 	.word	0x20001198

08005b0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b14:	f000 f852 	bl	8005bbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b18:	4b06      	ldr	r3, [pc, #24]	@ (8005b34 <prvIdleTask+0x28>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d9f9      	bls.n	8005b14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b20:	4b05      	ldr	r3, [pc, #20]	@ (8005b38 <prvIdleTask+0x2c>)
 8005b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b30:	e7f0      	b.n	8005b14 <prvIdleTask+0x8>
 8005b32:	bf00      	nop
 8005b34:	20000cb4 	.word	0x20000cb4
 8005b38:	e000ed04 	.word	0xe000ed04

08005b3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b42:	2300      	movs	r3, #0
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	e00c      	b.n	8005b62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4a12      	ldr	r2, [pc, #72]	@ (8005b9c <prvInitialiseTaskLists+0x60>)
 8005b54:	4413      	add	r3, r2
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fcd6 	bl	8004508 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	607b      	str	r3, [r7, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b37      	cmp	r3, #55	@ 0x37
 8005b66:	d9ef      	bls.n	8005b48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b68:	480d      	ldr	r0, [pc, #52]	@ (8005ba0 <prvInitialiseTaskLists+0x64>)
 8005b6a:	f7fe fccd 	bl	8004508 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b6e:	480d      	ldr	r0, [pc, #52]	@ (8005ba4 <prvInitialiseTaskLists+0x68>)
 8005b70:	f7fe fcca 	bl	8004508 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b74:	480c      	ldr	r0, [pc, #48]	@ (8005ba8 <prvInitialiseTaskLists+0x6c>)
 8005b76:	f7fe fcc7 	bl	8004508 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b7a:	480c      	ldr	r0, [pc, #48]	@ (8005bac <prvInitialiseTaskLists+0x70>)
 8005b7c:	f7fe fcc4 	bl	8004508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b80:	480b      	ldr	r0, [pc, #44]	@ (8005bb0 <prvInitialiseTaskLists+0x74>)
 8005b82:	f7fe fcc1 	bl	8004508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b86:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <prvInitialiseTaskLists+0x78>)
 8005b88:	4a05      	ldr	r2, [pc, #20]	@ (8005ba0 <prvInitialiseTaskLists+0x64>)
 8005b8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb8 <prvInitialiseTaskLists+0x7c>)
 8005b8e:	4a05      	ldr	r2, [pc, #20]	@ (8005ba4 <prvInitialiseTaskLists+0x68>)
 8005b90:	601a      	str	r2, [r3, #0]
}
 8005b92:	bf00      	nop
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000cb4 	.word	0x20000cb4
 8005ba0:	20001114 	.word	0x20001114
 8005ba4:	20001128 	.word	0x20001128
 8005ba8:	20001144 	.word	0x20001144
 8005bac:	20001158 	.word	0x20001158
 8005bb0:	20001170 	.word	0x20001170
 8005bb4:	2000113c 	.word	0x2000113c
 8005bb8:	20001140 	.word	0x20001140

08005bbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bc2:	e019      	b.n	8005bf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bc4:	f000 fde8 	bl	8006798 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc8:	4b10      	ldr	r3, [pc, #64]	@ (8005c0c <prvCheckTasksWaitingTermination+0x50>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fe fd21 	bl	800461c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bda:	4b0d      	ldr	r3, [pc, #52]	@ (8005c10 <prvCheckTasksWaitingTermination+0x54>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	4a0b      	ldr	r2, [pc, #44]	@ (8005c10 <prvCheckTasksWaitingTermination+0x54>)
 8005be2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005be4:	4b0b      	ldr	r3, [pc, #44]	@ (8005c14 <prvCheckTasksWaitingTermination+0x58>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	4a0a      	ldr	r2, [pc, #40]	@ (8005c14 <prvCheckTasksWaitingTermination+0x58>)
 8005bec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bee:	f000 fe05 	bl	80067fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f810 	bl	8005c18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bf8:	4b06      	ldr	r3, [pc, #24]	@ (8005c14 <prvCheckTasksWaitingTermination+0x58>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e1      	bne.n	8005bc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c00:	bf00      	nop
 8005c02:	bf00      	nop
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20001158 	.word	0x20001158
 8005c10:	20001184 	.word	0x20001184
 8005c14:	2000116c 	.word	0x2000116c

08005c18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d108      	bne.n	8005c3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 ffa2 	bl	8006b78 <vPortFree>
				vPortFree( pxTCB );
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 ff9f 	bl	8006b78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c3a:	e019      	b.n	8005c70 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d103      	bne.n	8005c4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 ff96 	bl	8006b78 <vPortFree>
	}
 8005c4c:	e010      	b.n	8005c70 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d00b      	beq.n	8005c70 <prvDeleteTCB+0x58>
	__asm volatile
 8005c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	60fb      	str	r3, [r7, #12]
}
 8005c6a:	bf00      	nop
 8005c6c:	bf00      	nop
 8005c6e:	e7fd      	b.n	8005c6c <prvDeleteTCB+0x54>
	}
 8005c70:	bf00      	nop
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb0 <prvResetNextTaskUnblockTime+0x38>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d104      	bne.n	8005c92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c88:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8005c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c90:	e008      	b.n	8005ca4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c92:	4b07      	ldr	r3, [pc, #28]	@ (8005cb0 <prvResetNextTaskUnblockTime+0x38>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4a04      	ldr	r2, [pc, #16]	@ (8005cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8005ca2:	6013      	str	r3, [r2, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	2000113c 	.word	0x2000113c
 8005cb4:	200011a4 	.word	0x200011a4

08005cb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8005cec <xTaskGetSchedulerState+0x34>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	607b      	str	r3, [r7, #4]
 8005cca:	e008      	b.n	8005cde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ccc:	4b08      	ldr	r3, [pc, #32]	@ (8005cf0 <xTaskGetSchedulerState+0x38>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d102      	bne.n	8005cda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	607b      	str	r3, [r7, #4]
 8005cd8:	e001      	b.n	8005cde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cde:	687b      	ldr	r3, [r7, #4]
	}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	20001190 	.word	0x20001190
 8005cf0:	200011ac 	.word	0x200011ac

08005cf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d058      	beq.n	8005dbc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005dc8 <xTaskPriorityDisinherit+0xd4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d00b      	beq.n	8005d2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	60fb      	str	r3, [r7, #12]
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	e7fd      	b.n	8005d28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10b      	bne.n	8005d4c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	60bb      	str	r3, [r7, #8]
}
 8005d46:	bf00      	nop
 8005d48:	bf00      	nop
 8005d4a:	e7fd      	b.n	8005d48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d50:	1e5a      	subs	r2, r3, #1
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d02c      	beq.n	8005dbc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d128      	bne.n	8005dbc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fe fc54 	bl	800461c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005dcc <xTaskPriorityDisinherit+0xd8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d903      	bls.n	8005d9c <xTaskPriorityDisinherit+0xa8>
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d98:	4a0c      	ldr	r2, [pc, #48]	@ (8005dcc <xTaskPriorityDisinherit+0xd8>)
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4a09      	ldr	r2, [pc, #36]	@ (8005dd0 <xTaskPriorityDisinherit+0xdc>)
 8005daa:	441a      	add	r2, r3
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4619      	mov	r1, r3
 8005db2:	4610      	mov	r0, r2
 8005db4:	f7fe fbd5 	bl	8004562 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005dbc:	697b      	ldr	r3, [r7, #20]
	}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000cb0 	.word	0x20000cb0
 8005dcc:	2000118c 	.word	0x2000118c
 8005dd0:	20000cb4 	.word	0x20000cb4

08005dd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005dde:	4b21      	ldr	r3, [pc, #132]	@ (8005e64 <prvAddCurrentTaskToDelayedList+0x90>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005de4:	4b20      	ldr	r3, [pc, #128]	@ (8005e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3304      	adds	r3, #4
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fe fc16 	bl	800461c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d10a      	bne.n	8005e0e <prvAddCurrentTaskToDelayedList+0x3a>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d007      	beq.n	8005e0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8005e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4619      	mov	r1, r3
 8005e06:	4819      	ldr	r0, [pc, #100]	@ (8005e6c <prvAddCurrentTaskToDelayedList+0x98>)
 8005e08:	f7fe fbab 	bl	8004562 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e0c:	e026      	b.n	8005e5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4413      	add	r3, r2
 8005e14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e16:	4b14      	ldr	r3, [pc, #80]	@ (8005e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d209      	bcs.n	8005e3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e26:	4b12      	ldr	r3, [pc, #72]	@ (8005e70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	4619      	mov	r1, r3
 8005e32:	4610      	mov	r0, r2
 8005e34:	f7fe fbb9 	bl	80045aa <vListInsert>
}
 8005e38:	e010      	b.n	8005e5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e68 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4619      	mov	r1, r3
 8005e46:	4610      	mov	r0, r2
 8005e48:	f7fe fbaf 	bl	80045aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d202      	bcs.n	8005e5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e56:	4a08      	ldr	r2, [pc, #32]	@ (8005e78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	6013      	str	r3, [r2, #0]
}
 8005e5c:	bf00      	nop
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20001188 	.word	0x20001188
 8005e68:	20000cb0 	.word	0x20000cb0
 8005e6c:	20001170 	.word	0x20001170
 8005e70:	20001140 	.word	0x20001140
 8005e74:	2000113c 	.word	0x2000113c
 8005e78:	200011a4 	.word	0x200011a4

08005e7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08a      	sub	sp, #40	@ 0x28
 8005e80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e86:	f000 fb13 	bl	80064b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8005f00 <xTimerCreateTimerTask+0x84>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d021      	beq.n	8005ed6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e9a:	1d3a      	adds	r2, r7, #4
 8005e9c:	f107 0108 	add.w	r1, r7, #8
 8005ea0:	f107 030c 	add.w	r3, r7, #12
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fe fb15 	bl	80044d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	9202      	str	r2, [sp, #8]
 8005eb2:	9301      	str	r3, [sp, #4]
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	2300      	movs	r3, #0
 8005eba:	460a      	mov	r2, r1
 8005ebc:	4911      	ldr	r1, [pc, #68]	@ (8005f04 <xTimerCreateTimerTask+0x88>)
 8005ebe:	4812      	ldr	r0, [pc, #72]	@ (8005f08 <xTimerCreateTimerTask+0x8c>)
 8005ec0:	f7ff f8d0 	bl	8005064 <xTaskCreateStatic>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	4a11      	ldr	r2, [pc, #68]	@ (8005f0c <xTimerCreateTimerTask+0x90>)
 8005ec8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005eca:	4b10      	ldr	r3, [pc, #64]	@ (8005f0c <xTimerCreateTimerTask+0x90>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10b      	bne.n	8005ef4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	613b      	str	r3, [r7, #16]
}
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	e7fd      	b.n	8005ef0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ef4:	697b      	ldr	r3, [r7, #20]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	200011e0 	.word	0x200011e0
 8005f04:	080077a0 	.word	0x080077a0
 8005f08:	08006049 	.word	0x08006049
 8005f0c:	200011e4 	.word	0x200011e4

08005f10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	@ 0x28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10b      	bne.n	8005f40 <xTimerGenericCommand+0x30>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	623b      	str	r3, [r7, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	bf00      	nop
 8005f3e:	e7fd      	b.n	8005f3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f40:	4b19      	ldr	r3, [pc, #100]	@ (8005fa8 <xTimerGenericCommand+0x98>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d02a      	beq.n	8005f9e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b05      	cmp	r3, #5
 8005f58:	dc18      	bgt.n	8005f8c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f5a:	f7ff fead 	bl	8005cb8 <xTaskGetSchedulerState>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d109      	bne.n	8005f78 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f64:	4b10      	ldr	r3, [pc, #64]	@ (8005fa8 <xTimerGenericCommand+0x98>)
 8005f66:	6818      	ldr	r0, [r3, #0]
 8005f68:	f107 0110 	add.w	r1, r7, #16
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f70:	f7fe fc88 	bl	8004884 <xQueueGenericSend>
 8005f74:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f76:	e012      	b.n	8005f9e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f78:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa8 <xTimerGenericCommand+0x98>)
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	f107 0110 	add.w	r1, r7, #16
 8005f80:	2300      	movs	r3, #0
 8005f82:	2200      	movs	r2, #0
 8005f84:	f7fe fc7e 	bl	8004884 <xQueueGenericSend>
 8005f88:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f8a:	e008      	b.n	8005f9e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f8c:	4b06      	ldr	r3, [pc, #24]	@ (8005fa8 <xTimerGenericCommand+0x98>)
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	f107 0110 	add.w	r1, r7, #16
 8005f94:	2300      	movs	r3, #0
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	f7fe fd76 	bl	8004a88 <xQueueGenericSendFromISR>
 8005f9c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3728      	adds	r7, #40	@ 0x28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	200011e0 	.word	0x200011e0

08005fac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb6:	4b23      	ldr	r3, [pc, #140]	@ (8006044 <prvProcessExpiredTimer+0x98>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fe fb29 	bl	800461c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d023      	beq.n	8006020 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	699a      	ldr	r2, [r3, #24]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	18d1      	adds	r1, r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	6978      	ldr	r0, [r7, #20]
 8005fe6:	f000 f8d5 	bl	8006194 <prvInsertTimerInActiveList>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d020      	beq.n	8006032 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	6978      	ldr	r0, [r7, #20]
 8005ffc:	f7ff ff88 	bl	8005f10 <xTimerGenericCommand>
 8006000:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d114      	bne.n	8006032 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	60fb      	str	r3, [r7, #12]
}
 800601a:	bf00      	nop
 800601c:	bf00      	nop
 800601e:	e7fd      	b.n	800601c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006026:	f023 0301 	bic.w	r3, r3, #1
 800602a:	b2da      	uxtb	r2, r3
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	6978      	ldr	r0, [r7, #20]
 8006038:	4798      	blx	r3
}
 800603a:	bf00      	nop
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	200011d8 	.word	0x200011d8

08006048 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006050:	f107 0308 	add.w	r3, r7, #8
 8006054:	4618      	mov	r0, r3
 8006056:	f000 f859 	bl	800610c <prvGetNextExpireTime>
 800605a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	4619      	mov	r1, r3
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 f805 	bl	8006070 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006066:	f000 f8d7 	bl	8006218 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800606a:	bf00      	nop
 800606c:	e7f0      	b.n	8006050 <prvTimerTask+0x8>
	...

08006070 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800607a:	f7ff fa37 	bl	80054ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800607e:	f107 0308 	add.w	r3, r7, #8
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f866 	bl	8006154 <prvSampleTimeNow>
 8006088:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d130      	bne.n	80060f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <prvProcessTimerOrBlockTask+0x3c>
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	429a      	cmp	r2, r3
 800609c:	d806      	bhi.n	80060ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800609e:	f7ff fa33 	bl	8005508 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060a2:	68f9      	ldr	r1, [r7, #12]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff ff81 	bl	8005fac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80060aa:	e024      	b.n	80060f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d008      	beq.n	80060c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060b2:	4b13      	ldr	r3, [pc, #76]	@ (8006100 <prvProcessTimerOrBlockTask+0x90>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <prvProcessTimerOrBlockTask+0x50>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <prvProcessTimerOrBlockTask+0x52>
 80060c0:	2300      	movs	r3, #0
 80060c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006104 <prvProcessTimerOrBlockTask+0x94>)
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	4619      	mov	r1, r3
 80060d2:	f7fe ff93 	bl	8004ffc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060d6:	f7ff fa17 	bl	8005508 <xTaskResumeAll>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060e0:	4b09      	ldr	r3, [pc, #36]	@ (8006108 <prvProcessTimerOrBlockTask+0x98>)
 80060e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	f3bf 8f6f 	isb	sy
}
 80060f0:	e001      	b.n	80060f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060f2:	f7ff fa09 	bl	8005508 <xTaskResumeAll>
}
 80060f6:	bf00      	nop
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	200011dc 	.word	0x200011dc
 8006104:	200011e0 	.word	0x200011e0
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006114:	4b0e      	ldr	r3, [pc, #56]	@ (8006150 <prvGetNextExpireTime+0x44>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <prvGetNextExpireTime+0x16>
 800611e:	2201      	movs	r2, #1
 8006120:	e000      	b.n	8006124 <prvGetNextExpireTime+0x18>
 8006122:	2200      	movs	r2, #0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d105      	bne.n	800613c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006130:	4b07      	ldr	r3, [pc, #28]	@ (8006150 <prvGetNextExpireTime+0x44>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	e001      	b.n	8006140 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006140:	68fb      	ldr	r3, [r7, #12]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	200011d8 	.word	0x200011d8

08006154 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800615c:	f7ff fa72 	bl	8005644 <xTaskGetTickCount>
 8006160:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006162:	4b0b      	ldr	r3, [pc, #44]	@ (8006190 <prvSampleTimeNow+0x3c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	429a      	cmp	r2, r3
 800616a:	d205      	bcs.n	8006178 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800616c:	f000 f93a 	bl	80063e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e002      	b.n	800617e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800617e:	4a04      	ldr	r2, [pc, #16]	@ (8006190 <prvSampleTimeNow+0x3c>)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006184:	68fb      	ldr	r3, [r7, #12]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	200011e8 	.word	0x200011e8

08006194 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80061a2:	2300      	movs	r3, #0
 80061a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d812      	bhi.n	80061e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	1ad2      	subs	r2, r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d302      	bcc.n	80061ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80061c8:	2301      	movs	r3, #1
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	e01b      	b.n	8006206 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061ce:	4b10      	ldr	r3, [pc, #64]	@ (8006210 <prvInsertTimerInActiveList+0x7c>)
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3304      	adds	r3, #4
 80061d6:	4619      	mov	r1, r3
 80061d8:	4610      	mov	r0, r2
 80061da:	f7fe f9e6 	bl	80045aa <vListInsert>
 80061de:	e012      	b.n	8006206 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d206      	bcs.n	80061f6 <prvInsertTimerInActiveList+0x62>
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d302      	bcc.n	80061f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061f0:	2301      	movs	r3, #1
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	e007      	b.n	8006206 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061f6:	4b07      	ldr	r3, [pc, #28]	@ (8006214 <prvInsertTimerInActiveList+0x80>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3304      	adds	r3, #4
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f7fe f9d2 	bl	80045aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006206:	697b      	ldr	r3, [r7, #20]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	200011dc 	.word	0x200011dc
 8006214:	200011d8 	.word	0x200011d8

08006218 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08e      	sub	sp, #56	@ 0x38
 800621c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800621e:	e0ce      	b.n	80063be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	da19      	bge.n	800625a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006226:	1d3b      	adds	r3, r7, #4
 8006228:	3304      	adds	r3, #4
 800622a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800622c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10b      	bne.n	800624a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	61fb      	str	r3, [r7, #28]
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	e7fd      	b.n	8006246 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800624a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006250:	6850      	ldr	r0, [r2, #4]
 8006252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006254:	6892      	ldr	r2, [r2, #8]
 8006256:	4611      	mov	r1, r2
 8006258:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f2c0 80ae 	blt.w	80063be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d004      	beq.n	8006278 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800626e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006270:	3304      	adds	r3, #4
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe f9d2 	bl	800461c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006278:	463b      	mov	r3, r7
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff ff6a 	bl	8006154 <prvSampleTimeNow>
 8006280:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b09      	cmp	r3, #9
 8006286:	f200 8097 	bhi.w	80063b8 <prvProcessReceivedCommands+0x1a0>
 800628a:	a201      	add	r2, pc, #4	@ (adr r2, 8006290 <prvProcessReceivedCommands+0x78>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062b9 	.word	0x080062b9
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062b9 	.word	0x080062b9
 800629c:	0800632f 	.word	0x0800632f
 80062a0:	08006343 	.word	0x08006343
 80062a4:	0800638f 	.word	0x0800638f
 80062a8:	080062b9 	.word	0x080062b9
 80062ac:	080062b9 	.word	0x080062b9
 80062b0:	0800632f 	.word	0x0800632f
 80062b4:	08006343 	.word	0x08006343
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062be:	f043 0301 	orr.w	r3, r3, #1
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	18d1      	adds	r1, r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062d8:	f7ff ff5c 	bl	8006194 <prvInsertTimerInActiveList>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d06c      	beq.n	80063bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d061      	beq.n	80063bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	441a      	add	r2, r3
 8006300:	2300      	movs	r3, #0
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	2300      	movs	r3, #0
 8006306:	2100      	movs	r1, #0
 8006308:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800630a:	f7ff fe01 	bl	8005f10 <xTimerGenericCommand>
 800630e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d152      	bne.n	80063bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	61bb      	str	r3, [r7, #24]
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	e7fd      	b.n	800632a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800632e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	b2da      	uxtb	r2, r3
 800633a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006340:	e03d      	b.n	80063be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006348:	f043 0301 	orr.w	r3, r3, #1
 800634c:	b2da      	uxtb	r2, r3
 800634e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006350:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006358:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800635a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10b      	bne.n	800637a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	617b      	str	r3, [r7, #20]
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	e7fd      	b.n	8006376 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800637a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637c:	699a      	ldr	r2, [r3, #24]
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	18d1      	adds	r1, r2, r3
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006386:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006388:	f7ff ff04 	bl	8006194 <prvInsertTimerInActiveList>
					break;
 800638c:	e017      	b.n	80063be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800638e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d103      	bne.n	80063a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800639c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800639e:	f000 fbeb 	bl	8006b78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063a2:	e00c      	b.n	80063be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063aa:	f023 0301 	bic.w	r3, r3, #1
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80063b6:	e002      	b.n	80063be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80063b8:	bf00      	nop
 80063ba:	e000      	b.n	80063be <prvProcessReceivedCommands+0x1a6>
					break;
 80063bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063be:	4b08      	ldr	r3, [pc, #32]	@ (80063e0 <prvProcessReceivedCommands+0x1c8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	1d39      	adds	r1, r7, #4
 80063c4:	2200      	movs	r2, #0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fbfc 	bl	8004bc4 <xQueueReceive>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f47f af26 	bne.w	8006220 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop
 80063d8:	3730      	adds	r7, #48	@ 0x30
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	200011e0 	.word	0x200011e0

080063e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063ea:	e049      	b.n	8006480 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063ec:	4b2e      	ldr	r3, [pc, #184]	@ (80064a8 <prvSwitchTimerLists+0xc4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f6:	4b2c      	ldr	r3, [pc, #176]	@ (80064a8 <prvSwitchTimerLists+0xc4>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3304      	adds	r3, #4
 8006404:	4618      	mov	r0, r3
 8006406:	f7fe f909 	bl	800461c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d02f      	beq.n	8006480 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4413      	add	r3, r2
 8006428:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	429a      	cmp	r2, r3
 8006430:	d90e      	bls.n	8006450 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800643e:	4b1a      	ldr	r3, [pc, #104]	@ (80064a8 <prvSwitchTimerLists+0xc4>)
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3304      	adds	r3, #4
 8006446:	4619      	mov	r1, r3
 8006448:	4610      	mov	r0, r2
 800644a:	f7fe f8ae 	bl	80045aa <vListInsert>
 800644e:	e017      	b.n	8006480 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006450:	2300      	movs	r3, #0
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	2100      	movs	r1, #0
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7ff fd58 	bl	8005f10 <xTimerGenericCommand>
 8006460:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10b      	bne.n	8006480 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	603b      	str	r3, [r7, #0]
}
 800647a:	bf00      	nop
 800647c:	bf00      	nop
 800647e:	e7fd      	b.n	800647c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006480:	4b09      	ldr	r3, [pc, #36]	@ (80064a8 <prvSwitchTimerLists+0xc4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1b0      	bne.n	80063ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800648a:	4b07      	ldr	r3, [pc, #28]	@ (80064a8 <prvSwitchTimerLists+0xc4>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006490:	4b06      	ldr	r3, [pc, #24]	@ (80064ac <prvSwitchTimerLists+0xc8>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a04      	ldr	r2, [pc, #16]	@ (80064a8 <prvSwitchTimerLists+0xc4>)
 8006496:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006498:	4a04      	ldr	r2, [pc, #16]	@ (80064ac <prvSwitchTimerLists+0xc8>)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	6013      	str	r3, [r2, #0]
}
 800649e:	bf00      	nop
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	200011d8 	.word	0x200011d8
 80064ac:	200011dc 	.word	0x200011dc

080064b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80064b6:	f000 f96f 	bl	8006798 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80064ba:	4b15      	ldr	r3, [pc, #84]	@ (8006510 <prvCheckForValidListAndQueue+0x60>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d120      	bne.n	8006504 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064c2:	4814      	ldr	r0, [pc, #80]	@ (8006514 <prvCheckForValidListAndQueue+0x64>)
 80064c4:	f7fe f820 	bl	8004508 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064c8:	4813      	ldr	r0, [pc, #76]	@ (8006518 <prvCheckForValidListAndQueue+0x68>)
 80064ca:	f7fe f81d 	bl	8004508 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064ce:	4b13      	ldr	r3, [pc, #76]	@ (800651c <prvCheckForValidListAndQueue+0x6c>)
 80064d0:	4a10      	ldr	r2, [pc, #64]	@ (8006514 <prvCheckForValidListAndQueue+0x64>)
 80064d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064d4:	4b12      	ldr	r3, [pc, #72]	@ (8006520 <prvCheckForValidListAndQueue+0x70>)
 80064d6:	4a10      	ldr	r2, [pc, #64]	@ (8006518 <prvCheckForValidListAndQueue+0x68>)
 80064d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064da:	2300      	movs	r3, #0
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	4b11      	ldr	r3, [pc, #68]	@ (8006524 <prvCheckForValidListAndQueue+0x74>)
 80064e0:	4a11      	ldr	r2, [pc, #68]	@ (8006528 <prvCheckForValidListAndQueue+0x78>)
 80064e2:	2110      	movs	r1, #16
 80064e4:	200a      	movs	r0, #10
 80064e6:	f7fe f92d 	bl	8004744 <xQueueGenericCreateStatic>
 80064ea:	4603      	mov	r3, r0
 80064ec:	4a08      	ldr	r2, [pc, #32]	@ (8006510 <prvCheckForValidListAndQueue+0x60>)
 80064ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064f0:	4b07      	ldr	r3, [pc, #28]	@ (8006510 <prvCheckForValidListAndQueue+0x60>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064f8:	4b05      	ldr	r3, [pc, #20]	@ (8006510 <prvCheckForValidListAndQueue+0x60>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	490b      	ldr	r1, [pc, #44]	@ (800652c <prvCheckForValidListAndQueue+0x7c>)
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe fd52 	bl	8004fa8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006504:	f000 f97a 	bl	80067fc <vPortExitCritical>
}
 8006508:	bf00      	nop
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	200011e0 	.word	0x200011e0
 8006514:	200011b0 	.word	0x200011b0
 8006518:	200011c4 	.word	0x200011c4
 800651c:	200011d8 	.word	0x200011d8
 8006520:	200011dc 	.word	0x200011dc
 8006524:	2000128c 	.word	0x2000128c
 8006528:	200011ec 	.word	0x200011ec
 800652c:	080077a8 	.word	0x080077a8

08006530 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3b04      	subs	r3, #4
 8006540:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3b04      	subs	r3, #4
 800654e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f023 0201 	bic.w	r2, r3, #1
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3b04      	subs	r3, #4
 800655e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006560:	4a0c      	ldr	r2, [pc, #48]	@ (8006594 <pxPortInitialiseStack+0x64>)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3b14      	subs	r3, #20
 800656a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3b04      	subs	r3, #4
 8006576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f06f 0202 	mvn.w	r2, #2
 800657e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3b20      	subs	r3, #32
 8006584:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006586:	68fb      	ldr	r3, [r7, #12]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	08006599 	.word	0x08006599

08006598 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800659e:	2300      	movs	r3, #0
 80065a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065a2:	4b13      	ldr	r3, [pc, #76]	@ (80065f0 <prvTaskExitError+0x58>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065aa:	d00b      	beq.n	80065c4 <prvTaskExitError+0x2c>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	60fb      	str	r3, [r7, #12]
}
 80065be:	bf00      	nop
 80065c0:	bf00      	nop
 80065c2:	e7fd      	b.n	80065c0 <prvTaskExitError+0x28>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	60bb      	str	r3, [r7, #8]
}
 80065d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065d8:	bf00      	nop
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0fc      	beq.n	80065da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	2000001c 	.word	0x2000001c
	...

08006600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006600:	4b07      	ldr	r3, [pc, #28]	@ (8006620 <pxCurrentTCBConst2>)
 8006602:	6819      	ldr	r1, [r3, #0]
 8006604:	6808      	ldr	r0, [r1, #0]
 8006606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660a:	f380 8809 	msr	PSP, r0
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f04f 0000 	mov.w	r0, #0
 8006616:	f380 8811 	msr	BASEPRI, r0
 800661a:	4770      	bx	lr
 800661c:	f3af 8000 	nop.w

08006620 <pxCurrentTCBConst2>:
 8006620:	20000cb0 	.word	0x20000cb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop

08006628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006628:	4808      	ldr	r0, [pc, #32]	@ (800664c <prvPortStartFirstTask+0x24>)
 800662a:	6800      	ldr	r0, [r0, #0]
 800662c:	6800      	ldr	r0, [r0, #0]
 800662e:	f380 8808 	msr	MSP, r0
 8006632:	f04f 0000 	mov.w	r0, #0
 8006636:	f380 8814 	msr	CONTROL, r0
 800663a:	b662      	cpsie	i
 800663c:	b661      	cpsie	f
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	df00      	svc	0
 8006648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800664a:	bf00      	nop
 800664c:	e000ed08 	.word	0xe000ed08

08006650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006656:	4b47      	ldr	r3, [pc, #284]	@ (8006774 <xPortStartScheduler+0x124>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a47      	ldr	r2, [pc, #284]	@ (8006778 <xPortStartScheduler+0x128>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d10b      	bne.n	8006678 <xPortStartScheduler+0x28>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	613b      	str	r3, [r7, #16]
}
 8006672:	bf00      	nop
 8006674:	bf00      	nop
 8006676:	e7fd      	b.n	8006674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006678:	4b3e      	ldr	r3, [pc, #248]	@ (8006774 <xPortStartScheduler+0x124>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a3f      	ldr	r2, [pc, #252]	@ (800677c <xPortStartScheduler+0x12c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d10b      	bne.n	800669a <xPortStartScheduler+0x4a>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	60fb      	str	r3, [r7, #12]
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	e7fd      	b.n	8006696 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800669a:	4b39      	ldr	r3, [pc, #228]	@ (8006780 <xPortStartScheduler+0x130>)
 800669c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	22ff      	movs	r2, #255	@ 0xff
 80066aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	4b31      	ldr	r3, [pc, #196]	@ (8006784 <xPortStartScheduler+0x134>)
 80066c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066c2:	4b31      	ldr	r3, [pc, #196]	@ (8006788 <xPortStartScheduler+0x138>)
 80066c4:	2207      	movs	r2, #7
 80066c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066c8:	e009      	b.n	80066de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80066ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006788 <xPortStartScheduler+0x138>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006788 <xPortStartScheduler+0x138>)
 80066d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066e6:	2b80      	cmp	r3, #128	@ 0x80
 80066e8:	d0ef      	beq.n	80066ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066ea:	4b27      	ldr	r3, [pc, #156]	@ (8006788 <xPortStartScheduler+0x138>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f1c3 0307 	rsb	r3, r3, #7
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	d00b      	beq.n	800670e <xPortStartScheduler+0xbe>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	60bb      	str	r3, [r7, #8]
}
 8006708:	bf00      	nop
 800670a:	bf00      	nop
 800670c:	e7fd      	b.n	800670a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800670e:	4b1e      	ldr	r3, [pc, #120]	@ (8006788 <xPortStartScheduler+0x138>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	021b      	lsls	r3, r3, #8
 8006714:	4a1c      	ldr	r2, [pc, #112]	@ (8006788 <xPortStartScheduler+0x138>)
 8006716:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006718:	4b1b      	ldr	r3, [pc, #108]	@ (8006788 <xPortStartScheduler+0x138>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006720:	4a19      	ldr	r2, [pc, #100]	@ (8006788 <xPortStartScheduler+0x138>)
 8006722:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	b2da      	uxtb	r2, r3
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800672c:	4b17      	ldr	r3, [pc, #92]	@ (800678c <xPortStartScheduler+0x13c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a16      	ldr	r2, [pc, #88]	@ (800678c <xPortStartScheduler+0x13c>)
 8006732:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006736:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006738:	4b14      	ldr	r3, [pc, #80]	@ (800678c <xPortStartScheduler+0x13c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a13      	ldr	r2, [pc, #76]	@ (800678c <xPortStartScheduler+0x13c>)
 800673e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006742:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006744:	f000 f8da 	bl	80068fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006748:	4b11      	ldr	r3, [pc, #68]	@ (8006790 <xPortStartScheduler+0x140>)
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800674e:	f000 f8f9 	bl	8006944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006752:	4b10      	ldr	r3, [pc, #64]	@ (8006794 <xPortStartScheduler+0x144>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a0f      	ldr	r2, [pc, #60]	@ (8006794 <xPortStartScheduler+0x144>)
 8006758:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800675c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800675e:	f7ff ff63 	bl	8006628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006762:	f7ff f839 	bl	80057d8 <vTaskSwitchContext>
	prvTaskExitError();
 8006766:	f7ff ff17 	bl	8006598 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	e000ed00 	.word	0xe000ed00
 8006778:	410fc271 	.word	0x410fc271
 800677c:	410fc270 	.word	0x410fc270
 8006780:	e000e400 	.word	0xe000e400
 8006784:	200012dc 	.word	0x200012dc
 8006788:	200012e0 	.word	0x200012e0
 800678c:	e000ed20 	.word	0xe000ed20
 8006790:	2000001c 	.word	0x2000001c
 8006794:	e000ef34 	.word	0xe000ef34

08006798 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	607b      	str	r3, [r7, #4]
}
 80067b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067b2:	4b10      	ldr	r3, [pc, #64]	@ (80067f4 <vPortEnterCritical+0x5c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3301      	adds	r3, #1
 80067b8:	4a0e      	ldr	r2, [pc, #56]	@ (80067f4 <vPortEnterCritical+0x5c>)
 80067ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067bc:	4b0d      	ldr	r3, [pc, #52]	@ (80067f4 <vPortEnterCritical+0x5c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d110      	bne.n	80067e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067c4:	4b0c      	ldr	r3, [pc, #48]	@ (80067f8 <vPortEnterCritical+0x60>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	603b      	str	r3, [r7, #0]
}
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	e7fd      	b.n	80067e2 <vPortEnterCritical+0x4a>
	}
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	2000001c 	.word	0x2000001c
 80067f8:	e000ed04 	.word	0xe000ed04

080067fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006802:	4b12      	ldr	r3, [pc, #72]	@ (800684c <vPortExitCritical+0x50>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10b      	bne.n	8006822 <vPortExitCritical+0x26>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	607b      	str	r3, [r7, #4]
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	e7fd      	b.n	800681e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006822:	4b0a      	ldr	r3, [pc, #40]	@ (800684c <vPortExitCritical+0x50>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3b01      	subs	r3, #1
 8006828:	4a08      	ldr	r2, [pc, #32]	@ (800684c <vPortExitCritical+0x50>)
 800682a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800682c:	4b07      	ldr	r3, [pc, #28]	@ (800684c <vPortExitCritical+0x50>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d105      	bne.n	8006840 <vPortExitCritical+0x44>
 8006834:	2300      	movs	r3, #0
 8006836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	f383 8811 	msr	BASEPRI, r3
}
 800683e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	2000001c 	.word	0x2000001c

08006850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006850:	f3ef 8009 	mrs	r0, PSP
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	4b15      	ldr	r3, [pc, #84]	@ (80068b0 <pxCurrentTCBConst>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	f01e 0f10 	tst.w	lr, #16
 8006860:	bf08      	it	eq
 8006862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686a:	6010      	str	r0, [r2, #0]
 800686c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006870:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006874:	f380 8811 	msr	BASEPRI, r0
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f7fe ffaa 	bl	80057d8 <vTaskSwitchContext>
 8006884:	f04f 0000 	mov.w	r0, #0
 8006888:	f380 8811 	msr	BASEPRI, r0
 800688c:	bc09      	pop	{r0, r3}
 800688e:	6819      	ldr	r1, [r3, #0]
 8006890:	6808      	ldr	r0, [r1, #0]
 8006892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006896:	f01e 0f10 	tst.w	lr, #16
 800689a:	bf08      	it	eq
 800689c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068a0:	f380 8809 	msr	PSP, r0
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	f3af 8000 	nop.w

080068b0 <pxCurrentTCBConst>:
 80068b0:	20000cb0 	.word	0x20000cb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop

080068b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	607b      	str	r3, [r7, #4]
}
 80068d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068d2:	f7fe fec7 	bl	8005664 <xTaskIncrementTick>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068dc:	4b06      	ldr	r3, [pc, #24]	@ (80068f8 <xPortSysTickHandler+0x40>)
 80068de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	2300      	movs	r3, #0
 80068e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	f383 8811 	msr	BASEPRI, r3
}
 80068ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006900:	4b0b      	ldr	r3, [pc, #44]	@ (8006930 <vPortSetupTimerInterrupt+0x34>)
 8006902:	2200      	movs	r2, #0
 8006904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006906:	4b0b      	ldr	r3, [pc, #44]	@ (8006934 <vPortSetupTimerInterrupt+0x38>)
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800690c:	4b0a      	ldr	r3, [pc, #40]	@ (8006938 <vPortSetupTimerInterrupt+0x3c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a0a      	ldr	r2, [pc, #40]	@ (800693c <vPortSetupTimerInterrupt+0x40>)
 8006912:	fba2 2303 	umull	r2, r3, r2, r3
 8006916:	099b      	lsrs	r3, r3, #6
 8006918:	4a09      	ldr	r2, [pc, #36]	@ (8006940 <vPortSetupTimerInterrupt+0x44>)
 800691a:	3b01      	subs	r3, #1
 800691c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800691e:	4b04      	ldr	r3, [pc, #16]	@ (8006930 <vPortSetupTimerInterrupt+0x34>)
 8006920:	2207      	movs	r2, #7
 8006922:	601a      	str	r2, [r3, #0]
}
 8006924:	bf00      	nop
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	e000e010 	.word	0xe000e010
 8006934:	e000e018 	.word	0xe000e018
 8006938:	20000010 	.word	0x20000010
 800693c:	10624dd3 	.word	0x10624dd3
 8006940:	e000e014 	.word	0xe000e014

08006944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006944:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006954 <vPortEnableVFP+0x10>
 8006948:	6801      	ldr	r1, [r0, #0]
 800694a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800694e:	6001      	str	r1, [r0, #0]
 8006950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006952:	bf00      	nop
 8006954:	e000ed88 	.word	0xe000ed88

08006958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800695e:	f3ef 8305 	mrs	r3, IPSR
 8006962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b0f      	cmp	r3, #15
 8006968:	d915      	bls.n	8006996 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800696a:	4a18      	ldr	r2, [pc, #96]	@ (80069cc <vPortValidateInterruptPriority+0x74>)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4413      	add	r3, r2
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006974:	4b16      	ldr	r3, [pc, #88]	@ (80069d0 <vPortValidateInterruptPriority+0x78>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	7afa      	ldrb	r2, [r7, #11]
 800697a:	429a      	cmp	r2, r3
 800697c:	d20b      	bcs.n	8006996 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	607b      	str	r3, [r7, #4]
}
 8006990:	bf00      	nop
 8006992:	bf00      	nop
 8006994:	e7fd      	b.n	8006992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006996:	4b0f      	ldr	r3, [pc, #60]	@ (80069d4 <vPortValidateInterruptPriority+0x7c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800699e:	4b0e      	ldr	r3, [pc, #56]	@ (80069d8 <vPortValidateInterruptPriority+0x80>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d90b      	bls.n	80069be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80069a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	603b      	str	r3, [r7, #0]
}
 80069b8:	bf00      	nop
 80069ba:	bf00      	nop
 80069bc:	e7fd      	b.n	80069ba <vPortValidateInterruptPriority+0x62>
	}
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	e000e3f0 	.word	0xe000e3f0
 80069d0:	200012dc 	.word	0x200012dc
 80069d4:	e000ed0c 	.word	0xe000ed0c
 80069d8:	200012e0 	.word	0x200012e0

080069dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08a      	sub	sp, #40	@ 0x28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069e8:	f7fe fd80 	bl	80054ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069ec:	4b5c      	ldr	r3, [pc, #368]	@ (8006b60 <pvPortMalloc+0x184>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069f4:	f000 f924 	bl	8006c40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069f8:	4b5a      	ldr	r3, [pc, #360]	@ (8006b64 <pvPortMalloc+0x188>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4013      	ands	r3, r2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f040 8095 	bne.w	8006b30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01e      	beq.n	8006a4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4413      	add	r3, r2
 8006a12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f003 0307 	and.w	r3, r3, #7
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d015      	beq.n	8006a4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f023 0307 	bic.w	r3, r3, #7
 8006a24:	3308      	adds	r3, #8
 8006a26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00b      	beq.n	8006a4a <pvPortMalloc+0x6e>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	617b      	str	r3, [r7, #20]
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop
 8006a48:	e7fd      	b.n	8006a46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d06f      	beq.n	8006b30 <pvPortMalloc+0x154>
 8006a50:	4b45      	ldr	r3, [pc, #276]	@ (8006b68 <pvPortMalloc+0x18c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d86a      	bhi.n	8006b30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a5a:	4b44      	ldr	r3, [pc, #272]	@ (8006b6c <pvPortMalloc+0x190>)
 8006a5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a5e:	4b43      	ldr	r3, [pc, #268]	@ (8006b6c <pvPortMalloc+0x190>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a64:	e004      	b.n	8006a70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d903      	bls.n	8006a82 <pvPortMalloc+0xa6>
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1f1      	bne.n	8006a66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a82:	4b37      	ldr	r3, [pc, #220]	@ (8006b60 <pvPortMalloc+0x184>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d051      	beq.n	8006b30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2208      	movs	r2, #8
 8006a92:	4413      	add	r3, r2
 8006a94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	1ad2      	subs	r2, r2, r3
 8006aa6:	2308      	movs	r3, #8
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d920      	bls.n	8006af0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00b      	beq.n	8006ad8 <pvPortMalloc+0xfc>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	613b      	str	r3, [r7, #16]
}
 8006ad2:	bf00      	nop
 8006ad4:	bf00      	nop
 8006ad6:	e7fd      	b.n	8006ad4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	1ad2      	subs	r2, r2, r3
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006aea:	69b8      	ldr	r0, [r7, #24]
 8006aec:	f000 f90a 	bl	8006d04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006af0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b68 <pvPortMalloc+0x18c>)
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	4a1b      	ldr	r2, [pc, #108]	@ (8006b68 <pvPortMalloc+0x18c>)
 8006afc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006afe:	4b1a      	ldr	r3, [pc, #104]	@ (8006b68 <pvPortMalloc+0x18c>)
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	4b1b      	ldr	r3, [pc, #108]	@ (8006b70 <pvPortMalloc+0x194>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d203      	bcs.n	8006b12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b0a:	4b17      	ldr	r3, [pc, #92]	@ (8006b68 <pvPortMalloc+0x18c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a18      	ldr	r2, [pc, #96]	@ (8006b70 <pvPortMalloc+0x194>)
 8006b10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	4b13      	ldr	r3, [pc, #76]	@ (8006b64 <pvPortMalloc+0x188>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b26:	4b13      	ldr	r3, [pc, #76]	@ (8006b74 <pvPortMalloc+0x198>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	4a11      	ldr	r2, [pc, #68]	@ (8006b74 <pvPortMalloc+0x198>)
 8006b2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b30:	f7fe fcea 	bl	8005508 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00b      	beq.n	8006b56 <pvPortMalloc+0x17a>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	60fb      	str	r3, [r7, #12]
}
 8006b50:	bf00      	nop
 8006b52:	bf00      	nop
 8006b54:	e7fd      	b.n	8006b52 <pvPortMalloc+0x176>
	return pvReturn;
 8006b56:	69fb      	ldr	r3, [r7, #28]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3728      	adds	r7, #40	@ 0x28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20004eec 	.word	0x20004eec
 8006b64:	20004f00 	.word	0x20004f00
 8006b68:	20004ef0 	.word	0x20004ef0
 8006b6c:	20004ee4 	.word	0x20004ee4
 8006b70:	20004ef4 	.word	0x20004ef4
 8006b74:	20004ef8 	.word	0x20004ef8

08006b78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d04f      	beq.n	8006c2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b8a:	2308      	movs	r3, #8
 8006b8c:	425b      	negs	r3, r3
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4413      	add	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	4b25      	ldr	r3, [pc, #148]	@ (8006c34 <vPortFree+0xbc>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10b      	bne.n	8006bbe <vPortFree+0x46>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	60fb      	str	r3, [r7, #12]
}
 8006bb8:	bf00      	nop
 8006bba:	bf00      	nop
 8006bbc:	e7fd      	b.n	8006bba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00b      	beq.n	8006bde <vPortFree+0x66>
	__asm volatile
 8006bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	60bb      	str	r3, [r7, #8]
}
 8006bd8:	bf00      	nop
 8006bda:	bf00      	nop
 8006bdc:	e7fd      	b.n	8006bda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	4b14      	ldr	r3, [pc, #80]	@ (8006c34 <vPortFree+0xbc>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4013      	ands	r3, r2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d01e      	beq.n	8006c2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d11a      	bne.n	8006c2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8006c34 <vPortFree+0xbc>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	401a      	ands	r2, r3
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c04:	f7fe fc72 	bl	80054ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c38 <vPortFree+0xc0>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4413      	add	r3, r2
 8006c12:	4a09      	ldr	r2, [pc, #36]	@ (8006c38 <vPortFree+0xc0>)
 8006c14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c16:	6938      	ldr	r0, [r7, #16]
 8006c18:	f000 f874 	bl	8006d04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c1c:	4b07      	ldr	r3, [pc, #28]	@ (8006c3c <vPortFree+0xc4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3301      	adds	r3, #1
 8006c22:	4a06      	ldr	r2, [pc, #24]	@ (8006c3c <vPortFree+0xc4>)
 8006c24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c26:	f7fe fc6f 	bl	8005508 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c2a:	bf00      	nop
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20004f00 	.word	0x20004f00
 8006c38:	20004ef0 	.word	0x20004ef0
 8006c3c:	20004efc 	.word	0x20004efc

08006c40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006c4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c4c:	4b27      	ldr	r3, [pc, #156]	@ (8006cec <prvHeapInit+0xac>)
 8006c4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00c      	beq.n	8006c74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	3307      	adds	r3, #7
 8006c5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 0307 	bic.w	r3, r3, #7
 8006c66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8006cec <prvHeapInit+0xac>)
 8006c70:	4413      	add	r3, r2
 8006c72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c78:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf0 <prvHeapInit+0xb0>)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8006cf0 <prvHeapInit+0xb0>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	4413      	add	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c8c:	2208      	movs	r2, #8
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	1a9b      	subs	r3, r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0307 	bic.w	r3, r3, #7
 8006c9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4a15      	ldr	r2, [pc, #84]	@ (8006cf4 <prvHeapInit+0xb4>)
 8006ca0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ca2:	4b14      	ldr	r3, [pc, #80]	@ (8006cf4 <prvHeapInit+0xb4>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006caa:	4b12      	ldr	r3, [pc, #72]	@ (8006cf4 <prvHeapInit+0xb4>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	1ad2      	subs	r2, r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8006cf4 <prvHeapInit+0xb4>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8006cf8 <prvHeapInit+0xb8>)
 8006cce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	4a09      	ldr	r2, [pc, #36]	@ (8006cfc <prvHeapInit+0xbc>)
 8006cd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cd8:	4b09      	ldr	r3, [pc, #36]	@ (8006d00 <prvHeapInit+0xc0>)
 8006cda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006cde:	601a      	str	r2, [r3, #0]
}
 8006ce0:	bf00      	nop
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	200012e4 	.word	0x200012e4
 8006cf0:	20004ee4 	.word	0x20004ee4
 8006cf4:	20004eec 	.word	0x20004eec
 8006cf8:	20004ef4 	.word	0x20004ef4
 8006cfc:	20004ef0 	.word	0x20004ef0
 8006d00:	20004f00 	.word	0x20004f00

08006d04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d0c:	4b28      	ldr	r3, [pc, #160]	@ (8006db0 <prvInsertBlockIntoFreeList+0xac>)
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	e002      	b.n	8006d18 <prvInsertBlockIntoFreeList+0x14>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d8f7      	bhi.n	8006d12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d108      	bne.n	8006d46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	441a      	add	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	441a      	add	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d118      	bne.n	8006d8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	4b15      	ldr	r3, [pc, #84]	@ (8006db4 <prvInsertBlockIntoFreeList+0xb0>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d00d      	beq.n	8006d82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	441a      	add	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	e008      	b.n	8006d94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d82:	4b0c      	ldr	r3, [pc, #48]	@ (8006db4 <prvInsertBlockIntoFreeList+0xb0>)
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	e003      	b.n	8006d94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d002      	beq.n	8006da2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006da2:	bf00      	nop
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	20004ee4 	.word	0x20004ee4
 8006db4:	20004eec 	.word	0x20004eec

08006db8 <siprintf>:
 8006db8:	b40e      	push	{r1, r2, r3}
 8006dba:	b500      	push	{lr}
 8006dbc:	b09c      	sub	sp, #112	@ 0x70
 8006dbe:	ab1d      	add	r3, sp, #116	@ 0x74
 8006dc0:	9002      	str	r0, [sp, #8]
 8006dc2:	9006      	str	r0, [sp, #24]
 8006dc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006dc8:	4809      	ldr	r0, [pc, #36]	@ (8006df0 <siprintf+0x38>)
 8006dca:	9107      	str	r1, [sp, #28]
 8006dcc:	9104      	str	r1, [sp, #16]
 8006dce:	4909      	ldr	r1, [pc, #36]	@ (8006df4 <siprintf+0x3c>)
 8006dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dd4:	9105      	str	r1, [sp, #20]
 8006dd6:	6800      	ldr	r0, [r0, #0]
 8006dd8:	9301      	str	r3, [sp, #4]
 8006dda:	a902      	add	r1, sp, #8
 8006ddc:	f000 f9b6 	bl	800714c <_svfiprintf_r>
 8006de0:	9b02      	ldr	r3, [sp, #8]
 8006de2:	2200      	movs	r2, #0
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	b01c      	add	sp, #112	@ 0x70
 8006de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dec:	b003      	add	sp, #12
 8006dee:	4770      	bx	lr
 8006df0:	20000020 	.word	0x20000020
 8006df4:	ffff0208 	.word	0xffff0208

08006df8 <memset>:
 8006df8:	4402      	add	r2, r0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d100      	bne.n	8006e02 <memset+0xa>
 8006e00:	4770      	bx	lr
 8006e02:	f803 1b01 	strb.w	r1, [r3], #1
 8006e06:	e7f9      	b.n	8006dfc <memset+0x4>

08006e08 <strncpy>:
 8006e08:	b510      	push	{r4, lr}
 8006e0a:	3901      	subs	r1, #1
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	b132      	cbz	r2, 8006e1e <strncpy+0x16>
 8006e10:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006e14:	f803 4b01 	strb.w	r4, [r3], #1
 8006e18:	3a01      	subs	r2, #1
 8006e1a:	2c00      	cmp	r4, #0
 8006e1c:	d1f7      	bne.n	8006e0e <strncpy+0x6>
 8006e1e:	441a      	add	r2, r3
 8006e20:	2100      	movs	r1, #0
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d100      	bne.n	8006e28 <strncpy+0x20>
 8006e26:	bd10      	pop	{r4, pc}
 8006e28:	f803 1b01 	strb.w	r1, [r3], #1
 8006e2c:	e7f9      	b.n	8006e22 <strncpy+0x1a>
	...

08006e30 <__errno>:
 8006e30:	4b01      	ldr	r3, [pc, #4]	@ (8006e38 <__errno+0x8>)
 8006e32:	6818      	ldr	r0, [r3, #0]
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	20000020 	.word	0x20000020

08006e3c <__libc_init_array>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8006e74 <__libc_init_array+0x38>)
 8006e40:	4c0d      	ldr	r4, [pc, #52]	@ (8006e78 <__libc_init_array+0x3c>)
 8006e42:	1b64      	subs	r4, r4, r5
 8006e44:	10a4      	asrs	r4, r4, #2
 8006e46:	2600      	movs	r6, #0
 8006e48:	42a6      	cmp	r6, r4
 8006e4a:	d109      	bne.n	8006e60 <__libc_init_array+0x24>
 8006e4c:	4d0b      	ldr	r5, [pc, #44]	@ (8006e7c <__libc_init_array+0x40>)
 8006e4e:	4c0c      	ldr	r4, [pc, #48]	@ (8006e80 <__libc_init_array+0x44>)
 8006e50:	f000 fc66 	bl	8007720 <_init>
 8006e54:	1b64      	subs	r4, r4, r5
 8006e56:	10a4      	asrs	r4, r4, #2
 8006e58:	2600      	movs	r6, #0
 8006e5a:	42a6      	cmp	r6, r4
 8006e5c:	d105      	bne.n	8006e6a <__libc_init_array+0x2e>
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e64:	4798      	blx	r3
 8006e66:	3601      	adds	r6, #1
 8006e68:	e7ee      	b.n	8006e48 <__libc_init_array+0xc>
 8006e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e6e:	4798      	blx	r3
 8006e70:	3601      	adds	r6, #1
 8006e72:	e7f2      	b.n	8006e5a <__libc_init_array+0x1e>
 8006e74:	080085f0 	.word	0x080085f0
 8006e78:	080085f0 	.word	0x080085f0
 8006e7c:	080085f0 	.word	0x080085f0
 8006e80:	080085f4 	.word	0x080085f4

08006e84 <__retarget_lock_acquire_recursive>:
 8006e84:	4770      	bx	lr

08006e86 <__retarget_lock_release_recursive>:
 8006e86:	4770      	bx	lr

08006e88 <memcpy>:
 8006e88:	440a      	add	r2, r1
 8006e8a:	4291      	cmp	r1, r2
 8006e8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e90:	d100      	bne.n	8006e94 <memcpy+0xc>
 8006e92:	4770      	bx	lr
 8006e94:	b510      	push	{r4, lr}
 8006e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e9e:	4291      	cmp	r1, r2
 8006ea0:	d1f9      	bne.n	8006e96 <memcpy+0xe>
 8006ea2:	bd10      	pop	{r4, pc}

08006ea4 <_free_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	2900      	cmp	r1, #0
 8006eaa:	d041      	beq.n	8006f30 <_free_r+0x8c>
 8006eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb0:	1f0c      	subs	r4, r1, #4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	bfb8      	it	lt
 8006eb6:	18e4      	addlt	r4, r4, r3
 8006eb8:	f000 f8e0 	bl	800707c <__malloc_lock>
 8006ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8006f34 <_free_r+0x90>)
 8006ebe:	6813      	ldr	r3, [r2, #0]
 8006ec0:	b933      	cbnz	r3, 8006ed0 <_free_r+0x2c>
 8006ec2:	6063      	str	r3, [r4, #4]
 8006ec4:	6014      	str	r4, [r2, #0]
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ecc:	f000 b8dc 	b.w	8007088 <__malloc_unlock>
 8006ed0:	42a3      	cmp	r3, r4
 8006ed2:	d908      	bls.n	8006ee6 <_free_r+0x42>
 8006ed4:	6820      	ldr	r0, [r4, #0]
 8006ed6:	1821      	adds	r1, r4, r0
 8006ed8:	428b      	cmp	r3, r1
 8006eda:	bf01      	itttt	eq
 8006edc:	6819      	ldreq	r1, [r3, #0]
 8006ede:	685b      	ldreq	r3, [r3, #4]
 8006ee0:	1809      	addeq	r1, r1, r0
 8006ee2:	6021      	streq	r1, [r4, #0]
 8006ee4:	e7ed      	b.n	8006ec2 <_free_r+0x1e>
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	b10b      	cbz	r3, 8006ef0 <_free_r+0x4c>
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	d9fa      	bls.n	8006ee6 <_free_r+0x42>
 8006ef0:	6811      	ldr	r1, [r2, #0]
 8006ef2:	1850      	adds	r0, r2, r1
 8006ef4:	42a0      	cmp	r0, r4
 8006ef6:	d10b      	bne.n	8006f10 <_free_r+0x6c>
 8006ef8:	6820      	ldr	r0, [r4, #0]
 8006efa:	4401      	add	r1, r0
 8006efc:	1850      	adds	r0, r2, r1
 8006efe:	4283      	cmp	r3, r0
 8006f00:	6011      	str	r1, [r2, #0]
 8006f02:	d1e0      	bne.n	8006ec6 <_free_r+0x22>
 8006f04:	6818      	ldr	r0, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	6053      	str	r3, [r2, #4]
 8006f0a:	4408      	add	r0, r1
 8006f0c:	6010      	str	r0, [r2, #0]
 8006f0e:	e7da      	b.n	8006ec6 <_free_r+0x22>
 8006f10:	d902      	bls.n	8006f18 <_free_r+0x74>
 8006f12:	230c      	movs	r3, #12
 8006f14:	602b      	str	r3, [r5, #0]
 8006f16:	e7d6      	b.n	8006ec6 <_free_r+0x22>
 8006f18:	6820      	ldr	r0, [r4, #0]
 8006f1a:	1821      	adds	r1, r4, r0
 8006f1c:	428b      	cmp	r3, r1
 8006f1e:	bf04      	itt	eq
 8006f20:	6819      	ldreq	r1, [r3, #0]
 8006f22:	685b      	ldreq	r3, [r3, #4]
 8006f24:	6063      	str	r3, [r4, #4]
 8006f26:	bf04      	itt	eq
 8006f28:	1809      	addeq	r1, r1, r0
 8006f2a:	6021      	streq	r1, [r4, #0]
 8006f2c:	6054      	str	r4, [r2, #4]
 8006f2e:	e7ca      	b.n	8006ec6 <_free_r+0x22>
 8006f30:	bd38      	pop	{r3, r4, r5, pc}
 8006f32:	bf00      	nop
 8006f34:	20005048 	.word	0x20005048

08006f38 <sbrk_aligned>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	4e0f      	ldr	r6, [pc, #60]	@ (8006f78 <sbrk_aligned+0x40>)
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	6831      	ldr	r1, [r6, #0]
 8006f40:	4605      	mov	r5, r0
 8006f42:	b911      	cbnz	r1, 8006f4a <sbrk_aligned+0x12>
 8006f44:	f000 fba6 	bl	8007694 <_sbrk_r>
 8006f48:	6030      	str	r0, [r6, #0]
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	f000 fba1 	bl	8007694 <_sbrk_r>
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	d103      	bne.n	8006f5e <sbrk_aligned+0x26>
 8006f56:	f04f 34ff 	mov.w	r4, #4294967295
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	bd70      	pop	{r4, r5, r6, pc}
 8006f5e:	1cc4      	adds	r4, r0, #3
 8006f60:	f024 0403 	bic.w	r4, r4, #3
 8006f64:	42a0      	cmp	r0, r4
 8006f66:	d0f8      	beq.n	8006f5a <sbrk_aligned+0x22>
 8006f68:	1a21      	subs	r1, r4, r0
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f000 fb92 	bl	8007694 <_sbrk_r>
 8006f70:	3001      	adds	r0, #1
 8006f72:	d1f2      	bne.n	8006f5a <sbrk_aligned+0x22>
 8006f74:	e7ef      	b.n	8006f56 <sbrk_aligned+0x1e>
 8006f76:	bf00      	nop
 8006f78:	20005044 	.word	0x20005044

08006f7c <_malloc_r>:
 8006f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f80:	1ccd      	adds	r5, r1, #3
 8006f82:	f025 0503 	bic.w	r5, r5, #3
 8006f86:	3508      	adds	r5, #8
 8006f88:	2d0c      	cmp	r5, #12
 8006f8a:	bf38      	it	cc
 8006f8c:	250c      	movcc	r5, #12
 8006f8e:	2d00      	cmp	r5, #0
 8006f90:	4606      	mov	r6, r0
 8006f92:	db01      	blt.n	8006f98 <_malloc_r+0x1c>
 8006f94:	42a9      	cmp	r1, r5
 8006f96:	d904      	bls.n	8006fa2 <_malloc_r+0x26>
 8006f98:	230c      	movs	r3, #12
 8006f9a:	6033      	str	r3, [r6, #0]
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007078 <_malloc_r+0xfc>
 8006fa6:	f000 f869 	bl	800707c <__malloc_lock>
 8006faa:	f8d8 3000 	ldr.w	r3, [r8]
 8006fae:	461c      	mov	r4, r3
 8006fb0:	bb44      	cbnz	r4, 8007004 <_malloc_r+0x88>
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f7ff ffbf 	bl	8006f38 <sbrk_aligned>
 8006fba:	1c43      	adds	r3, r0, #1
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	d158      	bne.n	8007072 <_malloc_r+0xf6>
 8006fc0:	f8d8 4000 	ldr.w	r4, [r8]
 8006fc4:	4627      	mov	r7, r4
 8006fc6:	2f00      	cmp	r7, #0
 8006fc8:	d143      	bne.n	8007052 <_malloc_r+0xd6>
 8006fca:	2c00      	cmp	r4, #0
 8006fcc:	d04b      	beq.n	8007066 <_malloc_r+0xea>
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	eb04 0903 	add.w	r9, r4, r3
 8006fd8:	f000 fb5c 	bl	8007694 <_sbrk_r>
 8006fdc:	4581      	cmp	r9, r0
 8006fde:	d142      	bne.n	8007066 <_malloc_r+0xea>
 8006fe0:	6821      	ldr	r1, [r4, #0]
 8006fe2:	1a6d      	subs	r5, r5, r1
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	f7ff ffa6 	bl	8006f38 <sbrk_aligned>
 8006fec:	3001      	adds	r0, #1
 8006fee:	d03a      	beq.n	8007066 <_malloc_r+0xea>
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	442b      	add	r3, r5
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	bb62      	cbnz	r2, 8007058 <_malloc_r+0xdc>
 8006ffe:	f8c8 7000 	str.w	r7, [r8]
 8007002:	e00f      	b.n	8007024 <_malloc_r+0xa8>
 8007004:	6822      	ldr	r2, [r4, #0]
 8007006:	1b52      	subs	r2, r2, r5
 8007008:	d420      	bmi.n	800704c <_malloc_r+0xd0>
 800700a:	2a0b      	cmp	r2, #11
 800700c:	d917      	bls.n	800703e <_malloc_r+0xc2>
 800700e:	1961      	adds	r1, r4, r5
 8007010:	42a3      	cmp	r3, r4
 8007012:	6025      	str	r5, [r4, #0]
 8007014:	bf18      	it	ne
 8007016:	6059      	strne	r1, [r3, #4]
 8007018:	6863      	ldr	r3, [r4, #4]
 800701a:	bf08      	it	eq
 800701c:	f8c8 1000 	streq.w	r1, [r8]
 8007020:	5162      	str	r2, [r4, r5]
 8007022:	604b      	str	r3, [r1, #4]
 8007024:	4630      	mov	r0, r6
 8007026:	f000 f82f 	bl	8007088 <__malloc_unlock>
 800702a:	f104 000b 	add.w	r0, r4, #11
 800702e:	1d23      	adds	r3, r4, #4
 8007030:	f020 0007 	bic.w	r0, r0, #7
 8007034:	1ac2      	subs	r2, r0, r3
 8007036:	bf1c      	itt	ne
 8007038:	1a1b      	subne	r3, r3, r0
 800703a:	50a3      	strne	r3, [r4, r2]
 800703c:	e7af      	b.n	8006f9e <_malloc_r+0x22>
 800703e:	6862      	ldr	r2, [r4, #4]
 8007040:	42a3      	cmp	r3, r4
 8007042:	bf0c      	ite	eq
 8007044:	f8c8 2000 	streq.w	r2, [r8]
 8007048:	605a      	strne	r2, [r3, #4]
 800704a:	e7eb      	b.n	8007024 <_malloc_r+0xa8>
 800704c:	4623      	mov	r3, r4
 800704e:	6864      	ldr	r4, [r4, #4]
 8007050:	e7ae      	b.n	8006fb0 <_malloc_r+0x34>
 8007052:	463c      	mov	r4, r7
 8007054:	687f      	ldr	r7, [r7, #4]
 8007056:	e7b6      	b.n	8006fc6 <_malloc_r+0x4a>
 8007058:	461a      	mov	r2, r3
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	42a3      	cmp	r3, r4
 800705e:	d1fb      	bne.n	8007058 <_malloc_r+0xdc>
 8007060:	2300      	movs	r3, #0
 8007062:	6053      	str	r3, [r2, #4]
 8007064:	e7de      	b.n	8007024 <_malloc_r+0xa8>
 8007066:	230c      	movs	r3, #12
 8007068:	6033      	str	r3, [r6, #0]
 800706a:	4630      	mov	r0, r6
 800706c:	f000 f80c 	bl	8007088 <__malloc_unlock>
 8007070:	e794      	b.n	8006f9c <_malloc_r+0x20>
 8007072:	6005      	str	r5, [r0, #0]
 8007074:	e7d6      	b.n	8007024 <_malloc_r+0xa8>
 8007076:	bf00      	nop
 8007078:	20005048 	.word	0x20005048

0800707c <__malloc_lock>:
 800707c:	4801      	ldr	r0, [pc, #4]	@ (8007084 <__malloc_lock+0x8>)
 800707e:	f7ff bf01 	b.w	8006e84 <__retarget_lock_acquire_recursive>
 8007082:	bf00      	nop
 8007084:	20005040 	.word	0x20005040

08007088 <__malloc_unlock>:
 8007088:	4801      	ldr	r0, [pc, #4]	@ (8007090 <__malloc_unlock+0x8>)
 800708a:	f7ff befc 	b.w	8006e86 <__retarget_lock_release_recursive>
 800708e:	bf00      	nop
 8007090:	20005040 	.word	0x20005040

08007094 <__ssputs_r>:
 8007094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007098:	688e      	ldr	r6, [r1, #8]
 800709a:	461f      	mov	r7, r3
 800709c:	42be      	cmp	r6, r7
 800709e:	680b      	ldr	r3, [r1, #0]
 80070a0:	4682      	mov	sl, r0
 80070a2:	460c      	mov	r4, r1
 80070a4:	4690      	mov	r8, r2
 80070a6:	d82d      	bhi.n	8007104 <__ssputs_r+0x70>
 80070a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80070b0:	d026      	beq.n	8007100 <__ssputs_r+0x6c>
 80070b2:	6965      	ldr	r5, [r4, #20]
 80070b4:	6909      	ldr	r1, [r1, #16]
 80070b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070ba:	eba3 0901 	sub.w	r9, r3, r1
 80070be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070c2:	1c7b      	adds	r3, r7, #1
 80070c4:	444b      	add	r3, r9
 80070c6:	106d      	asrs	r5, r5, #1
 80070c8:	429d      	cmp	r5, r3
 80070ca:	bf38      	it	cc
 80070cc:	461d      	movcc	r5, r3
 80070ce:	0553      	lsls	r3, r2, #21
 80070d0:	d527      	bpl.n	8007122 <__ssputs_r+0x8e>
 80070d2:	4629      	mov	r1, r5
 80070d4:	f7ff ff52 	bl	8006f7c <_malloc_r>
 80070d8:	4606      	mov	r6, r0
 80070da:	b360      	cbz	r0, 8007136 <__ssputs_r+0xa2>
 80070dc:	6921      	ldr	r1, [r4, #16]
 80070de:	464a      	mov	r2, r9
 80070e0:	f7ff fed2 	bl	8006e88 <memcpy>
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80070ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ee:	81a3      	strh	r3, [r4, #12]
 80070f0:	6126      	str	r6, [r4, #16]
 80070f2:	6165      	str	r5, [r4, #20]
 80070f4:	444e      	add	r6, r9
 80070f6:	eba5 0509 	sub.w	r5, r5, r9
 80070fa:	6026      	str	r6, [r4, #0]
 80070fc:	60a5      	str	r5, [r4, #8]
 80070fe:	463e      	mov	r6, r7
 8007100:	42be      	cmp	r6, r7
 8007102:	d900      	bls.n	8007106 <__ssputs_r+0x72>
 8007104:	463e      	mov	r6, r7
 8007106:	6820      	ldr	r0, [r4, #0]
 8007108:	4632      	mov	r2, r6
 800710a:	4641      	mov	r1, r8
 800710c:	f000 faa8 	bl	8007660 <memmove>
 8007110:	68a3      	ldr	r3, [r4, #8]
 8007112:	1b9b      	subs	r3, r3, r6
 8007114:	60a3      	str	r3, [r4, #8]
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	4433      	add	r3, r6
 800711a:	6023      	str	r3, [r4, #0]
 800711c:	2000      	movs	r0, #0
 800711e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007122:	462a      	mov	r2, r5
 8007124:	f000 fac6 	bl	80076b4 <_realloc_r>
 8007128:	4606      	mov	r6, r0
 800712a:	2800      	cmp	r0, #0
 800712c:	d1e0      	bne.n	80070f0 <__ssputs_r+0x5c>
 800712e:	6921      	ldr	r1, [r4, #16]
 8007130:	4650      	mov	r0, sl
 8007132:	f7ff feb7 	bl	8006ea4 <_free_r>
 8007136:	230c      	movs	r3, #12
 8007138:	f8ca 3000 	str.w	r3, [sl]
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007142:	81a3      	strh	r3, [r4, #12]
 8007144:	f04f 30ff 	mov.w	r0, #4294967295
 8007148:	e7e9      	b.n	800711e <__ssputs_r+0x8a>
	...

0800714c <_svfiprintf_r>:
 800714c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007150:	4698      	mov	r8, r3
 8007152:	898b      	ldrh	r3, [r1, #12]
 8007154:	061b      	lsls	r3, r3, #24
 8007156:	b09d      	sub	sp, #116	@ 0x74
 8007158:	4607      	mov	r7, r0
 800715a:	460d      	mov	r5, r1
 800715c:	4614      	mov	r4, r2
 800715e:	d510      	bpl.n	8007182 <_svfiprintf_r+0x36>
 8007160:	690b      	ldr	r3, [r1, #16]
 8007162:	b973      	cbnz	r3, 8007182 <_svfiprintf_r+0x36>
 8007164:	2140      	movs	r1, #64	@ 0x40
 8007166:	f7ff ff09 	bl	8006f7c <_malloc_r>
 800716a:	6028      	str	r0, [r5, #0]
 800716c:	6128      	str	r0, [r5, #16]
 800716e:	b930      	cbnz	r0, 800717e <_svfiprintf_r+0x32>
 8007170:	230c      	movs	r3, #12
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	f04f 30ff 	mov.w	r0, #4294967295
 8007178:	b01d      	add	sp, #116	@ 0x74
 800717a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717e:	2340      	movs	r3, #64	@ 0x40
 8007180:	616b      	str	r3, [r5, #20]
 8007182:	2300      	movs	r3, #0
 8007184:	9309      	str	r3, [sp, #36]	@ 0x24
 8007186:	2320      	movs	r3, #32
 8007188:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800718c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007190:	2330      	movs	r3, #48	@ 0x30
 8007192:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007330 <_svfiprintf_r+0x1e4>
 8007196:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800719a:	f04f 0901 	mov.w	r9, #1
 800719e:	4623      	mov	r3, r4
 80071a0:	469a      	mov	sl, r3
 80071a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a6:	b10a      	cbz	r2, 80071ac <_svfiprintf_r+0x60>
 80071a8:	2a25      	cmp	r2, #37	@ 0x25
 80071aa:	d1f9      	bne.n	80071a0 <_svfiprintf_r+0x54>
 80071ac:	ebba 0b04 	subs.w	fp, sl, r4
 80071b0:	d00b      	beq.n	80071ca <_svfiprintf_r+0x7e>
 80071b2:	465b      	mov	r3, fp
 80071b4:	4622      	mov	r2, r4
 80071b6:	4629      	mov	r1, r5
 80071b8:	4638      	mov	r0, r7
 80071ba:	f7ff ff6b 	bl	8007094 <__ssputs_r>
 80071be:	3001      	adds	r0, #1
 80071c0:	f000 80a7 	beq.w	8007312 <_svfiprintf_r+0x1c6>
 80071c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071c6:	445a      	add	r2, fp
 80071c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80071ca:	f89a 3000 	ldrb.w	r3, [sl]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 809f 	beq.w	8007312 <_svfiprintf_r+0x1c6>
 80071d4:	2300      	movs	r3, #0
 80071d6:	f04f 32ff 	mov.w	r2, #4294967295
 80071da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071de:	f10a 0a01 	add.w	sl, sl, #1
 80071e2:	9304      	str	r3, [sp, #16]
 80071e4:	9307      	str	r3, [sp, #28]
 80071e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80071ec:	4654      	mov	r4, sl
 80071ee:	2205      	movs	r2, #5
 80071f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f4:	484e      	ldr	r0, [pc, #312]	@ (8007330 <_svfiprintf_r+0x1e4>)
 80071f6:	f7f9 f81b 	bl	8000230 <memchr>
 80071fa:	9a04      	ldr	r2, [sp, #16]
 80071fc:	b9d8      	cbnz	r0, 8007236 <_svfiprintf_r+0xea>
 80071fe:	06d0      	lsls	r0, r2, #27
 8007200:	bf44      	itt	mi
 8007202:	2320      	movmi	r3, #32
 8007204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007208:	0711      	lsls	r1, r2, #28
 800720a:	bf44      	itt	mi
 800720c:	232b      	movmi	r3, #43	@ 0x2b
 800720e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007212:	f89a 3000 	ldrb.w	r3, [sl]
 8007216:	2b2a      	cmp	r3, #42	@ 0x2a
 8007218:	d015      	beq.n	8007246 <_svfiprintf_r+0xfa>
 800721a:	9a07      	ldr	r2, [sp, #28]
 800721c:	4654      	mov	r4, sl
 800721e:	2000      	movs	r0, #0
 8007220:	f04f 0c0a 	mov.w	ip, #10
 8007224:	4621      	mov	r1, r4
 8007226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800722a:	3b30      	subs	r3, #48	@ 0x30
 800722c:	2b09      	cmp	r3, #9
 800722e:	d94b      	bls.n	80072c8 <_svfiprintf_r+0x17c>
 8007230:	b1b0      	cbz	r0, 8007260 <_svfiprintf_r+0x114>
 8007232:	9207      	str	r2, [sp, #28]
 8007234:	e014      	b.n	8007260 <_svfiprintf_r+0x114>
 8007236:	eba0 0308 	sub.w	r3, r0, r8
 800723a:	fa09 f303 	lsl.w	r3, r9, r3
 800723e:	4313      	orrs	r3, r2
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	46a2      	mov	sl, r4
 8007244:	e7d2      	b.n	80071ec <_svfiprintf_r+0xa0>
 8007246:	9b03      	ldr	r3, [sp, #12]
 8007248:	1d19      	adds	r1, r3, #4
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	9103      	str	r1, [sp, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	bfbb      	ittet	lt
 8007252:	425b      	neglt	r3, r3
 8007254:	f042 0202 	orrlt.w	r2, r2, #2
 8007258:	9307      	strge	r3, [sp, #28]
 800725a:	9307      	strlt	r3, [sp, #28]
 800725c:	bfb8      	it	lt
 800725e:	9204      	strlt	r2, [sp, #16]
 8007260:	7823      	ldrb	r3, [r4, #0]
 8007262:	2b2e      	cmp	r3, #46	@ 0x2e
 8007264:	d10a      	bne.n	800727c <_svfiprintf_r+0x130>
 8007266:	7863      	ldrb	r3, [r4, #1]
 8007268:	2b2a      	cmp	r3, #42	@ 0x2a
 800726a:	d132      	bne.n	80072d2 <_svfiprintf_r+0x186>
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	1d1a      	adds	r2, r3, #4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	9203      	str	r2, [sp, #12]
 8007274:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007278:	3402      	adds	r4, #2
 800727a:	9305      	str	r3, [sp, #20]
 800727c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007340 <_svfiprintf_r+0x1f4>
 8007280:	7821      	ldrb	r1, [r4, #0]
 8007282:	2203      	movs	r2, #3
 8007284:	4650      	mov	r0, sl
 8007286:	f7f8 ffd3 	bl	8000230 <memchr>
 800728a:	b138      	cbz	r0, 800729c <_svfiprintf_r+0x150>
 800728c:	9b04      	ldr	r3, [sp, #16]
 800728e:	eba0 000a 	sub.w	r0, r0, sl
 8007292:	2240      	movs	r2, #64	@ 0x40
 8007294:	4082      	lsls	r2, r0
 8007296:	4313      	orrs	r3, r2
 8007298:	3401      	adds	r4, #1
 800729a:	9304      	str	r3, [sp, #16]
 800729c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a0:	4824      	ldr	r0, [pc, #144]	@ (8007334 <_svfiprintf_r+0x1e8>)
 80072a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072a6:	2206      	movs	r2, #6
 80072a8:	f7f8 ffc2 	bl	8000230 <memchr>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d036      	beq.n	800731e <_svfiprintf_r+0x1d2>
 80072b0:	4b21      	ldr	r3, [pc, #132]	@ (8007338 <_svfiprintf_r+0x1ec>)
 80072b2:	bb1b      	cbnz	r3, 80072fc <_svfiprintf_r+0x1b0>
 80072b4:	9b03      	ldr	r3, [sp, #12]
 80072b6:	3307      	adds	r3, #7
 80072b8:	f023 0307 	bic.w	r3, r3, #7
 80072bc:	3308      	adds	r3, #8
 80072be:	9303      	str	r3, [sp, #12]
 80072c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c2:	4433      	add	r3, r6
 80072c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072c6:	e76a      	b.n	800719e <_svfiprintf_r+0x52>
 80072c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80072cc:	460c      	mov	r4, r1
 80072ce:	2001      	movs	r0, #1
 80072d0:	e7a8      	b.n	8007224 <_svfiprintf_r+0xd8>
 80072d2:	2300      	movs	r3, #0
 80072d4:	3401      	adds	r4, #1
 80072d6:	9305      	str	r3, [sp, #20]
 80072d8:	4619      	mov	r1, r3
 80072da:	f04f 0c0a 	mov.w	ip, #10
 80072de:	4620      	mov	r0, r4
 80072e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e4:	3a30      	subs	r2, #48	@ 0x30
 80072e6:	2a09      	cmp	r2, #9
 80072e8:	d903      	bls.n	80072f2 <_svfiprintf_r+0x1a6>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0c6      	beq.n	800727c <_svfiprintf_r+0x130>
 80072ee:	9105      	str	r1, [sp, #20]
 80072f0:	e7c4      	b.n	800727c <_svfiprintf_r+0x130>
 80072f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80072f6:	4604      	mov	r4, r0
 80072f8:	2301      	movs	r3, #1
 80072fa:	e7f0      	b.n	80072de <_svfiprintf_r+0x192>
 80072fc:	ab03      	add	r3, sp, #12
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	462a      	mov	r2, r5
 8007302:	4b0e      	ldr	r3, [pc, #56]	@ (800733c <_svfiprintf_r+0x1f0>)
 8007304:	a904      	add	r1, sp, #16
 8007306:	4638      	mov	r0, r7
 8007308:	f3af 8000 	nop.w
 800730c:	1c42      	adds	r2, r0, #1
 800730e:	4606      	mov	r6, r0
 8007310:	d1d6      	bne.n	80072c0 <_svfiprintf_r+0x174>
 8007312:	89ab      	ldrh	r3, [r5, #12]
 8007314:	065b      	lsls	r3, r3, #25
 8007316:	f53f af2d 	bmi.w	8007174 <_svfiprintf_r+0x28>
 800731a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800731c:	e72c      	b.n	8007178 <_svfiprintf_r+0x2c>
 800731e:	ab03      	add	r3, sp, #12
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	462a      	mov	r2, r5
 8007324:	4b05      	ldr	r3, [pc, #20]	@ (800733c <_svfiprintf_r+0x1f0>)
 8007326:	a904      	add	r1, sp, #16
 8007328:	4638      	mov	r0, r7
 800732a:	f000 f879 	bl	8007420 <_printf_i>
 800732e:	e7ed      	b.n	800730c <_svfiprintf_r+0x1c0>
 8007330:	080085b4 	.word	0x080085b4
 8007334:	080085be 	.word	0x080085be
 8007338:	00000000 	.word	0x00000000
 800733c:	08007095 	.word	0x08007095
 8007340:	080085ba 	.word	0x080085ba

08007344 <_printf_common>:
 8007344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007348:	4616      	mov	r6, r2
 800734a:	4698      	mov	r8, r3
 800734c:	688a      	ldr	r2, [r1, #8]
 800734e:	690b      	ldr	r3, [r1, #16]
 8007350:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007354:	4293      	cmp	r3, r2
 8007356:	bfb8      	it	lt
 8007358:	4613      	movlt	r3, r2
 800735a:	6033      	str	r3, [r6, #0]
 800735c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007360:	4607      	mov	r7, r0
 8007362:	460c      	mov	r4, r1
 8007364:	b10a      	cbz	r2, 800736a <_printf_common+0x26>
 8007366:	3301      	adds	r3, #1
 8007368:	6033      	str	r3, [r6, #0]
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	0699      	lsls	r1, r3, #26
 800736e:	bf42      	ittt	mi
 8007370:	6833      	ldrmi	r3, [r6, #0]
 8007372:	3302      	addmi	r3, #2
 8007374:	6033      	strmi	r3, [r6, #0]
 8007376:	6825      	ldr	r5, [r4, #0]
 8007378:	f015 0506 	ands.w	r5, r5, #6
 800737c:	d106      	bne.n	800738c <_printf_common+0x48>
 800737e:	f104 0a19 	add.w	sl, r4, #25
 8007382:	68e3      	ldr	r3, [r4, #12]
 8007384:	6832      	ldr	r2, [r6, #0]
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	42ab      	cmp	r3, r5
 800738a:	dc26      	bgt.n	80073da <_printf_common+0x96>
 800738c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007390:	6822      	ldr	r2, [r4, #0]
 8007392:	3b00      	subs	r3, #0
 8007394:	bf18      	it	ne
 8007396:	2301      	movne	r3, #1
 8007398:	0692      	lsls	r2, r2, #26
 800739a:	d42b      	bmi.n	80073f4 <_printf_common+0xb0>
 800739c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073a0:	4641      	mov	r1, r8
 80073a2:	4638      	mov	r0, r7
 80073a4:	47c8      	blx	r9
 80073a6:	3001      	adds	r0, #1
 80073a8:	d01e      	beq.n	80073e8 <_printf_common+0xa4>
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	6922      	ldr	r2, [r4, #16]
 80073ae:	f003 0306 	and.w	r3, r3, #6
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	bf02      	ittt	eq
 80073b6:	68e5      	ldreq	r5, [r4, #12]
 80073b8:	6833      	ldreq	r3, [r6, #0]
 80073ba:	1aed      	subeq	r5, r5, r3
 80073bc:	68a3      	ldr	r3, [r4, #8]
 80073be:	bf0c      	ite	eq
 80073c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073c4:	2500      	movne	r5, #0
 80073c6:	4293      	cmp	r3, r2
 80073c8:	bfc4      	itt	gt
 80073ca:	1a9b      	subgt	r3, r3, r2
 80073cc:	18ed      	addgt	r5, r5, r3
 80073ce:	2600      	movs	r6, #0
 80073d0:	341a      	adds	r4, #26
 80073d2:	42b5      	cmp	r5, r6
 80073d4:	d11a      	bne.n	800740c <_printf_common+0xc8>
 80073d6:	2000      	movs	r0, #0
 80073d8:	e008      	b.n	80073ec <_printf_common+0xa8>
 80073da:	2301      	movs	r3, #1
 80073dc:	4652      	mov	r2, sl
 80073de:	4641      	mov	r1, r8
 80073e0:	4638      	mov	r0, r7
 80073e2:	47c8      	blx	r9
 80073e4:	3001      	adds	r0, #1
 80073e6:	d103      	bne.n	80073f0 <_printf_common+0xac>
 80073e8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f0:	3501      	adds	r5, #1
 80073f2:	e7c6      	b.n	8007382 <_printf_common+0x3e>
 80073f4:	18e1      	adds	r1, r4, r3
 80073f6:	1c5a      	adds	r2, r3, #1
 80073f8:	2030      	movs	r0, #48	@ 0x30
 80073fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073fe:	4422      	add	r2, r4
 8007400:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007404:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007408:	3302      	adds	r3, #2
 800740a:	e7c7      	b.n	800739c <_printf_common+0x58>
 800740c:	2301      	movs	r3, #1
 800740e:	4622      	mov	r2, r4
 8007410:	4641      	mov	r1, r8
 8007412:	4638      	mov	r0, r7
 8007414:	47c8      	blx	r9
 8007416:	3001      	adds	r0, #1
 8007418:	d0e6      	beq.n	80073e8 <_printf_common+0xa4>
 800741a:	3601      	adds	r6, #1
 800741c:	e7d9      	b.n	80073d2 <_printf_common+0x8e>
	...

08007420 <_printf_i>:
 8007420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007424:	7e0f      	ldrb	r7, [r1, #24]
 8007426:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007428:	2f78      	cmp	r7, #120	@ 0x78
 800742a:	4691      	mov	r9, r2
 800742c:	4680      	mov	r8, r0
 800742e:	460c      	mov	r4, r1
 8007430:	469a      	mov	sl, r3
 8007432:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007436:	d807      	bhi.n	8007448 <_printf_i+0x28>
 8007438:	2f62      	cmp	r7, #98	@ 0x62
 800743a:	d80a      	bhi.n	8007452 <_printf_i+0x32>
 800743c:	2f00      	cmp	r7, #0
 800743e:	f000 80d2 	beq.w	80075e6 <_printf_i+0x1c6>
 8007442:	2f58      	cmp	r7, #88	@ 0x58
 8007444:	f000 80b9 	beq.w	80075ba <_printf_i+0x19a>
 8007448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800744c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007450:	e03a      	b.n	80074c8 <_printf_i+0xa8>
 8007452:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007456:	2b15      	cmp	r3, #21
 8007458:	d8f6      	bhi.n	8007448 <_printf_i+0x28>
 800745a:	a101      	add	r1, pc, #4	@ (adr r1, 8007460 <_printf_i+0x40>)
 800745c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007460:	080074b9 	.word	0x080074b9
 8007464:	080074cd 	.word	0x080074cd
 8007468:	08007449 	.word	0x08007449
 800746c:	08007449 	.word	0x08007449
 8007470:	08007449 	.word	0x08007449
 8007474:	08007449 	.word	0x08007449
 8007478:	080074cd 	.word	0x080074cd
 800747c:	08007449 	.word	0x08007449
 8007480:	08007449 	.word	0x08007449
 8007484:	08007449 	.word	0x08007449
 8007488:	08007449 	.word	0x08007449
 800748c:	080075cd 	.word	0x080075cd
 8007490:	080074f7 	.word	0x080074f7
 8007494:	08007587 	.word	0x08007587
 8007498:	08007449 	.word	0x08007449
 800749c:	08007449 	.word	0x08007449
 80074a0:	080075ef 	.word	0x080075ef
 80074a4:	08007449 	.word	0x08007449
 80074a8:	080074f7 	.word	0x080074f7
 80074ac:	08007449 	.word	0x08007449
 80074b0:	08007449 	.word	0x08007449
 80074b4:	0800758f 	.word	0x0800758f
 80074b8:	6833      	ldr	r3, [r6, #0]
 80074ba:	1d1a      	adds	r2, r3, #4
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6032      	str	r2, [r6, #0]
 80074c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074c8:	2301      	movs	r3, #1
 80074ca:	e09d      	b.n	8007608 <_printf_i+0x1e8>
 80074cc:	6833      	ldr	r3, [r6, #0]
 80074ce:	6820      	ldr	r0, [r4, #0]
 80074d0:	1d19      	adds	r1, r3, #4
 80074d2:	6031      	str	r1, [r6, #0]
 80074d4:	0606      	lsls	r6, r0, #24
 80074d6:	d501      	bpl.n	80074dc <_printf_i+0xbc>
 80074d8:	681d      	ldr	r5, [r3, #0]
 80074da:	e003      	b.n	80074e4 <_printf_i+0xc4>
 80074dc:	0645      	lsls	r5, r0, #25
 80074de:	d5fb      	bpl.n	80074d8 <_printf_i+0xb8>
 80074e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80074e4:	2d00      	cmp	r5, #0
 80074e6:	da03      	bge.n	80074f0 <_printf_i+0xd0>
 80074e8:	232d      	movs	r3, #45	@ 0x2d
 80074ea:	426d      	negs	r5, r5
 80074ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074f0:	4859      	ldr	r0, [pc, #356]	@ (8007658 <_printf_i+0x238>)
 80074f2:	230a      	movs	r3, #10
 80074f4:	e011      	b.n	800751a <_printf_i+0xfa>
 80074f6:	6821      	ldr	r1, [r4, #0]
 80074f8:	6833      	ldr	r3, [r6, #0]
 80074fa:	0608      	lsls	r0, r1, #24
 80074fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007500:	d402      	bmi.n	8007508 <_printf_i+0xe8>
 8007502:	0649      	lsls	r1, r1, #25
 8007504:	bf48      	it	mi
 8007506:	b2ad      	uxthmi	r5, r5
 8007508:	2f6f      	cmp	r7, #111	@ 0x6f
 800750a:	4853      	ldr	r0, [pc, #332]	@ (8007658 <_printf_i+0x238>)
 800750c:	6033      	str	r3, [r6, #0]
 800750e:	bf14      	ite	ne
 8007510:	230a      	movne	r3, #10
 8007512:	2308      	moveq	r3, #8
 8007514:	2100      	movs	r1, #0
 8007516:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800751a:	6866      	ldr	r6, [r4, #4]
 800751c:	60a6      	str	r6, [r4, #8]
 800751e:	2e00      	cmp	r6, #0
 8007520:	bfa2      	ittt	ge
 8007522:	6821      	ldrge	r1, [r4, #0]
 8007524:	f021 0104 	bicge.w	r1, r1, #4
 8007528:	6021      	strge	r1, [r4, #0]
 800752a:	b90d      	cbnz	r5, 8007530 <_printf_i+0x110>
 800752c:	2e00      	cmp	r6, #0
 800752e:	d04b      	beq.n	80075c8 <_printf_i+0x1a8>
 8007530:	4616      	mov	r6, r2
 8007532:	fbb5 f1f3 	udiv	r1, r5, r3
 8007536:	fb03 5711 	mls	r7, r3, r1, r5
 800753a:	5dc7      	ldrb	r7, [r0, r7]
 800753c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007540:	462f      	mov	r7, r5
 8007542:	42bb      	cmp	r3, r7
 8007544:	460d      	mov	r5, r1
 8007546:	d9f4      	bls.n	8007532 <_printf_i+0x112>
 8007548:	2b08      	cmp	r3, #8
 800754a:	d10b      	bne.n	8007564 <_printf_i+0x144>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	07df      	lsls	r7, r3, #31
 8007550:	d508      	bpl.n	8007564 <_printf_i+0x144>
 8007552:	6923      	ldr	r3, [r4, #16]
 8007554:	6861      	ldr	r1, [r4, #4]
 8007556:	4299      	cmp	r1, r3
 8007558:	bfde      	ittt	le
 800755a:	2330      	movle	r3, #48	@ 0x30
 800755c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007560:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007564:	1b92      	subs	r2, r2, r6
 8007566:	6122      	str	r2, [r4, #16]
 8007568:	f8cd a000 	str.w	sl, [sp]
 800756c:	464b      	mov	r3, r9
 800756e:	aa03      	add	r2, sp, #12
 8007570:	4621      	mov	r1, r4
 8007572:	4640      	mov	r0, r8
 8007574:	f7ff fee6 	bl	8007344 <_printf_common>
 8007578:	3001      	adds	r0, #1
 800757a:	d14a      	bne.n	8007612 <_printf_i+0x1f2>
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	b004      	add	sp, #16
 8007582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	f043 0320 	orr.w	r3, r3, #32
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	4833      	ldr	r0, [pc, #204]	@ (800765c <_printf_i+0x23c>)
 8007590:	2778      	movs	r7, #120	@ 0x78
 8007592:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	6831      	ldr	r1, [r6, #0]
 800759a:	061f      	lsls	r7, r3, #24
 800759c:	f851 5b04 	ldr.w	r5, [r1], #4
 80075a0:	d402      	bmi.n	80075a8 <_printf_i+0x188>
 80075a2:	065f      	lsls	r7, r3, #25
 80075a4:	bf48      	it	mi
 80075a6:	b2ad      	uxthmi	r5, r5
 80075a8:	6031      	str	r1, [r6, #0]
 80075aa:	07d9      	lsls	r1, r3, #31
 80075ac:	bf44      	itt	mi
 80075ae:	f043 0320 	orrmi.w	r3, r3, #32
 80075b2:	6023      	strmi	r3, [r4, #0]
 80075b4:	b11d      	cbz	r5, 80075be <_printf_i+0x19e>
 80075b6:	2310      	movs	r3, #16
 80075b8:	e7ac      	b.n	8007514 <_printf_i+0xf4>
 80075ba:	4827      	ldr	r0, [pc, #156]	@ (8007658 <_printf_i+0x238>)
 80075bc:	e7e9      	b.n	8007592 <_printf_i+0x172>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	f023 0320 	bic.w	r3, r3, #32
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	e7f6      	b.n	80075b6 <_printf_i+0x196>
 80075c8:	4616      	mov	r6, r2
 80075ca:	e7bd      	b.n	8007548 <_printf_i+0x128>
 80075cc:	6833      	ldr	r3, [r6, #0]
 80075ce:	6825      	ldr	r5, [r4, #0]
 80075d0:	6961      	ldr	r1, [r4, #20]
 80075d2:	1d18      	adds	r0, r3, #4
 80075d4:	6030      	str	r0, [r6, #0]
 80075d6:	062e      	lsls	r6, r5, #24
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	d501      	bpl.n	80075e0 <_printf_i+0x1c0>
 80075dc:	6019      	str	r1, [r3, #0]
 80075de:	e002      	b.n	80075e6 <_printf_i+0x1c6>
 80075e0:	0668      	lsls	r0, r5, #25
 80075e2:	d5fb      	bpl.n	80075dc <_printf_i+0x1bc>
 80075e4:	8019      	strh	r1, [r3, #0]
 80075e6:	2300      	movs	r3, #0
 80075e8:	6123      	str	r3, [r4, #16]
 80075ea:	4616      	mov	r6, r2
 80075ec:	e7bc      	b.n	8007568 <_printf_i+0x148>
 80075ee:	6833      	ldr	r3, [r6, #0]
 80075f0:	1d1a      	adds	r2, r3, #4
 80075f2:	6032      	str	r2, [r6, #0]
 80075f4:	681e      	ldr	r6, [r3, #0]
 80075f6:	6862      	ldr	r2, [r4, #4]
 80075f8:	2100      	movs	r1, #0
 80075fa:	4630      	mov	r0, r6
 80075fc:	f7f8 fe18 	bl	8000230 <memchr>
 8007600:	b108      	cbz	r0, 8007606 <_printf_i+0x1e6>
 8007602:	1b80      	subs	r0, r0, r6
 8007604:	6060      	str	r0, [r4, #4]
 8007606:	6863      	ldr	r3, [r4, #4]
 8007608:	6123      	str	r3, [r4, #16]
 800760a:	2300      	movs	r3, #0
 800760c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007610:	e7aa      	b.n	8007568 <_printf_i+0x148>
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	4632      	mov	r2, r6
 8007616:	4649      	mov	r1, r9
 8007618:	4640      	mov	r0, r8
 800761a:	47d0      	blx	sl
 800761c:	3001      	adds	r0, #1
 800761e:	d0ad      	beq.n	800757c <_printf_i+0x15c>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	079b      	lsls	r3, r3, #30
 8007624:	d413      	bmi.n	800764e <_printf_i+0x22e>
 8007626:	68e0      	ldr	r0, [r4, #12]
 8007628:	9b03      	ldr	r3, [sp, #12]
 800762a:	4298      	cmp	r0, r3
 800762c:	bfb8      	it	lt
 800762e:	4618      	movlt	r0, r3
 8007630:	e7a6      	b.n	8007580 <_printf_i+0x160>
 8007632:	2301      	movs	r3, #1
 8007634:	4632      	mov	r2, r6
 8007636:	4649      	mov	r1, r9
 8007638:	4640      	mov	r0, r8
 800763a:	47d0      	blx	sl
 800763c:	3001      	adds	r0, #1
 800763e:	d09d      	beq.n	800757c <_printf_i+0x15c>
 8007640:	3501      	adds	r5, #1
 8007642:	68e3      	ldr	r3, [r4, #12]
 8007644:	9903      	ldr	r1, [sp, #12]
 8007646:	1a5b      	subs	r3, r3, r1
 8007648:	42ab      	cmp	r3, r5
 800764a:	dcf2      	bgt.n	8007632 <_printf_i+0x212>
 800764c:	e7eb      	b.n	8007626 <_printf_i+0x206>
 800764e:	2500      	movs	r5, #0
 8007650:	f104 0619 	add.w	r6, r4, #25
 8007654:	e7f5      	b.n	8007642 <_printf_i+0x222>
 8007656:	bf00      	nop
 8007658:	080085c5 	.word	0x080085c5
 800765c:	080085d6 	.word	0x080085d6

08007660 <memmove>:
 8007660:	4288      	cmp	r0, r1
 8007662:	b510      	push	{r4, lr}
 8007664:	eb01 0402 	add.w	r4, r1, r2
 8007668:	d902      	bls.n	8007670 <memmove+0x10>
 800766a:	4284      	cmp	r4, r0
 800766c:	4623      	mov	r3, r4
 800766e:	d807      	bhi.n	8007680 <memmove+0x20>
 8007670:	1e43      	subs	r3, r0, #1
 8007672:	42a1      	cmp	r1, r4
 8007674:	d008      	beq.n	8007688 <memmove+0x28>
 8007676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800767a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800767e:	e7f8      	b.n	8007672 <memmove+0x12>
 8007680:	4402      	add	r2, r0
 8007682:	4601      	mov	r1, r0
 8007684:	428a      	cmp	r2, r1
 8007686:	d100      	bne.n	800768a <memmove+0x2a>
 8007688:	bd10      	pop	{r4, pc}
 800768a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800768e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007692:	e7f7      	b.n	8007684 <memmove+0x24>

08007694 <_sbrk_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4d06      	ldr	r5, [pc, #24]	@ (80076b0 <_sbrk_r+0x1c>)
 8007698:	2300      	movs	r3, #0
 800769a:	4604      	mov	r4, r0
 800769c:	4608      	mov	r0, r1
 800769e:	602b      	str	r3, [r5, #0]
 80076a0:	f7fa f91a 	bl	80018d8 <_sbrk>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_sbrk_r+0x1a>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_sbrk_r+0x1a>
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	2000503c 	.word	0x2000503c

080076b4 <_realloc_r>:
 80076b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b8:	4680      	mov	r8, r0
 80076ba:	4615      	mov	r5, r2
 80076bc:	460c      	mov	r4, r1
 80076be:	b921      	cbnz	r1, 80076ca <_realloc_r+0x16>
 80076c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076c4:	4611      	mov	r1, r2
 80076c6:	f7ff bc59 	b.w	8006f7c <_malloc_r>
 80076ca:	b92a      	cbnz	r2, 80076d8 <_realloc_r+0x24>
 80076cc:	f7ff fbea 	bl	8006ea4 <_free_r>
 80076d0:	2400      	movs	r4, #0
 80076d2:	4620      	mov	r0, r4
 80076d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076d8:	f000 f81a 	bl	8007710 <_malloc_usable_size_r>
 80076dc:	4285      	cmp	r5, r0
 80076de:	4606      	mov	r6, r0
 80076e0:	d802      	bhi.n	80076e8 <_realloc_r+0x34>
 80076e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80076e6:	d8f4      	bhi.n	80076d2 <_realloc_r+0x1e>
 80076e8:	4629      	mov	r1, r5
 80076ea:	4640      	mov	r0, r8
 80076ec:	f7ff fc46 	bl	8006f7c <_malloc_r>
 80076f0:	4607      	mov	r7, r0
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d0ec      	beq.n	80076d0 <_realloc_r+0x1c>
 80076f6:	42b5      	cmp	r5, r6
 80076f8:	462a      	mov	r2, r5
 80076fa:	4621      	mov	r1, r4
 80076fc:	bf28      	it	cs
 80076fe:	4632      	movcs	r2, r6
 8007700:	f7ff fbc2 	bl	8006e88 <memcpy>
 8007704:	4621      	mov	r1, r4
 8007706:	4640      	mov	r0, r8
 8007708:	f7ff fbcc 	bl	8006ea4 <_free_r>
 800770c:	463c      	mov	r4, r7
 800770e:	e7e0      	b.n	80076d2 <_realloc_r+0x1e>

08007710 <_malloc_usable_size_r>:
 8007710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007714:	1f18      	subs	r0, r3, #4
 8007716:	2b00      	cmp	r3, #0
 8007718:	bfbc      	itt	lt
 800771a:	580b      	ldrlt	r3, [r1, r0]
 800771c:	18c0      	addlt	r0, r0, r3
 800771e:	4770      	bx	lr

08007720 <_init>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	bf00      	nop
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr

0800772c <_fini>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	bf00      	nop
 8007730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007732:	bc08      	pop	{r3}
 8007734:	469e      	mov	lr, r3
 8007736:	4770      	bx	lr
